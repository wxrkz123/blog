<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Random habits</title>
      <link href="/blog/2023/08/23/Random-habits/"/>
      <url>/blog/2023/08/23/Random-habits/</url>
      
        <content type="html"><![CDATA[<h2 id="1-习惯的定义及其在日常生活中的重要性"><a href="#1-习惯的定义及其在日常生活中的重要性" class="headerlink" title="1. 习惯的定义及其在日常生活中的重要性"></a>1. 习惯的定义及其在日常生活中的重要性</h2><p>习惯，一个我们每天都在经历但可能没有深入思考的词汇。当我们谈论习惯时，我们是指什么？按照词典的定义，习惯是“经常重复的或通常做的行为，或者是一个人经常做的特定方式”。简单来说，它是我们不经意之间的、经常做的行为。</p><p>但在更深层次上，习惯不仅仅是重复的行为。它是我们身份的一部分，决定我们如何思考、行动和与世界互动。有人曾经说过：“<strong>我们首先塑造我们的习惯，然后我们的习惯塑造我们</strong>。”确实，这些看似微小的日常行为，当累积起来，将决定我们的健康、财务、关系和生活满意度。</p><p>在我们的日常生活中，习惯的重要性不言而喻。考虑一下你的日常例程。你早上起床后第一件事是什么？是刷牙、喝杯水、还是查看手机上的通知？这些日常的选择，不论大小，都构成了你生活的基础。而随着时间的推移，好的习惯可以为我们铺设成功之路，而坏的习惯则可能导致失败或滞后。更重要的是，习惯不仅影响个人。它们也塑造了文化、社区和国家。当一个社区鼓励阅读和终身学习的习惯时，它可能会产生更多的知识型人才。而一个鼓励环保和节约的国家，可能会更有可能保持其自然资源和环境的完好。</p><p>因此，理解习惯的定义和它们在日常生活中的重要性，对于我们每个人来说都是至关重要的。在接下来的部分中，我们将更深入地探讨习惯的形成、如何改变习惯，以及习惯与我们身份的关系。</p><h2 id="2-习惯的形成"><a href="#2-习惯的形成" class="headerlink" title="2. 习惯的形成"></a>2. 习惯的形成</h2><p>在深入探索人类行为的广阔领域中，习惯的机制引起了我的浓厚兴趣。与其说习惯是简单的行为重复，不如说它是对复杂心理和社会动态的反应。让我们从某种角度审视这一现象。</p><p>首先，习惯并不是孤立存在的。它们是由连续的因果链条组成的。首先，我们遇到了一个“触发”。这可能是一个外部的情境，例如看到一家咖啡店，或是一个内部的情感，如感到疲倦。这个触发会启动我们的内部程序，驱使我们进行下一步行动。</p><p>接下来是“例行公事”，一个自动化的行为响应。拿上面的例子来说，感到疲倦可能会驱使你进入咖啡店并购买一杯咖啡。这一步并不需要深思熟虑，因为你的大脑已经为此建立了一个快捷方式。</p><p>最后，每一次行为都会带来某种“奖励”。在这个场景中，咖啡给你带来了清醒和满足感，这种奖励使得你下次再次感到疲倦时更有可能再次选择喝咖啡。</p><p>然而，要注意，这个循环并不是固定不变的。环境的微小变化、我们的内部情绪和其他无数因素都可能影响它。尽管如此，一旦习惯被形成，它会成为一种强大的力量，驱使我们的行为并塑造我们的日常生活。</p><p>当然，这只是习惯背后的一种简化模型。人类行为的复杂性和丰富性远远超出了这三个步骤的描述。但这个模型为我们提供了一个有用的框架，帮助我们理解习惯如何开始、如何维持，以及如何改变。</p><p>举例说明：尼古拉斯的故事</p><p>尼古拉斯，一个中年经济学家，每天上午10点都会离开他的办公桌，步行到公司楼下的小便利店，买一块巧克力饼干，然后回到办公室。这成了他的日常例行公事，他几乎不再对此加以思考。</p><p>1)触发: 尼古拉斯发现，每天上午10点左右，他都会开始感到无聊和疲惫，这是他习惯循环的触发。他需要一个休息，一个改变，或是任何东西来中断这种状态。</p><p>2)例行公事: 他选择下楼到便利店。尽管初衷是为了休息，但他的大脑很快将这种行为与购买巧克力饼干联系起来。每次走进便利店，尼古拉斯都会被那熟悉的甜点柜台吸引。</p><p>3)奖励: 当尼古拉斯回到办公室并吃下那块饼干时，他会感到暂时的满足和快乐。这短暂的奖励感使他在第二天同一时间再次感到冲动，重复这一行为。</p><p>但这种习惯对尼古拉斯的健康有害。几个月后，他注意到他的体重增加了，而且他并没有真正从这种习惯中获得长期的满足感。为了打破这种习惯，尼古拉斯决定深入分析这一习惯循环。他意识到，他实际上并不真的渴望巧克力饼干，他只是需要一个简短的休息。</p><p>于是，他开始试验新的例行公事：当10点的触发出现时，他开始出去散步或与同事聊天。几周后，尼古拉斯发现他不再渴望巧克力饼干。他找到了一种新的方式来满足他的需求，并得到了奖励——与人建立联系或得到新鲜空气，而不是糖分。</p><p>尼古拉斯的故事是一个简单的例子，说明了习惯是如何形成的，以及如何通过理解习惯循环。</p><p>如果我们从神经科学视角分析的话，就可以探索习惯的本质。毕竟，大脑是我们所有行为的中心，习惯自然也不例外。让我们通过一个微观的透视，试图理解习惯在神经层面上的操作机制。位于大脑中部的基底节是一个相对较为古老的部分，它在习惯形成中起着核心作用。为什么一个如此古老的大脑区域会掌管如此现代、复杂的行为过程呢？<strong>答案可能源于经济性</strong>。</p><p>想象一个初次学习开车的人。他必须专注地处理每一个操作，每一个按钮，每一个动作。但随着时间的推移，这些行为变得自动化。为什么？这是因为大脑正在努力降低能量消耗，将复杂的行为简化为可以轻松重复的例行公事。基底节在此过程中发挥着关键作用，帮助大脑“节省”能量。</p><p>当我们在日常生活中遇到一个已知的触发时，基底节会自动“提取”与之相关的例行公事，并为我们执行。这种自动化确保了我们可以在不投入太多认知资源的情况下完成任务。但这也带来了一个问题：习惯一旦形成，就难以改变。</p><p>当然，理解基底节如何在习惯形成中发挥作用，只是对这一复杂过程的一个简化解释。但它为我们提供了一个启示：如果我们想要改变习惯，我们不仅需要意识到它，还需要理解它在神经层面上的操作方式。  </p><p>这种对习惯深层次的理解和分析，提醒我们，尽管我们的行为在很大程度上受到了我们的神经结构的影响，但通过深入的理解和刻意的努力，我们仍然有能力改变这些行为模式，使其更加符合我们的长期目标和愿景。</p><h2 id="3-改变习惯的策略"><a href="#3-改变习惯的策略" class="headerlink" title="3. 改变习惯的策略"></a>3. 改变习惯的策略</h2><p>习惯的本质和形成方式常常被误解。传统上，我们常常认为习惯是可以从零开始培养的。但更深入的认识告诉我们，习惯实际上并非被“养成”，而是被“替换”。每天，自动化的习惯行为充斥着我们的生活，节省了大量的认知资源。但当我们决心改变某种习惯时，单纯地增加新的行为往往不够。旧习惯的触发机制和奖励机制已经深深植根。因此，策略性地“替换”习惯成为关键。</p><p>要成功替换一个习惯，首先需明确其触发机制，再找出新的应对行为，并确保此新行为也带有奖励机制，从而加强新习惯的形成。这种策略性的替换意味着我们需要深入挖掘习惯背后的动机，并有针对性地进行调整。</p><p>在习惯形成与调整的过程中，BJ Fogg和James Clear为我们提供了两个非常有力的策略。</p><p>1)BJ Fogg</p><p>BJ Fogg的微小习惯理论为我们展示了如何利用我们日常的习惯作为习惯形成的基石。他的观点是，人们常常失败于建立新习惯，是因为他们设定的目标过于宏大，导致难以坚持。而将目标分解成更小、更具体的行动，就能更容易地开始和坚持下去。例如，想要培养锻炼的习惯，不必一开始就决心每天锻炼一小时。而是可以从每天做5分钟的拉伸开始，这个小目标既容易实现，也容易培养自信和动力。一旦这个微小的习惯稳固下来，再逐步增加难度和时间。</p><p>更为巧妙的是，Fogg提议，为了更好地保持习惯的连续性，可以尝试将新习惯与某个已有的日常活动连接起来，称为“锚点”。这样，每次执行那个日常活动时，就会自然而然地想到新习惯。例如，每天吃完早餐后进行短暂的冥想，或是在刷牙前进行几分钟的深呼吸。这种策略确保新习惯能够融入我们的日常生活，而不是变成另一个需要额外努力去记住的任务。</p><p>废话少说，上你们最喜欢的案例故事。</p><p>艾米丽是一名软件开发工程师，每天都面临着代码的挑战。由于长时间坐在电脑前，她的身体状况开始逐渐下滑，特别是背部和颈部经常感到酸痛。她明白，定期的运动能够缓解她的这些问题，所以她多次尝试建立锻炼的习惯。</p><p>最初，她买了一个健身房的年卡，打算每天下班后去健身房锻炼一小时。但很快她发现，由于工作压力和项目的突发状况，她经常需要加班，经常错过了健身房的营业时间。那张昂贵的年卡最终成为了一个装饰。</p><p>之后，艾米丽尝试在家做瑜伽。她购买了瑜伽垫和一套教程，希望每天晚上在家练习半小时。然而，每当她结束一天繁重的编程工作，回到家，她经常选择放松地躺在沙发上看电视，而那块瑜伽垫尘封在角落。</p><p>在艾米丽尝试多种方法失败后，她曾幻想过能不能通过她最喜欢的Nintendo Switch游戏来锻炼身体。毕竟，作为一名程序员，电子游戏是她的另一大爱好。她听说过一款名为《健身环大冒险》的游戏，玩家在游玩过程中需要进行各种身体活动来驱动游戏进程。充满期待地，她购买了这款游戏和配套的健身环。最初，她确实非常投入，每天晚上玩一两个小时，全身出汗。但不久，工作和其他娱乐活动开始挤占她的时间，使得玩游戏的频率逐渐减少。再加上随着关卡的增加，游戏难度也逐步上升，需要的体力和耐心都在增加。最终，这个方法又成为了另一个未能坚持的尝试。（所以为什么我说计划无用，只有找到根源才能解决问题）</p><p>失败了三次，艾米丽开始感到灰心。她感觉自己就是那种无法建立健身习惯的人。直到一次偶然的机会，她询问了我……</p><p>考虑到自己每天都需要长时间坐在电脑前工作，她选择了一个简单的习惯：每编写完一个代码模块，就起身做五分钟的伸展运动。这五分钟的锻炼很容易融入她的工作日常，不需要额外的设备，也不需要特别调整时间。作为“锚点”，她设置了电脑上的提醒。每次完成一个任务，电脑会提醒她起身伸展。</p><p>几周下来，这个微小习惯真的起到了效果。不仅如此，她还发现自己的工作效率有所提高，因为这短暂的运动能够缓解眼睛和大脑的疲劳，让她更有精神地投入到下一个任务中。这个微小的改变，帮助艾米丽不仅改善了身体状况，也让她的编程生活变得更为健康和有序。</p><p>2）James Clear </p><p>James Clear的习惯策略为我们揭示了成功养成和坚持习惯的三大秘诀：明确性、吸引力和执行的简易性。</p><p>明确性：不确定性是习惯失败的罪魁祸首。只有当我们为自己设定清晰、具体的目标，例如“每天早上7点跑步30分钟”，我们才能避免拖延，确保每天都有明确的行动方向。</p><p>吸引力：习惯不仅仅是行动，它更是一种身份的体现。当我们将某个习惯与自己的核心身份相联系，这个习惯就不再是单纯的任务，而是身份的一部分。这是一种强大的心理转变。Clear建议的“我是跑者”而不仅仅是“我要跑步”，为我们提供了一种深层次的动机和吸引力，将习惯和自身价值观紧密连接。</p><p>执行的简易性：开始总是最难的，但Clear坚信一旦开始，其后续的过程就会更容易。他强调从微小的行动开始，像“做一次俯卧撑”，这种简单的启动行为会为习惯的持续创造动力，就像滚动的雪球，开始虽小，但动量会随着时间而增长。</p><p>然而我们艾米莉的故事还没有结束。</p><p>在尝试了许多方法后，艾米莉终于成功地采用了BJ Fogg的微小习惯理论。但她知道，养成习惯并不仅仅是开始，更重要的是坚持下去。这时，她读到了James Clear的《原子习惯》，并从中吸取了许多宝贵的启示（当然阅读这时候也替换掉了她平时打游戏的时间）</p><p>艾米莉重新审视了自己的锻炼目标。之前，她总是告诉自己：“我要变得更健康”，但这太过宽泛。受到Clear的启示，她改变了策略，为自己设定了明确的目标：“我要每天早上7点进行30分钟的有氧运动。” 这个明确的目标给了她每天的方向和焦点。</p><p>为了使锻炼更加吸引人，艾米莉决定将其与自己的身份联系起来。她开始自我激励：“我是一个程序员，但我也是一个跑者。”这样的身份认同让她每次面对“是否要运动”的选择时，更容易坚持下去。艾米莉知道，为了确保习惯的持续，她需要简化自己的锻炼过程。她决定从最简单的开始，每天做几次深蹲和俯卧撑。只要开始，后续的运动就像雪球效应，自然而然会跟随。几个月过去了，艾米莉的日常已经完全改变。每天早上，她按时起床，准时开始她的运动。她不再依赖Switch游戏或其他复杂的策略，因为她已经找到了自己的运动节奏。而更让她惊喜的是，她的编程效率也随之提高了，她觉得每天早上的锻炼给了她清晰的头脑和充沛的精力。在经历了许多失败后，艾米莉终于找到了适合自己的习惯养成策略，她深知，成功的秘诀不在于开始，而在于持续和策略。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Numpy</title>
      <link href="/blog/2023/08/20/Python-Numpy/"/>
      <url>/blog/2023/08/20/Python-Numpy/</url>
      
        <content type="html"><![CDATA[<h2 id="Numpy介绍"><a href="#Numpy介绍" class="headerlink" title="Numpy介绍"></a>Numpy介绍</h2><p>NumPy是Python语言的一个扩展程序库。支持高阶大规模的多维数组与矩阵运算，此外也针对数组运算提供大量的数学函数函式库。</p><p>针对金融领域的大量矩阵运算，Numpy模块中存储多维数据、处理大型矩阵、开展随机抽样等复杂计算的功能可以完美解决金融领域许多复杂的问题。正如Numpy的random模块可以解决金融量化分析与风险管理过程中涉及基于某种分布的随机抽样，Numpy的financial模块可以测算现金流终值、现值、内含报酬率等金融问题。因此本章主要结合金融场景有的放矢地对Numpy的操作进行介绍和演示。</p><p><img src="../Python-Numpy/Numpy%E4%BB%8B%E7%BB%8D.png" alt="Numpy介绍"></p><h2 id="Numpy操作"><a href="#Numpy操作" class="headerlink" title="Numpy操作"></a>Numpy操作</h2><h3 id="1-导入numpy与检查版本"><a href="#1-导入numpy与检查版本" class="headerlink" title="1.导入numpy与检查版本"></a>1.导入numpy与检查版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np    <span class="comment">#导入NumPy模块</span></span><br><span class="line"><span class="built_in">print</span>(np.__version__)    <span class="comment">#查看NumPy版本信息</span></span><br></pre></td></tr></table></figure><p>这里我导入Numpy模块后将其命名为np，后续使用就基于这个命名进行。另外，我这里使用的Numpy版本是1.24.3，不同版本可能会有细微差异，不过应该不会影响使用。</p><h3 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2.创建数组"></a>2.创建数组</h3><p>创建数组的方式有很多，这里简单介绍几种</p><h5 id="1-直接输入法"><a href="#1-直接输入法" class="headerlink" title="1.直接输入法"></a>1.直接输入法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_array = np.array(一个列表)    <span class="comment">#一维数组</span></span><br><span class="line">b_array = np.array([列表<span class="number">1</span>，列表<span class="number">2</span>，...，列表n])    <span class="comment">#二维数组</span></span><br></pre></td></tr></table></figure><p>这两种方式都可以建立数组，不过常用的数组基本都不超过二维，因此直接输入法在很多场景用途都非常广泛。</p><h5 id="2-方法生成数组"><a href="#2-方法生成数组" class="headerlink" title="2.方法生成数组"></a>2.方法生成数组</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">np.arange(start,stop,step)    <span class="comment">#返回一个有终点和起点的固定步长的排列</span></span><br><span class="line">np.linspace(start,stop,num)    <span class="comment">#生成一个指定大小，指定数据区间的均匀分布序列</span></span><br><span class="line">np.zeros((m,n))    <span class="comment">#返回一个给定形状和类型的用0填充的数组</span></span><br><span class="line">np.ones((m,n))    <span class="comment">#返回一个给定形状和类型的用1填充的数组</span></span><br><span class="line">np.eye(N)    <span class="comment">#创建一个指定形状参数的单位矩阵数组</span></span><br></pre></td></tr></table></figure><p>当然，通过不同方法创建的数组应用场景也会不同。在金融领域，这几个方法是比较常用的，可以迅速生成自己需要的数组。（亲测非常的好用hh）</p><h5 id="3-将列表转化为数组"><a href="#3-将列表转化为数组" class="headerlink" title="3.将列表转化为数组"></a>3.将列表转化为数组</h5><p>有些时候，数据都用列表进行存储，这时候我们就需要通过列表转化为数组，从而使用Numpy模块进行金融分析。</p><p>我们常用的方法主要有三个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.array(listname)    <span class="comment">#将列表转化为数组</span></span><br><span class="line">arrayname.resize(m,n)    <span class="comment">#改变数组形状</span></span><br><span class="line">arrayname.ravel()    <span class="comment">#数组降维</span></span><br></pre></td></tr></table></figure><p>数组中的数据在内存里是固定的，但计算时的排列方式却可以随时更改，这也是数组的强大之处。</p><p>值得说的一点，<code>reshape</code>函数和<code>resize</code>函数功能相同，都可以修改数组的形状，区别是前者返回新数组，后者则直接修改原始数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arraynew = arrayord.reshape(m,n)    <span class="comment">#修改数组形状</span></span><br></pre></td></tr></table></figure><h3 id="3-数组属性"><a href="#3-数组属性" class="headerlink" title="3.数组属性"></a>3.数组属性</h3><p>好了，说了这么多，那我们应该怎么查看数组的信息呢？下面我列出了一些比较常用的方法，非常的基础。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(arrayname)    <span class="comment">#显示NumPy数组类型</span></span><br><span class="line">arrayname.dtype    <span class="comment">#显示数组元素的类型</span></span><br><span class="line">arrayname.size    <span class="comment">#显示数组元素的个数</span></span><br><span class="line">arrayname.shape     <span class="comment">#显示数组的形状（行数，列数）</span></span><br><span class="line">arrayname.ndim     <span class="comment">#显示数组的维度</span></span><br></pre></td></tr></table></figure><p>数组的类型：<code>&lt;class &#39;numpy.ndarray&#39;&gt;</code>（其实，我也不知道ndarray是啥意思，可能是n维数组（？））</p><p>查看ndarray支持的数据类型可访问：<a href="https://numpy.org/devdocs/user/basics.types.html%EF%BC%88%E8%BF%99%E6%98%AFnumpy%E7%9A%84%E5%AE%98%E7%BD%91%EF%BC%8C%E6%94%BE%E5%BF%83%E8%BF%9B%EF%BC%89">https://numpy.org/devdocs/user/basics.types.html（这是numpy的官网，放心进）</a></p><p>后面那三个方法就没啥好说的，很容易理解。</p><h3 id="4-数组操作"><a href="#4-数组操作" class="headerlink" title="4.数组操作"></a>4.数组操作</h3><h5 id="1-切片-索引-排序"><a href="#1-切片-索引-排序" class="headerlink" title="1.切片,索引,排序"></a>1.切片,索引,排序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arrayname[start:end:step,start:end:step]    <span class="comment">#二维数组的切片</span></span><br><span class="line">arrayname[m,n]    <span class="comment">#二维数组的索引</span></span><br><span class="line">np.sort(arrayname,axis = <span class="number">0</span>/<span class="number">1</span>)    <span class="comment">#数组的排序</span></span><br></pre></td></tr></table></figure><p>这三个操作就非常的基本了，切片、索引、排序三个常用方法。类似于python列表的操作，但有一点点不一样。</p><p>主要的不同是<code>sort</code>函数，<code>axis</code>参数可以通过坐标轴设定来改变排序方法，<code>axis=1</code>表示横向操作，<code>axis=0</code>表示纵向操作。不输入参数时，默认按行进行排序。</p><h5 id="2-合并数组"><a href="#2-合并数组" class="headerlink" title="2.合并数组"></a>2.合并数组</h5><p>在金融分析的时候，我们有时候还需要对不同的数组进行合并，从而达到整合数据的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.append(array_one,array_two)    <span class="comment">#合并两个数组</span></span><br><span class="line">np.concatenate([数组<span class="number">1</span>],[数组<span class="number">2</span>],...,[数组n])    <span class="comment">#合并多个数组</span></span><br></pre></td></tr></table></figure><p>这两个方法都可以对数组进行合并。不同的是，append函数默认是对行进行合并，concatenate函数默认对列进行合并。（append函数使用之后可能会导致数组退化为一维数组）</p><h5 id="3-数组计算"><a href="#3-数组计算" class="headerlink" title="3.数组计算"></a>3.数组计算</h5><p>不多废话，直接上方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arrayname.<span class="built_in">sum</span>()    <span class="comment">#对每个数组的元素求和</span></span><br><span class="line">arrayname.<span class="built_in">min</span>()    <span class="comment">#求数组的元素最小值</span></span><br><span class="line">arrayname.<span class="built_in">max</span>()    <span class="comment">#求数组元素的最大值</span></span><br><span class="line">arrayname.prod()    <span class="comment">#求数组内部元素的乘积</span></span><br><span class="line">arrayname.mean()    <span class="comment">#求数组元素的均值</span></span><br><span class="line">arrayname.var()    <span class="comment">#求数组元素的方差</span></span><br><span class="line">arrayname.std()    <span class="comment">#求数组元素的标准差</span></span><br></pre></td></tr></table></figure><p>这几个是最常用的方法，默认是对所有元素进行操作。当然，我们也可以通过设置<code>axis参数</code>让它只针对行列进行操作。</p><p>下面是数组之间的计算方法，可以类比普通计算方法。这部分内容还是比较通俗易懂的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array_one + array_two    <span class="comment">#数组相加</span></span><br><span class="line">array_one - array_two    <span class="comment">#数组相减</span></span><br><span class="line">array_one * array_two    <span class="comment">#数组相乘</span></span><br><span class="line">array_one / array_two    <span class="comment">#数组相除</span></span><br><span class="line"><span class="built_in">pow</span>(arrayname,n)    <span class="comment">#数组的幂</span></span><br><span class="line">np.dot(array_one,array_two)    <span class="comment">#计算两个数组的点积</span></span><br></pre></td></tr></table></figure><h5 id="4-矩阵操作"><a href="#4-矩阵操作" class="headerlink" title="4.矩阵操作"></a>4.矩阵操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.corrcoef(arrayname)    <span class="comment">#查看相关系数矩阵</span></span><br><span class="line">np.diag(arrayname)    <span class="comment">#查看矩阵对角线</span></span><br><span class="line">np.triu(arrayname)    <span class="comment">#查看矩阵上三角</span></span><br><span class="line">np.tril(arrayname)    <span class="comment">#查看矩阵下三角</span></span><br><span class="line">np.trace(arrayname)    <span class="comment">#查看矩阵的迹</span></span><br><span class="line">np.transpose(arrayname)    <span class="comment">#查看转置矩阵</span></span><br></pre></td></tr></table></figure><p>同样，都是线性代数的知识，简单略过。</p><h3 id="5-linalg模块"><a href="#5-linalg模块" class="headerlink" title="5.linalg模块"></a>5.linalg模块</h3><p>终于到了linalg子模块的部分了，这个模块主要是用来进行线性代数的工具包。对于金融领域来说，常用的不算很多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy.linalg <span class="keyword">as</span> la    <span class="comment">#导入linalg模块</span></span><br><span class="line">la.det(arrayname)    <span class="comment">#矩阵行列式</span></span><br><span class="line">la.inv(arrayname)    <span class="comment">#逆矩阵</span></span><br></pre></td></tr></table></figure><p>没错，就这两个方法，可以说关于矩阵的运算，numpy基础库就已经可以解决大部分，很多时候并不需要再引入linalg模块。</p><h3 id="6-random模块"><a href="#6-random模块" class="headerlink" title="6.random模块"></a>6.random模块</h3><p>哈哈哈，这个子模块可是非常常用的。不仅仅是金融领域，在平常的时候，求一些随机数的时候也经常使用。</p><p>random模块主要是通过生成随机种子来创建随机数，而随机种子原理是通过读取用户操作时的时间戳来生成序列。（不过到2038 年 01 月 19 日 03 时 14 分 07 秒就失效了，ee，不知道之后会咋解决这个问题，可能会有大佬想出新的方法？）</p><p>好了，这些大概就是random模块随机的原理，接下来，让我们看看基于特定统计分布的随机取样。</p><table><thead><tr><th align="center">函数名称</th><th align="center">统计分布类型</th></tr></thead><tbody><tr><td align="center">beta</td><td align="center">贝塔分布</td></tr><tr><td align="center">binomial</td><td align="center">二项分布</td></tr><tr><td align="center">chisquare</td><td align="center">卡方分布</td></tr><tr><td align="center">exponential</td><td align="center">指数分布</td></tr><tr><td align="center">f</td><td align="center">F分布</td></tr><tr><td align="center">gamma</td><td align="center">伽马分布</td></tr><tr><td align="center">geometric</td><td align="center">几何分布</td></tr><tr><td align="center">hypergeometric</td><td align="center">超几何分布</td></tr><tr><td align="center">lognormal</td><td align="center">对数正态分布</td></tr><tr><td align="center">normal</td><td align="center">正态分布</td></tr><tr><td align="center">poisson</td><td align="center">泊松分布</td></tr><tr><td align="center">standard_normal</td><td align="center">标准正态分布</td></tr><tr><td align="center">standard_t</td><td align="center">t分布</td></tr><tr><td align="center">rand</td><td align="center">标准均匀分布</td></tr><tr><td align="center">randint</td><td align="center">给定区间内随机抽取整数</td></tr><tr><td align="center">randn</td><td align="center">标准正态分布</td></tr></tbody></table><p>以上就是整理出来的随机抽样分布表。内容非常的多，这里篇幅有限，就简单介绍几个最常用的随机抽样。</p><h5 id="1-基于正态分布的随机抽样"><a href="#1-基于正态分布的随机抽样" class="headerlink" title="1.基于正态分布的随机抽样"></a>1.基于正态分布的随机抽样</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x_norm = npr.normal(mean,std,I)</span><br><span class="line">y_norm = npr.randn(I)</span><br><span class="line">z_norm = npr.standard_normal(I)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;运用normal函数抽样的均值：&quot;</span>,x_norm.mean())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;运用normal函数抽样的标准差：&quot;</span>,x_norm.std())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;运用randn函数抽样的均值：&quot;</span>,y_norm.mean())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;运用randn函数抽样的标准差：&quot;</span>,y_norm.std())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;运用standard_normal函数抽样的均值：&quot;</span>,z_norm.mean())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;运用standard_normal函数抽样的标准差：&quot;</span>,z_norm.std())</span><br></pre></td></tr></table></figure><p>其中，I代表随机抽样的次数、mean代表均值、std代表标准差。</p><p>经过我的尝试，我觉得运用不同函数从标准正态分布中抽取的随机数，所得到的结果不算很相似。（可能是我运气不好，算出来的结果差别都不小）</p><h5 id="2-基于卡方分布的随机抽样"><a href="#2-基于卡方分布的随机抽样" class="headerlink" title="2.基于卡方分布的随机抽样"></a>2.基于卡方分布的随机抽样</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chis = npr.chisquare(freedom,I)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;卡方分布的均值：&quot;</span>,chis.mean())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;卡方分布的标准差：&quot;</span>,chis.std())</span><br></pre></td></tr></table></figure><p>其中，I代表随机抽样的次数、freedom代表自由度。</p><h5 id="3-t分布"><a href="#3-t分布" class="headerlink" title="3.t分布"></a>3.t分布</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stan = npr.standard_t(freedom,I)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t分布的均值：&quot;</span>,stan.mean())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t分布的标准差：&quot;</span>,stan.std())</span><br></pre></td></tr></table></figure><p>其中，I代表随机抽样的次数、freedom代表自由度。</p><h3 id="7-现金流模型"><a href="#7-现金流模型" class="headerlink" title="7.现金流模型"></a>7.现金流模型</h3><p>oh，终于到了金融领域的分析模块了。</p><p>先简单介绍一下，针对金融产品的定价方式有3种方法：一是基于现金流贴现的定价方法，二是基于风险与收益的定价方法，三是基于无风险收益的无套利定价方法。其中，现金流贴现方法最为常用。</p><p>接下来，我们需要先安装numpy_financial模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy_financial <span class="keyword">as</span> npf</span><br></pre></td></tr></table></figure><h5 id="1-现金流终值"><a href="#1-现金流终值" class="headerlink" title="1.现金流终值"></a>1.现金流终值</h5><p><img src="../Python-Numpy/%E7%8E%B0%E9%87%91%E6%B5%81%E7%BB%88%E5%80%BC.png" alt="现金流终值"></p><p>现金流的终值是指一定时期内每期期末等额收付款项的复利终值之和。可用fv函数进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npf.fv(rate,nper,pmt,pv)</span><br></pre></td></tr></table></figure><p>其中，rate指投资回报率、nper指投资整体期限、pmt指投资期间发生的固定金额现金流、pv指净现金流现值。</p><h5 id="2-现金流现值"><a href="#2-现金流现值" class="headerlink" title="2.现金流现值"></a>2.现金流现值</h5><p><img src="../Python-Numpy/%E7%8E%B0%E9%87%91%E6%B5%81%E7%8E%B0%E5%80%BC.png" alt="现金流现值"></p><p>现金流现值是指一定时期内每期期末收付款项的复利现值之和。可用pv函数进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npf.pv(rate,nper,pmt,pv)</span><br></pre></td></tr></table></figure><p>其中，rate指投资回报率、nper指投资整体期限、pmt指投资期间发生的固定金额现金流、pv指净现金流现值。</p><h5 id="3-净现值"><a href="#3-净现值" class="headerlink" title="3.净现值"></a>3.净现值</h5><p>净现值（NPV）通过计算每个投资期间的成本（负现金流）和收益（正现金流）来确定。期限通常为一年，但可以按季度，半年或数月来衡量。在计算每个时期的现金流量后，每个时期的现值（PV）是通过以定期收益率（市场规定的收益率）贴现其未来价值（见公式）来实现的。</p><p><img src="../Python-Numpy/%E5%87%80%E7%8E%B0%E5%80%BC%E5%85%AC%E5%BC%8F.png" alt="净现值公式"></p><p>净现值 &#x3D; 未来现金净流量现值-原始投资额现值</p><p>运用python计算项目的净现值时，可以运用numpy_financial模块的函数npv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npf.npv(rate, values)</span><br></pre></td></tr></table></figure><p>其中，参数rate代表项目的投资回报率或者贴现率、参数values代表以数组形式输入的期初和存储期每年年末的净现金流。</p><p><strong>内含报酬率</strong>是指能够使未来现金净流量现值等于原始投资额现值的折现率。</p><p>当净现值&#x3D;0时，未来现金净流量现值&#x3D;原始投资额现值。</p><p>运用python计算项目的净现值时，可以运用numpy_financial模块的函数irr</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npf.irr(values)</span><br></pre></td></tr></table></figure><p>其中，参数values代表以数组形式输入的期初和存储期每年年末的净现金流。</p><h5 id="4-等额本息还款"><a href="#4-等额本息还款" class="headerlink" title="4.等额本息还款"></a>4.等额本息还款</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">per = np.array(nper)</span><br><span class="line">npf.pmt(rate, nper, pv)    <span class="comment">#本息还款金额</span></span><br><span class="line">npf.ppmt(rate, per, nper, pv)    <span class="comment">#本息还款本金</span></span><br><span class="line">npf.ipmt(rate, per, nper, pv)    <span class="comment">#本息还款利息</span></span><br></pre></td></tr></table></figure><p>其中，rate指按揭贷款月利率、nper代表贷款的整体期限、pv代表贷款的本金金额、fv代表期末现金流、per代表逐次还款的期限（用数组表示）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上，Numpy模块是Python在金融领域运用的必备第三方模块。在数据分析方面应用还是很广泛的。后期，我也有可能更新pandas、scipy、matplotlib等模块的金融应用。（maybe）这几个第三方库确实很好用，但是老师上课基本不讲，网络上我也没找到内容和质量好的文章，于是便写了本文。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> program </tag>
            
            <tag> finance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM</title>
      <link href="/blog/2023/08/19/VIM/"/>
      <url>/blog/2023/08/19/VIM/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vim介绍"><a href="#1-vim介绍" class="headerlink" title="1.vim介绍"></a>1.vim介绍</h2><h3 id="vim编辑器有三种模式："><a href="#vim编辑器有三种模式：" class="headerlink" title="vim编辑器有三种模式："></a>vim编辑器有三种模式：</h3><p>命令模式、编辑模式、末行模式</p><p><strong>模式间切换方法</strong>：<br>（1）命令模式下，输入<code>:</code>后，进入末行模式<br>（2）末行模式下，按<code>esc</code>慢退、按两次<code>esc</code>快退、或者删除所有命令，可以回到命令模式<br>（3）命令模式下，按下<code>i</code>、<code>a</code>等键，可以计入编辑模式<br>（4）编辑模式下，按下<code>esc</code>，可以回到命令模式</p><h3 id="vim打开文件："><a href="#vim打开文件：" class="headerlink" title="vim打开文件："></a><strong>vim打开文件</strong>：</h3><table><thead><tr><th>Vi 使用的选项</th><th>说 明</th></tr></thead><tbody><tr><td>vim filename</td><td>打开或新建一个文件，并将光标置于第一行的首部</td></tr><tr><td>vim -r filename</td><td>恢复上次 vim 打开时崩溃的文件</td></tr><tr><td>vim -R filename</td><td>把指定的文件以只读方式放入 Vim 编辑器中</td></tr><tr><td>vim + filename</td><td>打开文件，并将光标置于最后一行的首部</td></tr><tr><td>vim +n filename</td><td>打开文件，并将光标置于第 n 行的首部</td></tr><tr><td>vim +&#x2F;pattern filename</td><td>打幵文件，并将光标置于第一个与 pattern 匹配的位置</td></tr><tr><td>vim -c command filename</td><td>在对文件进行编辑前，先执行指定的命令</td></tr></tbody></table><h2 id="2-命令模式"><a href="#2-命令模式" class="headerlink" title="2.命令模式"></a>2.命令模式</h2><h3 id="1-光标移动"><a href="#1-光标移动" class="headerlink" title="1.光标移动"></a>1.光标移动</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>jkhl</td><td>基本移动，上下左右</td></tr><tr><td>gg</td><td>光标移动到文档首行</td></tr><tr><td>G</td><td>光标移动到文档尾行</td></tr><tr><td>^或_</td><td>光标移动到行首第一个非空字符</td></tr><tr><td>home键或0或者g0</td><td>光标移动到行首第一个字符</td></tr><tr><td>g_</td><td>光标移动到行尾最后一个非空字符</td></tr><tr><td>end或或者 g 或者g或者<em>g</em></td><td>光标移动到行尾最后一个字符</td></tr><tr><td>gm</td><td>光标移动到当前行中间处</td></tr><tr><td>b&#x2F;B</td><td>光标向前移动一个单词（大写忽略&#x2F;-等等特殊字符）</td></tr><tr><td>w&#x2F;W</td><td>光标向后移动一个单词（大写忽略&#x2F;-等等特殊字符）</td></tr><tr><td>e&#x2F;E</td><td>移到单词结尾（大写忽略&#x2F;-等等特殊字符）</td></tr><tr><td>ctrl+b或pageUp键</td><td>翻屏操作，向上翻</td></tr><tr><td>ctrl+f或pageDn键</td><td>翻屏操作，向下翻</td></tr><tr><td>数字+G</td><td>快速将光标移动到指定行</td></tr><tr><td>&#96;.</td><td>移动到上次编辑处</td></tr><tr><td>数字+上下方向键</td><td>以当前光标为准，向上&#x2F;下移动n行</td></tr><tr><td>数字+左右方向键</td><td>以当前光标为准，向左&#x2F;右移动n个字符</td></tr><tr><td>H</td><td>移动到屏幕顶部</td></tr><tr><td>M</td><td>移动到屏幕中间</td></tr><tr><td>L</td><td>移动到屏幕尾部</td></tr><tr><td>z+Enter键</td><td>当前行在屏幕顶部</td></tr><tr><td>z+ .</td><td>当前行在屏幕中间</td></tr><tr><td>z+ -</td><td>当前行在屏幕底部</td></tr><tr><td>shift+6</td><td>光标移动到行首</td></tr><tr><td>shift+4</td><td>光标移动到行尾</td></tr><tr><td>-</td><td>移动到上一行第一个非空字符</td></tr><tr><td>+</td><td>移动到下一行第一个非空字符</td></tr><tr><td>)</td><td>向前移动一个句子</td></tr><tr><td>(</td><td>向后移动一个句子</td></tr><tr><td>}</td><td>向前移动一个段落</td></tr><tr><td>{</td><td>向前移动一个段落</td></tr><tr><td>count l</td><td>移动到count 列</td></tr><tr><td>counth</td><td>向左移动count 字符</td></tr><tr><td>countl</td><td>向右移动count字符</td></tr><tr><td>countgo</td><td>移动到count字符</td></tr></tbody></table><h3 id="2-选中内容"><a href="#2-选中内容" class="headerlink" title="2.选中内容"></a>2.选中内容</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>v</td><td>进行字符选中</td></tr><tr><td>V 或shift+v</td><td>进行行选中</td></tr><tr><td>gv</td><td>选中上一次选择的内容</td></tr><tr><td>o</td><td>光标移动到选中内容另一处结尾</td></tr><tr><td>O</td><td>光标移动到选中内容另一处角落</td></tr><tr><td>ctr + V</td><td>进行块选中</td></tr></tbody></table><h3 id="3-复制（配合粘贴命令p使用）"><a href="#3-复制（配合粘贴命令p使用）" class="headerlink" title="3.复制（配合粘贴命令p使用）"></a>3.复制（配合粘贴命令p使用）</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>y</td><td>复制已选中的文本到剪贴板</td></tr><tr><td>n+yy</td><td>复制光标所在行，此命令前可以加数字 n，可复制多行</td></tr><tr><td>yw</td><td>复制光标位置的单词</td></tr><tr><td>ctrl+v + 方向键+yy</td><td>ctrl+v，并按方向键选中区块，按下yy复制</td></tr></tbody></table><h3 id="4-剪切"><a href="#4-剪切" class="headerlink" title="4.剪切"></a>4.剪切</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>dd</td><td>剪切<strong>光标所在行</strong></td></tr><tr><td>数字+dd</td><td>以光标所在行为准（包含当前行），<strong>向下剪切指定行数</strong></td></tr><tr><td>D</td><td>剪切光标所在行</td></tr></tbody></table><h3 id="5-粘贴"><a href="#5-粘贴" class="headerlink" title="5.粘贴"></a>5.粘贴</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>p</td><td>将剪贴板中的内容<strong>粘贴到光标后</strong></td></tr><tr><td>P（大写）</td><td>将剪贴板中的内容<strong>粘贴到光标前</strong></td></tr></tbody></table><h3 id="6-删除"><a href="#6-删除" class="headerlink" title="6.删除"></a>6.删除</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>x</td><td>删除<strong>光标所在位置</strong>的字符</td></tr><tr><td>X(大写)</td><td>删除<strong>光标前</strong>一个字符</td></tr><tr><td>dd</td><td>删除<strong>光标所在行</strong>，删除之后，<strong>下一行上移</strong></td></tr><tr><td>D</td><td>删除<strong>光标位置到行尾</strong>的内容，删除之后，<strong>下一行不上移</strong></td></tr><tr><td>ndd</td><td>删除当前行（包括此行）后 n 行文本</td></tr><tr><td>dw</td><td>移动光标到单词的开头以删除该单词</td></tr><tr><td>dG</td><td>删除光标所在行一直到文件末尾的所有内容</td></tr><tr><td>:a1,a2d</td><td>删除从 a1 行到 a2 行的文本内容</td></tr></tbody></table><h3 id="7-撤销-恢复"><a href="#7-撤销-恢复" class="headerlink" title="7.撤销&#x2F;恢复"></a>7.撤销&#x2F;恢复</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>u</td><td>撤销</td></tr><tr><td>ctrl+r</td><td>恢复</td></tr><tr><td>U(大写)</td><td>撤销所有编辑</td></tr></tbody></table><h3 id="8-字符转换"><a href="#8-字符转换" class="headerlink" title="8.字符转换"></a>8.字符转换</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>~</td><td>转换大小写</td></tr><tr><td>u</td><td>变成小写</td></tr><tr><td>U</td><td>变成大写</td></tr></tbody></table><h3 id="9-编辑命令的快捷键"><a href="#9-编辑命令的快捷键" class="headerlink" title="9.编辑命令的快捷键"></a>9.编辑命令的快捷键</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>↑或ctr + p</td><td>上一条命令</td></tr><tr><td>↓或ctr + n</td><td>下一条命令</td></tr><tr><td>ctr + b</td><td>移动到命令行开头</td></tr><tr><td>ctr + e</td><td>移动到命令行结尾</td></tr><tr><td>ctr + ←</td><td>向左一个单词</td></tr><tr><td>ctr + →</td><td>向右一个单词</td></tr></tbody></table><h2 id="3-末行模式-xxx命令"><a href="#3-末行模式-xxx命令" class="headerlink" title="3.末行模式(: xxx命令)"></a>3.末行模式(: xxx命令)</h2><h3 id="1-保存-退出文件操作"><a href="#1-保存-退出文件操作" class="headerlink" title="1.保存&#x2F;退出文件操作"></a>1.保存&#x2F;退出文件操作</h3><table><thead><tr><th>命令</th><th>功能描述</th></tr></thead><tbody><tr><td>:wq</td><td>保存并退出 Vim 编辑器</td></tr><tr><td>:wq!</td><td>保存并强制退出 Vim 编辑器</td></tr><tr><td>:q</td><td>不保存就退出 Vim 编辑器</td></tr><tr><td>:q!</td><td>不保存，且强制退出 Vim 编辑器</td></tr><tr><td>:w</td><td>保存但是不退出 Vim 编辑器</td></tr><tr><td>:w!</td><td>强制保存文本</td></tr><tr><td>:w filename</td><td>另存到 filename 文件</td></tr><tr><td>x！</td><td>保存文本，并退出 Vim 编辑器</td></tr><tr><td>ZZ</td><td>直接退出 Vim 编辑器</td></tr></tbody></table><h3 id="2-查找：“-关键词”"><a href="#2-查找：“-关键词”" class="headerlink" title="2.查找：“&#x2F;关键词”"></a>2.查找：“&#x2F;关键词”</h3><p>在查找结果中，用<code>N</code>、<code>n</code>可以切换上下结果；输入<code>nohl</code>，可以取消高亮</p><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>&#x2F;abc</td><td>从光标所在位置<strong>向前查找</strong>字符串 abc</td></tr><tr><td>&#x2F;^abc</td><td>查找以 abc 为行首的行</td></tr><tr><td>&#x2F;abc$</td><td>查找以 abc 为行尾的行</td></tr><tr><td>?abc</td><td>从光标所在位置<strong>向后查找</strong>字符串 abc</td></tr><tr><td>n或；</td><td>向同一方向重复上次的查找指令</td></tr><tr><td>N或,</td><td>向相反方向重复上次的查找指定</td></tr></tbody></table><h3 id="3-替换"><a href="#3-替换" class="headerlink" title="3.替换"></a>3.替换</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>r</td><td>替换光标所在位置的字符</td></tr><tr><td>R</td><td>从光标所在位置开始替换字符，其输入内容会覆盖掉后面等长的文本内容，按“Esc”可以结束</td></tr><tr><td><code>:s/a1/a2</code></td><td>替换<strong>当前光标所在行第一处</strong>符合条件的内容</td></tr><tr><td><code>:s/a1/a2/g</code></td><td>替换<strong>当前光标所在行</strong>所有的 a1 都用 a2 替换</td></tr><tr><td><code>:%s/a1/a2</code></td><td>替换<strong>所有行</strong>中，<strong>第一处</strong>符合条件的内容</td></tr><tr><td><code>:%s/a1/a2/g</code></td><td>替换<strong>所有行</strong>中，<strong>所有</strong>符合条件的内容</td></tr><tr><td><code>:n1,n2 s/a1/a2</code></td><td>将文件中 <strong>n1 到 n2 行</strong>中<strong>第一处</strong> a1 都用 a2 替换</td></tr><tr><td><code>:n1,n2 s/a1/a2/g</code></td><td>将文件中 <strong>n1 到 n2 行</strong>中<strong>所有</strong> a1 都用 a2 替换</td></tr></tbody></table><h3 id="4-行号显示：“-set-nu”"><a href="#4-行号显示：“-set-nu”" class="headerlink" title="4.行号显示：“: set nu”;"></a>4.行号显示：“: set nu”;</h3><ol><li>行号显示<code>:set nu</code></li><li>取消行号显示：<code>:set nonu</code></li></ol><h3 id="5-文件切换"><a href="#5-文件切换" class="headerlink" title="5.文件切换"></a>5.文件切换</h3><p>使用vim打开多个文件后，在末行模式下可以进行切换。</p><ol><li>查看当前已经打开的所有文件：<code>:files</code>(%a表示激活状态，#表示上一个打开的文件)</li><li>切换到指定文件：<code>:open 文件名</code></li><li>切换到上一个文(back previous)：<code>:bp</code></li><li>切换到下一个文件(back next)：<code>:bn</code></li></ol><h2 id="4-编辑模式"><a href="#4-编辑模式" class="headerlink" title="4.编辑模式"></a>4.编辑模式</h2><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>i</td><td>在当前<strong>光标所在位置插入</strong>，光标后的文本相应向右移动</td></tr><tr><td>I</td><td>在<strong>光标所在行的行首插入</strong>，行首是该行的第一个非空白字符，相当于光标移动到行首执行 i 命令</td></tr><tr><td>o</td><td>在<strong>光标所在行的下插入</strong>新的一行。光标停在空行首，等待输入文本</td></tr><tr><td>O（大写）</td><td>在<strong>光标所在行的上插入</strong>新的一行。光标停在空行的行首，等待输入文本</td></tr><tr><td>a</td><td>在当前<strong>光标所在位置之后插入</strong></td></tr><tr><td>A</td><td>在<strong>光标所在行的行尾插入</strong>，相当于光标移动到行尾再执行 a 命令</td></tr><tr><td>esc键</td><td>退出编辑模式</td></tr></tbody></table><h2 id="5-扩展"><a href="#5-扩展" class="headerlink" title="5.扩展"></a>5.扩展</h2><p>1.代码颜色显示：“：syntax on&#x2F;off”</p><p>2.<strong>vim内置计算器</strong>：<br>a.进入编辑模式<br>b.按<code>“ctrl+r</code>，光标变成引号，，输入<code>=</code>，光标转到最后一行<br>c.输入需要计算的内容，按下enter后，计算结果回替代上一步中的引号，光标恢复</p><p>3.<strong>vim的配置</strong><br>a.文件打开时，末行模式下输入的配置为临时配置，关闭文件后配置无效<br>b.修改个人配置文件，可以永久保存个人配置（~&#x2F;.vimrc，如果没有可以自行创建）<br>c.修改全局配置文件，对每个用户生效（vim自带，&#x2F;etc&#x2F;vimrc）</p><p>注：个人配置文件优先级更高，当个人配置和全局配置发生冲突时，系统以当前用户的个人配置文件为准</p><p>4.<strong>异常退出</strong></p><p>在编辑文件后，未正常保存退出时，会产生异常退出交换文件（.原文件名.swp）<br>将交换文件删除后，再次打开文件时，无提示：“#rm -f .原文件名.swp”</p><p>5.<strong>别名机制</strong>：自定义指令<br>Linux中，存在一个别名映射文件： ~&#x2F;.bashrc<br>修改文件内容，可以自定义指令，重新登录账号后生效</p><p>6.<strong>文件快捷方式</strong><br>对于深层文件，可以创建文件快捷方式，便于后续操作：#ln -s 源路径 新路径</p><p>7.<strong>退出方式</strong><br>（1）在vim中退出文件编辑模式，可以使用<code>:q</code>或者<code>:wq</code><br>（2）建议使用<code>:x</code>：使用效果等同于<code>wq</code>，如果文件有改动则先保存后退出；但是如果文件没有做修改，会直接退出，不会修改文件更新时间，避免用户混淆文件的修改时间</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> program </tag>
            
            <tag> software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Composition and classification of computers</title>
      <link href="/blog/2023/08/15/Composition-and-classification-of-computers/"/>
      <url>/blog/2023/08/15/Composition-and-classification-of-computers/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机的组成和分类"><a href="#一、计算机的组成和分类" class="headerlink" title="一、计算机的组成和分类"></a>一、计算机的组成和分类</h2><h4 id="计算机的分类-（Wiki百科）"><a href="#计算机的分类-（Wiki百科）" class="headerlink" title="计算机的分类 （Wiki百科）"></a>计算机的分类 （Wiki百科）</h4><p><img src="../Composition-and-classification-of-computers/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%86%E7%B1%BB.png" alt="计算机分类"></p><h4 id="了解一下台式计算机的构成"><a href="#了解一下台式计算机的构成" class="headerlink" title="了解一下台式计算机的构成"></a>了解一下台式计算机的构成</h4><p>机箱、主板、中央处理器（CPU）、主内存、电源供应器（电源）、显卡、显示器、键盘、鼠标、外部存储媒体（硬盘）等</p><p>知道了上述构成，我们接下来就是逐一讲解。</p><h2 id="二、机箱的用途"><a href="#二、机箱的用途" class="headerlink" title="二、机箱的用途"></a>二、机箱的用途</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="../Composition-and-classification-of-computers/%E6%9C%BA%E7%AE%B1%E6%A6%82%E8%BF%B0.png" alt="机箱概述"></p><h4 id="总结（选购机箱需要考虑的点）"><a href="#总结（选购机箱需要考虑的点）" class="headerlink" title="总结（选购机箱需要考虑的点）"></a>总结（选购机箱需要考虑的点）</h4><p>散热性能、外观偏好、体积大小</p><h2 id="三、主板的用途"><a href="#三、主板的用途" class="headerlink" title="三、主板的用途"></a>三、主板的用途</h2><p>关于主板废话不多说，看图。</p><p><img src="../Composition-and-classification-of-computers/%E4%B8%BB%E6%9D%BF.png" alt="主板"></p><p>注：主板的大小决定了机箱的大小</p><p>我们应该如何去挑选主板？</p><p>查看主板的一个规格和包装，<strong>关于主板主要是看提供的接口。</strong></p><p><img src="../Composition-and-classification-of-computers/%E4%B8%BB%E6%9D%BF%E8%A7%84%E6%A0%BC.png" alt="主板规格"></p><p><strong>因为同一个型号的主板产品，会因为接口的不同价格上会差很多</strong></p><h2 id="四、CPU处理器的用途"><a href="#四、CPU处理器的用途" class="headerlink" title="四、CPU处理器的用途"></a>四、CPU处理器的用途</h2><p>如图就是CPU</p><p><img src="../Composition-and-classification-of-computers/CPU.png" alt="CPU"></p><p>如何判断一个CPU的性能</p><p><strong>简单粗暴：贵的一定是好的。</strong></p><p>个人主机当中CPU的两大厂商</p><p>1.AMD ：更新周期快，短时间内会更新性能，更新周期&lt; 12 个月（ <strong>AMD YES</strong> ）<br>2.Intel（英特尔）：挤牙膏，更新周期为 18个月（ <strong>牙膏厂</strong>）</p><h3 id="4-1、Intel代表的处理器型号"><a href="#4-1、Intel代表的处理器型号" class="headerlink" title="4.1、Intel代表的处理器型号"></a>4.1、Intel代表的处理器型号</h3><p>1.奔腾（Pentium）：同样属于比较低端的产品，主要是用于Word文档办公。<br>2.赛扬（Celeron）：比较低端的产品，主要是上网使用。<br>3.酷睿（Core）：相比前两者，性能要求会高一点。</p><p><strong>注：重点学习酷睿Core</strong></p><h4 id="酷睿Core"><a href="#酷睿Core" class="headerlink" title="酷睿Core"></a>酷睿Core</h4><p>关于酷睿，同样的分为四个等级，i3、i5、i7、i9这四个，<strong>在同年代的产品当中性能遵循 i3&lt; i5 &lt; i7 &lt; i9</strong></p><p>​i3 : 文档、客户等处理要求快速，办公不卡（能流畅打CF、LOL等）<br>​i5 ：处理简单的视频，处理简单的程序，主流游戏<br>​i7 ：发烧，大型游戏，大型工程，专业用户，等等<br>​i9 ：强无敌</p><p>我们拿到一个CPU型号，如何判断他的性能呢 ?</p><p>如：<strong>英特尔（Intel）12代 i5-12400F CPU处理器 6核12线程 单核睿频至高4.4Ghz 10400F迭代升级款</strong></p><p>i5-12400F ：表示的是英特尔 酷睿core i5等级，12是代号，表示的是第12代的意思，体现CPU的一个发布时间，接下来的4就是性能代号，这个数字范围在0~9当中，这个数字越大性能越强。末尾的字母代表消费人群也是产品线后缀如：G、Y主打续航，U稍微有点续航，也稍微含点性能、F表示没有核显、H是焊接不可拆卸、K就是支持超频的，更好的性能、X是至尊，强无敌。</p><p>​注：如需比较I5 12600 vs i7 7700 ，这种等级和代号都不一致比较的话，则需要去网上搜索了。</p><h3 id="4-2、AMD代表的处理器型号"><a href="#4-2、AMD代表的处理器型号" class="headerlink" title="4.2、AMD代表的处理器型号"></a>4.2、AMD代表的处理器型号</h3><p>锐龙（ryzen）：其就类似英特尔的酷睿系列</p><p>速龙（athlon）：比较低端的产品，类似奔腾、赛扬</p><p>线程撕裂者（Threadripper）：强无敌</p><h4 id="锐龙Ryzen"><a href="#锐龙Ryzen" class="headerlink" title="锐龙Ryzen"></a>锐龙Ryzen</h4><p>​Ryzen3（r3）: 对标英特尔 i3<br>​Ryzen5（r5）：对标英特尔 i5<br>​Ryzen7（r7）: 对标英特尔 i7<br>​Ryzen7（r9）: 对标英特尔 i9</p><h4 id="关于AMD的型号的相关解释"><a href="#关于AMD的型号的相关解释" class="headerlink" title="关于AMD的型号的相关解释"></a>关于AMD的型号的相关解释</h4><p><img src="../Composition-and-classification-of-computers/AMD.png" alt="AMD"></p><p>如：<strong>AMD 锐龙5 5600G处理器(r5)7nm 搭载Radeon Graphic 6核12线程 3.9GHz 65W AM4接口</strong></p><p>第一部分是锐龙5（r5），就是类似于I5 ，接下来就是3 表示3000系列、还有5000系列等，类似于intle的代数，在接下来的6就表示性能，剩余部分与英特尔几乎一致。</p><h3 id="4-3、CPU核心、线程、缓存"><a href="#4-3、CPU核心、线程、缓存" class="headerlink" title="4.3、CPU核心、线程、缓存"></a>4.3、CPU核心、线程、缓存</h3><h4 id="什么是核心和线程"><a href="#什么是核心和线程" class="headerlink" title="什么是核心和线程 ?"></a>什么是核心和线程 ?</h4><p>我们通过一个例子：八核十六线程来解释说明：</p><p>核：八核是指CPU的核心有八个，核心（Core）又称为内核，是CPU最重要的组成部分。</p><p>线程：CPU调度的最小单位，同一时间执行的最小任务单位，线程的执行需要CPU的调度。</p><h4 id="线程和核心的关系："><a href="#线程和核心的关系：" class="headerlink" title="线程和核心的关系："></a>线程和核心的关系：</h4><p>八核十六线程是指使用了<strong>超线程技术</strong>，把一个物理核心，模拟成两个逻辑核心，理论上要像十六颗物理核心一样在同一时间执行十六个线程，而并非是我们理解的八核只能并发执行8线程，这里的八核指的是物理核心，而线程调度需要的是逻辑核心。</p><h4 id="主频、睿频"><a href="#主频、睿频" class="headerlink" title="主频、睿频"></a>主频、睿频</h4><p>​主频：CPU一个核心的基本运算能力。<br>​睿频：指当启动一个运行程序后，处理器会自动加速到合适的频率，而原来的运行速度会提升 10%~20% 以保证程序流畅运行的一种技术。就是工作起来后能在主频的运算能力上提高一些。</p><h4 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h4><p>缓存嘛，当然是越高越好了呀，可以类比Redis哈哈哈哈 。</p><h3 id="4-4、查看电脑的CPU信息"><a href="#4-4、查看电脑的CPU信息" class="headerlink" title="4.4、查看电脑的CPU信息"></a>4.4、查看电脑的CPU信息</h3><p>这里以Win10操作系统为例</p><p>​方式一：右键开始菜单—设备管理器<br>​方式二：此电脑右键—属性<br>​方式三：下载CPU-Z</p><p><img src="../Composition-and-classification-of-computers/CPU-Z-one.png" alt="CPU-Z-one"></p><p>对上图做一些解释说明：</p><p>​TDP：功耗<br>​规格中 @2.20GHz 是主频<br>Win10通过ctrl + shift + ESC 唤醒任务管理器，可以得到下图</p><p><img src="../Composition-and-classification-of-computers/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8.png" alt="任务管理器"></p><p><strong>我们发现电脑的主频是2.20GHz ，当前处于睿频状态2.28GHz</strong></p><h2 id="五、内存和内存条的用途"><a href="#五、内存和内存条的用途" class="headerlink" title="五、内存和内存条的用途"></a>五、内存和内存条的用途</h2><p>内存就是我们计组中的RAM，内存越大，也就是同时运行应用的数量越多。</p><p>例：<strong>金士顿 (Kingston) FURY 16GB(8G×2)套装 DDR4 3200 台式机内存条</strong></p><p>DDR4：指的就是内存条的代号，其分为DDR2、DDR3、DDR4 、DDR5等</p><p>2000：指的是内存的频率，<strong>首先肯定的是越高越好，但同样对主板的要求越高，选购的时候判断一下主板是否支持</strong></p><p>DDR2、DDR3、DDR4 的区别：</p><p><img src="../Composition-and-classification-of-computers/DDR%E5%8C%BA%E5%88%AB.png" alt="DDR区别"></p><p>放呆槽靠右：DDR4</p><p>放呆槽靠左：DDR3</p><p>放呆槽中间：DDR1，DDR2</p><h3 id="5-1、如何查看自己电脑的内存和主板信息"><a href="#5-1、如何查看自己电脑的内存和主板信息" class="headerlink" title="5.1、如何查看自己电脑的内存和主板信息"></a>5.1、如何查看自己电脑的内存和主板信息</h3><p>关于内存和主板的信息，同样可以使用CPU-Z进行查询</p><h4 id="查看主板信息"><a href="#查看主板信息" class="headerlink" title="查看主板信息"></a>查看主板信息</h4><p><img src="../Composition-and-classification-of-computers/CPU-Z-TWO.png" alt="CPU-Z-TWO"></p><h4 id="查看内存信息"><a href="#查看内存信息" class="headerlink" title="查看内存信息"></a>查看内存信息</h4><p><img src="../Composition-and-classification-of-computers/CPU-Z-three.png" alt="CPU-Z-three"></p><p><strong>内存频率乘以2的结果是就是我们的购买内存条需要购买的频率</strong></p><h2 id="六、电源的用途"><a href="#六、电源的用途" class="headerlink" title="六、电源的用途"></a>六、电源的用途</h2><p>什么是电源？</p><p><img src="../Composition-and-classification-of-computers/%E7%94%B5%E6%BA%90.png" alt="电源"></p><p>​笔记本的电源就可以看作充电器，哈哈哈！</p><h4 id="台式机的电源（重点）"><a href="#台式机的电源（重点）" class="headerlink" title="台式机的电源（重点）"></a>台式机的电源（重点）</h4><p>电源的选择要根据自己的显卡和CPU等其他配置的功率去判断。<strong>用以避免供电不足的问题</strong></p><p><img src="../Composition-and-classification-of-computers/%E6%90%9C%E7%B4%A2.png" alt="搜索"></p><p>实在不行可以直接这么搜索，hhhhh。 <strong>关于电源的选择需要具体的问题具体分析</strong></p><h2 id="七、硬盘的用途"><a href="#七、硬盘的用途" class="headerlink" title="七、硬盘的用途"></a>七、硬盘的用途</h2><p>硬盘也就是我们计组当中的ROM，存储内存</p><p><img src="../Composition-and-classification-of-computers/%E7%A1%AC%E7%9B%98.png" alt="硬盘"></p><p>上面这一大串，就是官话，人话就是：<strong>硬盘分两类：机械硬盘、固态硬盘</strong>，长得就是上图 的样子</p><h3 id="7-1、机械硬盘"><a href="#7-1、机械硬盘" class="headerlink" title="7.1、机械硬盘"></a>7.1、机械硬盘</h3><h4 id="对机械硬盘做一些介绍"><a href="#对机械硬盘做一些介绍" class="headerlink" title="对机械硬盘做一些介绍"></a>对机械硬盘做一些介绍</h4><p>例： <strong>希捷(Seagate)4TB 256MB 5400RPM 台式机机械硬盘 SATA接口 希捷酷鱼BarraCuda系列(ST4000DM004)</strong></p><p>解释：4TB就是容量、256M就是硬盘的缓存（同样是越大越好）、5400RPM就是转速（越大越好），SATA接口如图所示</p><p><img src="../Composition-and-classification-of-computers/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98.png" alt="机械硬盘"></p><h3 id="7-2、固态硬盘（推荐）"><a href="#7-2、固态硬盘（推荐）" class="headerlink" title="7.2、固态硬盘（推荐）"></a>7.2、固态硬盘（推荐）</h3><h4 id="对固态硬盘（SSD）做一些介绍"><a href="#对固态硬盘（SSD）做一些介绍" class="headerlink" title="对固态硬盘（SSD）做一些介绍"></a>对固态硬盘（SSD）做一些介绍</h4><p>固态硬盘会提供如下的接口</p><p>​SATA接口 : 提供SATA接口的目的是为了让只有SATA接口的老电脑也能更换固态的一个普适性。<br>​MiniSATA接口 : 为以前的笔记本提供的接口，基本已经停产。<br>​PCI-E接口：原本是为显卡提供的接口，但是之前为了速度存在这种固态，基本已经停产，速度已达到&lt;&#x3D; 6000MB&#x2F;s。<br>​U.2接口：基本上停产。<br>​M.2接口（主流）：支持NVME协议，速度已达到&lt;&#x3D; 7000MB&#x2F;s，如图所示</p><p><img src="../Composition-and-classification-of-computers/%E6%8F%92%E6%A7%BD.png" alt="插槽"></p><p>解释一下如图：1 x M.2 2242-22110(PCle 4.0 x4 from CPU) 这句话</p><p>​主板上的一个M2接口支持pcie x4通道（通道就是连接CPU 走的路），因此这个M2接口支持满足NVME协议PCle 4.0的固态。<br>​主板上的PCIE插槽支持pcie通道，因此可以链接显卡</p><h3 id="7-3-、区别"><a href="#7-3-、区别" class="headerlink" title="7.3 、区别"></a>7.3 、区别</h3><h4 id="固态硬盘和机械硬盘的区别"><a href="#固态硬盘和机械硬盘的区别" class="headerlink" title="固态硬盘和机械硬盘的区别"></a>固态硬盘和机械硬盘的区别</h4><table><thead><tr><th align="center">机械硬盘</th><th align="center">固态硬盘</th></tr></thead><tbody><tr><td align="center">读写速度 &lt;&#x3D; 100MB&#x2F;s</td><td align="center">需要根据接口判断速度SATA一般是&lt;&#x3D; 550MB&#x2F;s</td></tr><tr><td align="center">寿命低</td><td align="center">寿命长</td></tr><tr><td align="center">价格低</td><td align="center">价格较高</td></tr></tbody></table><h2 id="八、显卡的用途"><a href="#八、显卡的用途" class="headerlink" title="八、显卡的用途"></a>八、显卡的用途</h2><p> 如果说CPU是电脑的大脑，那么显卡就是展示画面的一个画家。CPU首先要把需要显示的内容设计出来，然后再通过显卡一张一张图片显示出来。一张一张的图片就是大家经常所说的帧数。想要让这些图片具有连贯作用，就需要显卡发挥更好的作用。性能一般的显卡在连贯图片的时候可能会比较卡顿，整体感觉不是特别流畅。</p><h4 id="显卡当中的两大厂商"><a href="#显卡当中的两大厂商" class="headerlink" title="显卡当中的两大厂商"></a>显卡当中的两大厂商</h4><p>​NVIDIA（英伟达）：生产的显卡称为N卡（同级别，游戏方面优化稍好一些）<br>​AMD ：生产的显卡称为A卡（同级别，图形渲染和画面效果稍好一些）</p><h3 id="8-1、NVIDIA（英伟达）的显卡"><a href="#8-1、NVIDIA（英伟达）的显卡" class="headerlink" title="8.1、NVIDIA（英伟达）的显卡"></a>8.1、NVIDIA（英伟达）的显卡</h3><h4 id="相关产品代号"><a href="#相关产品代号" class="headerlink" title="相关产品代号"></a>相关产品代号</h4><p>​GeForce 900：例如 GTX960、GTX960TI、GTX980</p><p>​GeForce10：例如 GTX1050、GTX1060、1050TI、1080TI</p><p>​GeForce16：例如GTX1650、GTX1660</p><p>​GeForce RTX 20系列：RTX2060、RTX2070、RTX2070 Super、RTX2080 Super、RTX2080TI</p><p>​GeForce RTX 30系列：RTX3060、RTX3050TI、RTX3090TI</p><p>​…</p><h4 id="GTX-和-RTX-的区别渲染图"><a href="#GTX-和-RTX-的区别渲染图" class="headerlink" title="GTX 和 RTX 的区别渲染图"></a>GTX 和 RTX 的区别渲染图</h4><p><img src="../Composition-and-classification-of-computers/%E5%8C%BA%E5%88%AB%E6%B8%B2%E6%9F%93.png" alt="区别渲染"></p><p>分析显卡的一个参数</p><p><strong>七彩虹（Colorful）火神iGame GeForce RTX 3090 Vulcan OC 24G 1695-1785Mhz 赛博朋克2077游戏光追电脑显卡</strong></p><p>RTX3090 上面已经说过了，24G表示的是显存（同样是越大越好）。</p><h3 id="8-1、AMD的显卡"><a href="#8-1、AMD的显卡" class="headerlink" title="8.1、AMD的显卡"></a>8.1、AMD的显卡</h3><h4 id="A卡的产品系列代号（只介绍当前还可正常使用的）"><a href="#A卡的产品系列代号（只介绍当前还可正常使用的）" class="headerlink" title="A卡的产品系列代号（只介绍当前还可正常使用的）"></a>A卡的产品系列代号（只介绍当前还可正常使用的）</h4><p>​R200系列：例如 R9 295 X2（旗舰）、R9 290X、R9 280、R7 265<br>​R300系列：例如 R9 390、R9 380X、R7 360<br>​RX 400系列：例如 RX 460、RX 470、RX 480<br>​RX 500系列：例如 RX 550、RX 560、RX 570、RX 580、RX 590<br>​RX Vega系列：例如 RX Vega 56、RX Vega 64、RX Vega 64水冷<br>​RX 5000系列：例如 RX 5500 XT、RX 5600、RX 5600 XT、RX 5700、RX 5700 XT<br>​RX 6000系列：例如 RX 6400、RX 6500 XT、RX 6600、RX 6600 XT、RX 6700 XT、RX 6800、RX 6900 XT</p><h4 id="A卡的产品系列代号讲解"><a href="#A卡的产品系列代号讲解" class="headerlink" title="A卡的产品系列代号讲解"></a>A卡的产品系列代号讲解</h4><p>1.先看前缀，这几年AMD的前缀都是RX开头，如RX580、RX5700等，<br>2.前缀后面一第一个数字和英伟达一样表示第几代, RX580就表示第5代，这个数字越大越好。值得一提的是在RX400系与RX500系之后并不是600系，而是RX Vega系列，比如RXVega56和RX Vega64，这是为了阻击英伟达GTX1080临时起的系列。还有一个50周年纪念版RX5700、RX5700XT，其对标的是英伟达的RTX2060&#x2F;2070。再往上还有顶级的Radeon VIl。<br>3.代数后面的数字表示性能等级，RX580性能高于RX570，RX570性能高于RX550，这个数据也是越大越好。<br>4.最后看后缀，<strong>X2表示双芯片</strong>，这个是AMD同代产品里面最好的，比如R9 295 X2,虽然是上一代的旗舰但性能比RX590还要强。<strong>X表示完整核心</strong>，GE BOOST，XT PRO表示加强版，<strong>D表示核心阉割</strong>。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>A卡的优势在于性能比更高，在同价位上性能是强于N卡的，比如同级别的GTX1660和RX590，两者性能旗鼓相当，但是RX590价格要便宜200多。<br>缺点就是功耗略高，用户没有N卡多，对游戏厂商关系没有N卡友好，驱动也没有N卡稳定。我推荐大家在选购中端和入门机型的时候A卡N卡都可以用，区别不大的，但是高端机型的话还是选英伟达吧，没办法，谁让英伟达和游戏厂商关系好还有光追呢，当然了你得不差钱。</p><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><h4 id="一些要说的话"><a href="#一些要说的话" class="headerlink" title="一些要说的话"></a>一些要说的话</h4><p>到这里，对于机箱、主板、CPU、内存、硬盘、电源、显卡的学习就结束了，注意这篇文章并不是教你哪些百度上的哪些一连串的知识，而是让你看完能够切实的知道什么样的硬件是好的，型号怎么看，怎么选，最后自己再去补充一些知识达到能够自己选配件配置电脑的能力。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Love Brain of Technical Man: Application Strategies</title>
      <link href="/blog/2023/08/15/The-Love-Brain-of-Technical-Man-Application-Strategies/"/>
      <url>/blog/2023/08/15/The-Love-Brain-of-Technical-Man-Application-Strategies/</url>
      
        <content type="html"><![CDATA[<p>在现代社会，技术人扮演着越来越重要的角色。然而，对他们的一般印象往往局限于专业领域，这就是为什么TA们恋爱机会少的一个重要原因。认识到这些还不够，往常情况，他们会说自己不具备社交和结识异性的能力，甚至于认为自己的理性与逻辑是无法讨得异性喜爱的。这一错误观点我们在此打破，技术人经常被视为冷静、逻辑和分析型的，但这些特点如何转化为恋爱中的优势是一直被忽视的话题。</p><p>（1）逻辑性强</p><p>案例 - 李明与小芳：</p><p>李明，一名擅长数据处理和算法分析的软件工程师，与小芳，一位热爱表现艺术并专注于情感表达的艺术专业学者，两人有着截然不同的专业背景。然而，当他们面临决定是否搬到一起居住时，由于他们的职业背景、价值观和生活方式的差异，两人产生了分歧。我想这一点很多情侣都会遇到，而且是无法避免的问题。</p><p>李明利用了他所学的决策树和SWOT分析技术，来评估和分析搬到一起居住的决策（听起来很夸张是吧）。他列出了共同生活的各种可能性、风险和收益，然后与小芳共同讨论。经过一系列的逻辑分析，小芳开始认识到李明所提供的解决方案是在为双方的未来考虑。她感受到了强烈的安全感，而李明也逐渐学会了尊重和理解小芳的情感需求。这一基于逻辑的决策方式确保了双方的需求都得到了充分的考虑，促进了他们之间的和谐与互信。我们来看一下他们一些常见问题的经过：</p><p>  •   房屋地理位置：</p><p>小芳倾向于住在市中心，她的艺术工作室、展览馆和艺术家交流中心都在那里。对她来说，市中心不仅仅是一个工作的地方，更是她灵感的来源。每次走在繁华的街道上，观察行人的表情和建筑的轮廓，都能给她带来无尽的创作灵感。</p><p>而李明的需求则截然不同。他在一家位于市郊的技术公司工作，那里的工作节奏快、竞争激烈。每天，他都需要高度集中精力，确保代码的效率和质量。对他来说，减少通勤时间意味着更多的休息和工作时间。</p><p>面对这一矛盾，李明决定采用更为系统和专业的方式来分析这个问题。他选择了地理信息系统 (GIS) 和多准则决策分析 (MCDA) 这两种工具。</p><p>A.地理信息系统 (GIS)：李明首先收集了市中心到他工作地点的所有可能的交通路线数据，包括公交、地铁和自驾的时间成本。他还考虑了小芳常去的艺术场所，标注了她每周的行程。</p><p>B.多准则决策分析 (MCDA)：考虑到住房选择不仅仅是通勤问题，李明列出了其他重要的决策标准，如租金、生活成本、周边环境、安全性等。他为每个标准赋予了权重，并将这些数据输入MCDA模型。</p><p>最终的分析结果显示，一个位于市中心与市郊中间地带的社区最能满足他们双方的需求。这个地点不仅有便捷的交通网络，还拥有小芳喜欢的艺术氛围，并且租金和生活成本在双方的预算范围内。李明详细地向小芳展示了他的分析过程和结论。面对如此深入且专业的分析，小芳不禁为李明的逻辑性和为他们的未来生活所付出的努力而感动。经过讨论，他们共同决定选择这个社区作为他们的新家，虽然一般人也可以收集信息，但无法做得如此专业与效率，很有可能还没下决定时候你对象就要跟你分手了，大多数人因为信息不足外，还没有好的决定。</p><p>  •   居住费用：</p><p>对于李明来说，作为一名初入职场的软件工程师，他非常重视资金的合理使用。他倾向于选择经济型住宅，认为这样可以为未来的不确定性留下更多的安全余地。另一方面，小芳，作为一个充满激情的艺术家，对于生活环境有着特别的要求。她觉得高档住宅或具有文艺氛围的地方更能激发她的创作灵感，同时也能更好地展现她的生活态度。</p><p>为了对这个问题进行全面的考虑，李明决定进行SWOT分析，以期系统地评估两种住房类型的优势、劣势、机会和威胁。</p><p>A.经济型住宅：</p><p>优势：费用低廉，有更多的资金流动性；</p><p>劣势：可能的生活设施简单，社区环境可能并不理想；</p><p>机会：节省的资金可以用于投资或支持其他重要的生活项目；</p><p>威胁：随着时间的推移，可能会对升级生活环境产生强烈的需求。</p><p>B.高档住宅：</p><p>优势：更好的生活质量，环境和设施更加完善，可能更加接近市中心和小芳的工作场所；</p><p>劣势：费用较高，可能导致财务压力增大；</p><p>机会：在优越的环境中生活和工作，有助于提高工作和创作的效率；</p><p>威胁：如果遭遇经济下滑，高额的住房开销可能成为负担。</p><p>在深入分析后，李明向小芳提出了一个妥协的建议：选择一个经济型住宅，但在一个具有浓厚艺术氛围的社区。这样，他们不仅可以节省资金，还可以确保小芳得到艺术创作的灵感。更重要的是，李明提议用节省下来的资金为小芳的艺术项目提供资金支持。小芳深受感动，她看到了李明对她事业的支持，同时也意识到为共同的未来做出妥协的重要性。经过充分的讨论，两人最终决定选择李明提出的方案。他们二人在中间的配合与协商过程才是重中之重，他们没有吵架，也没有为了各自的利益而产生纠纷，更没有把这件事情当做烦恼！记得，你和伴侣之间的问题一定可以得到解决，你一定不能在你的伴侣面前愁眉苦脸！你要做出分析行动的同时，还要及时的鼓励你的伴侣，你要让对方相信你们可以一起度过难关！</p><p>  •   家居装修风格：</p><p>面对家居装修风格的选择，小芳和李明的审美观念产生了冲突。小芳，作为一个热爱艺术的人，总是想在生活的每一个角落都能感受到艺术的踪迹。她喜欢那些充满艺术感的设计，如手绘壁画、特色吊灯、甚至是异国情调的家具。而李明则是一个典型的实用主义者，他更看重家居的功能性、耐用性和维护成本。</p><p>为了更科学地评估各种装修风格的可行性，李明决定进行风险分析：</p><p>A. 艺术风格：</p><p>优势：提供了良好的视觉体验，能够激发住户的创意思维；</p><p>劣势：可能涉及高成本、高维护的材料或设计；</p><p>风险：特殊材料可能不够耐用，需要定期维护；手工艺品可能需要定期清理或更换。</p><p>B.实用风格：</p><p>优势：注重功能性、耐用性，通常采用低维护、长寿命的材料；</p><p>劣势：可能缺乏某些审美元素，使得空间显得过于单调；</p><p>风险：过于注重实用性可能忽略住户的情感需求和审美体验。</p><p>经过分析，李明向小芳解释了他的担忧。他提出，一些充满艺术感的设计元素可能不够耐用，或者需要定期维护，这可能会带来额外的成本和麻烦。然而，他也承认空间中的艺术元素能够提供一种独特的审美体验，这是实用风格所不能替代的。经过深入的沟通，两人决定在装修风格上进行妥协。客厅，作为接待客人的主要区域，将采用小芳喜欢的艺术风格，以展现其个性和审美。而卧室、厨房和卫生间等功能性强的区域，则会选择李明倾向的实用风格，确保耐用性和低维护成本。李明还喜欢干净和科技的卫生间，所以他们彼此为对方着想；李明陪小芳走遍艺术大街，购买一些装饰品，并且尊重和帮忙装修客厅；在此期间，小芳还专门去家居店买了一些卫生间的高档用具，高科技满满的浴缸、花洒、镜子，甚至装修都是高科技感的……这种妥协不仅满足了双方的需求，还为他们的家创造了一个既实用又富有艺术气息的完美空间。</p><p>恋爱中的决策经常需要双方进行权衡和考虑。在这一过程中，逻辑性的思考方式有时可能会比情感更能帮助双方看清事情的实质，我们可以看出李明每次都是做出了两个人的看法，写在纸上并且罗列种种事实。记得，只有罗列事实才能够分析。Bartels和Urminsky在2011年的论文《On Intertemporal Selfishness: How the Perceived Instability of Identity Underlies Impatient Consumption》（Bartels, D. M., &amp; Urminsky, O. (2011). On Intertemporal Selfishness: How the Perceived Instability of Identity Underlies Impatient Consumption. Journal of Consumer Research, 38(1), 182-198.）中所提，人们在面临决策时，逻辑和长期的思维方式往往能导致更加明智和受益的选择。逻辑性强的人在面对恋爱中的问题时，更可能利用科学方法，如概率论、风险分析和博弈论来进行决策。这一逻辑性的决策方式，能够确保双方的需求和期望都被充分考虑，从而促进恋爱关系的和谐与稳定，而这一点正是普通人无法做到的，到了这一步甚至很多情侣就此分道扬镳，为了点小事吵架而不和，这种事情时有发生在我们身边，希望大家引以为戒，多多学习李明的做法。（此做法不分性别）</p><p>（2）对细节的敏感度与恋爱关系的深化</p><p>废话不多说，直接看案例。</p><p>张涛，一个资深的网络安全专家，有着对事物细微变化的出奇的敏感度。这种能力不仅在他的工作中大放异彩，也在他的恋爱生活中起到了关键的作用。</p><p>玲玲是一个充满活力的市场营销人员，她的生活节奏快，常常为工作疲于奔命。某天，由于项目的压力，玲玲情绪明显低落。对于大多数人来说，玲玲的变化可能并不明显，但对于张涛来说，这些细微的变化都逃不过他的眼睛。</p><p>他首先观察到玲玲的非言语行为，发现她的面部表情略显僵硬，嘴角下垂，这是一种典型的情感低落的表征。再者，他发现玲玲的眼神失去了往常的光泽，瞳孔略微扩大，可能是皮质醇——一种与压力相关的激素——的作用。她的语速变得稍快，语调也显得尖锐，都是情绪波动的迹象。当然，更明显的信号是，玲玲换了一个新发型——这可能是她想要通过外部变化来调节内心情感的努力。</p><p>为了准确地判断玲玲的情绪状态，张涛尝试与她进行深入的交流，利用开放式问题：“你今天看起来有些不同，工作上是不是有什么让你感到不开心的事情？”玲玲最初的回应是逃避和抵抗，她试图转移话题，表示“没什么大不了的。”</p><p>但张涛并没有轻易地放弃。他深知，要真正了解一个人的内心，比破解一道复杂的算法还要难，更需要时间和耐心（这一点是很多技术人员也做不到的，我必须承认很多人对异性是没有耐心的，不论男生还是女生都有可能发生丢失耐心的表现）。张涛面对玲玲的初步回避，他决定采取一个更加细致、策略性的方法。</p><p>张涛知道，食物有时能够温暖人的心。因此，他决定为玲玲准备一道特制的晚餐。他精选了玲玲最喜欢的食材，甚至提前几天去市场为她挑选那些新鲜的蔬菜和鱼。厨房里，香气袭人，张涛刻意为她烹制了那些她提到过、记忆中的拿手好菜。</p><p>晚饭时，张涛为玲玲铺好餐巾，准备了她最喜欢的果汁。他主动夹给玲玲她最爱的菜，并不断询问：“玲玲，还想吃点什么吗？”或者“这个味道如何？”他关心的每一句话，都希望能够为玲玲带来一点点的温暖。</p><p>但玲玲的心情显然并未因为这顿丰盛的晚餐而有所改观。尽管她微微地笑了，尝了尝那些菜，但她的眼神还是显得有些失落。张涛可以感受到，她虽然感激他为她所做的一切，但内心的困惑和压力并没有因此得到解决。她轻轻地推开了自己的餐盘，低头不语。</p><p>这时，张涛意识到，仅仅通过食物是无法解决玲玲心中的问题的，他也并没有急于追问或逼迫玲玲，而是选择了一个适当的时机，晚饭半小时后，当两人坐在沙发上，点上一盏温馨的台灯，播放了玲玲喜欢的轻音乐。这些都是为了创造一个轻松、安心的环境，让玲玲感觉被关心和尊重。他轻声地开始：“玲玲，我注意到你最近似乎有点不一样。或许我不能完全理解你现在的感受，但我真的希望能在你需要的时候陪在你身边。”玲玲的眼眸中闪过一丝波动，但她仍然尝试避免这个话题。</p><p>张涛深吸了一口气，他回想起了自己在工作中遇到的一个特别棘手的项目。那次，他的团队负责一个大型的网络安全升级，而在项目进行到一半时，他们发现了一个严重的漏洞，这意味着大量的代码需要被重写。由于这个突如其来的问题，整个项目的时间表被打乱，而且还面临着巨大的经济损失。张涛作为团队负责人，承受了巨大的压力，他知道整个团队的人都在看着他，等待他给出解决方案。</p><p>“那段时间，”张涛缓缓地说，“我每天都在办公室里熬夜，几乎没有休息。我也知道，我不能让团队的其他成员因为我的决策而受到太大的压力。但每当我想到可能会失败，可能会让公司和同事们失望，我心里就感到特别沉重。”</p><p>他又接着说：“有一天，我在办公室里，看着窗外的夜景，突然意识到，我不能再这样下去。我决定与团队成员召开紧急会议，集思广益，寻找解决方案。经过长时间的讨论和合作，我们最终找到了一个可行的解决方案，并成功地完成了项目。”</p><p>张涛望着玲玲的眼睛，那双昔日充满活力的眼眸此刻泛着微微的泪光。他轻轻握住她的手，语气充满了温柔与坚定：“玲玲，不论你经历什么，无论未来还有多少困难和低谷，我都会在你身边。我们一起面对，一起克服。”玲玲深深地看了张涛一眼，嘴角上扬，露出一个微笑，她轻轻靠在张涛的肩膀上：“张涛，你知道吗？这就是我为什么那么爱你，因为我知道，不论如何，你都爱我，都会在我身边。” 张涛微笑，轻轻地吻了玲玲的额头，低语道：“不论如何，我都会在，因为我爱你。”</p><p>经过这一系列的努力，玲玲的防备逐渐被打破，她终于流露出真实的情感与泪水，描述了自己的压抑和疲惫，他们两个人在床上躺着，彼此泛红萌生爱意。张涛倾听着，没有打断她，他们二人侧身对视，彼此傻笑，据说当天晚上还喜提二胎。这个也是我听说的，那故事的起源在一棵树下我们夏季的野炊——一对儿情侣真实经历的分享，写到此处，估计只有亲身经历过的人才能明白吧（我自己被自己写哭了）。</p><p>所以，结合以上作为本小节的总结：</p><p>在恋爱关系中，逻辑性强是一种十分有价值的品质。如李明与小芳的例子，逻辑思考帮助伴侣们更加清晰地评估和处理各种日常生活中的挑战。它能让情侣们看到彼此的需求、理解对方的立场，并寻找双赢的解决方案。这不仅促进了两人之间的合作，还加深了他们对彼此的信任和理解。</p><p>细节的敏感度是关心和爱的具体体现。如张涛与玲玲的故事中，张涛对玲玲的微小变化都能敏感地捕捉到，这种细微的关心为玲玲带来了巨大的安慰。能够观察到伴侣的不同和需要，能更精确地给予他们需要的关心和支持。</p><p>但同样，这种敏感度也需要与逻辑性结合，来找到真正解决问题的方法。纵然食物无法完全化解玲玲的困扰，但张涛在细节中所展现的关心，为接下来深入的对话铺垫了道路。</p><p>希望看了本小节的每一个伴侣都能像李明和张涛一样，既具备逻辑的头脑，又拥有对细节敏感的心。愿每一对情侣，在爱的旅途中，都能够通过对方的指引，找到最适合自己的道路，共同创造属于两人的甜美回忆。在任何情况下，都能真诚地对对方说：“不论如何，我都在。”、“不论如何，我都爱你。”</p>]]></content>
      
      
      <categories>
          
          <category> Love </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to maintain a healthy mindset as you pursue long-term goals</title>
      <link href="/blog/2023/08/12/How-to-maintain-a-healthy-mindset-as-you-pursue-long-term-goals/"/>
      <url>/blog/2023/08/12/How-to-maintain-a-healthy-mindset-as-you-pursue-long-term-goals/</url>
      
        <content type="html"><![CDATA[<p><strong>追求长期目标就像是跑马拉松。</strong>你可能会遇到各种障碍、疲惫和不确定性，但坚持下去的关键在于培养一种坚韧不拔和健康的心态。</p><h5 id="1-明确你的“为什么”-追寻目标背后的动机"><a href="#1-明确你的“为什么”-追寻目标背后的动机" class="headerlink" title="1. 明确你的“为什么”: 追寻目标背后的动机"></a>1. 明确你的“为什么”: 追寻目标背后的动机</h5><p>对于每一个目标背后，都有一个深层次的“为什么”。理解这个“为什么”并非只是简单的了解你要做什么，而是深入到为什么你要这么做。这是一个内心的驱动力，是在困境中为你点亮前行之路的明灯。</p><p>当我们遭遇挑战、困难或者疲惫时，回想起这个“为什么”经常可以为我们注入新的活力。它是你内心的声音，告诉你原来的决定并不是随意的，而是有意义的。了解自己为什么要设定这个目标是非常重要的。当你清楚自己的动机，你就更容易在困难时期找到动力。每当你感到挫败或者想要放弃时，回想起你的初衷，这会给你加油打气。如果这个目标是无法实现的，例如“我要一年里赚一千个亿”，诸如此类不仅仅不会让你接近目标，反而会把你直接扼杀在初始化的摇篮里，甚至于你说不出一年里赚一个亿的“为什么”。因此目标的过程不在于仅仅设立了去追逐，而是在于你能够解释清楚“为什么”，否则即便是圣人也难以坚持，因追求一个不知道是什么的东西，很显而易见任何人都会摆烂。目标的确立，就是对“为什么”的解释。</p><p>我来个案例解释吧。</p><p>小张是一个程序员，他每天工作十几个小时，代码、测试、再代码。某一天，他突然觉得很疲惫，不再像起初那样对编程充满激情。他开始质疑自己，为什么要这样每天对着电脑，为什么不选择一个轻松的工作？</p><p>这时，小张回想起了自己大学时期的梦想。当时的他，希望利用技术来为人们解决实际问题，希望自己的代码能够帮助到需要的人。他记得自己曾经说过：“我不仅仅是为了工资在编程，我是为了使世界变得更好。”</p><p>这个“为什么”为小张提供了方向。他意识到，自己不是为了工资或者社会地位在编程，而是为了实现内心的梦想。这个动机让他重新找回了激情，即使面对困难和压力，他也能继续前行，因为他知道自己为什么而战。</p><p>所以，无论你的目标是什么，都要时常提醒自己背后的“为什么”，这样你的目标都会随着你的过程而递进，当你明确了这个动机，你就能更坚韧、更有决心地追求你的梦想，无论路途多么崎岖，一个长期的目标很有可能会随着时间而改变，这一点很正常，但放弃目标不代表是你是一个懒惰、堕落、无能的人，而是代表着你有新的目标，它看起来更加诱人，不至于像我们之前说的“一年赚一千亿”那样天方夜谭。</p><h5 id="2-自我关怀：照顾好自己，确保持续前行"><a href="#2-自我关怀：照顾好自己，确保持续前行" class="headerlink" title="2.自我关怀：照顾好自己，确保持续前行"></a>2.自我关怀：照顾好自己，确保持续前行</h5><p>在追求长期目标的过程中，我们往往会专注于目标本身，忽略了为达到这个目标而努力的那个人——我们自己。但实际上，没有一个健康的身体和稳定的心态，任何目标都难以实现。因此，为了确保我们能够持续、有效地追求目标，自我关怀显得尤为重要。</p><p>我见过很多大学生，他们只坐一天，从来不考虑自己的生活问题。例如衣服是否洗好？鞋是否勤刷勤晒？被子是否也需要晒？……不要小瞧这些生活问题，因为他会给你的目标提供自我关怀。如果你连你自己的生活都无法处理好，那你还能处理什么呢？当然我知道你会很忙，但你至少应该静下来好好规划一下自己的时间，怎么利用好时间去合理地解决这些小事。当你生活上的问题都得到解决，并且生活很好的时候，你会把你的精力持续地投放在目标上，这是自然的，而不是一种强制的。特别注意这种自然的方式，卓有成效。</p><p>A.定期休息：工作和学习都需要集中注意力，但人的精力是有限的。每隔一段时间，给自己一个短暂的休息，这可以帮助你恢复精力，提高工作效率。</p><p>B.坚持锻炼：运动不仅可以保持身体健康，还能释放压力、提高情绪。无论是跑步、游泳、瑜伽还是简单的散步，都是很好的选择。</p><p>C.饮食均衡：身体是你的工具，你需要给它提供足够的营养。吃得健康，意味着你为身体提供了足够的能量和营养，来应对每天的挑战。</p><p>D.寻找释放压力的方法：每个人都有自己的放松方式，可能是阅读、冥想、旅行、听音乐或与家人、朋友聚会。找到对你有效的放松方法，并定期为自己“充电”。</p><p>  不要小瞧了这些，有些人每天都活在压力中，他们有一个很好的理由：我需要学习，我需要工作。殊不知ABCD都在的时候，你会达到最佳的状态。我知道这不容易，但你需要时间去做，而不是停止了。</p><p>案例分享：小李的自我关怀之路</p><p>小李是一名初创公司的创始人，她每天工作到深夜，经常忘记吃饭，甚至没有时间做运动。但很快，她发现自己的健康状况每况愈下，情绪也变得容易焦虑。她意识到，如果这样下去，她的公司可能会因为她的健康问题而受到影响。</p><p>于是，小李决定为自己制定一个自我关怀计划。她开始每天早上跑步，每周参加一次瑜伽课程，确保每天吃三餐，并为自己预留一些阅读和冥想的时间。不出所料，她的健康状况和情绪都得到了显著的改善，她也更有信心和能量去面对公司的挑战。</p><p>追求目标是一场马拉松，而不是短跑。要想走得更远，更持久，我们必须学会照顾好自己。只有当我们的身体和心灵都处于最佳状态，我们才能最大限度地发挥自己的潜能，迎接每一个挑战。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Love Brain of Technoman: Introduction</title>
      <link href="/blog/2023/08/11/The-Love-Brain-of-Technoman-Introduction/"/>
      <url>/blog/2023/08/11/The-Love-Brain-of-Technoman-Introduction/</url>
      
        <content type="html"><![CDATA[<p>程序员与常见的恋爱误区？在我们的日常生活中，有一些关于程序员和技术人员的固定观念或传言。例如，“程序员找不到对象”，“技术人员情商很低”，或者“他们不注重形象，因此不容易获得异性的吸引”。这些观点，在某种程度上可能会给这一群体带来一定的压力和困惑。</p><p>须知：任何群体都有多元化的个体。技术人员中既有内向的，也有外向的；有的人可能真的不太注重形象，但也有人非常讲究穿着打扮。因此，将整个技术群体归纳为某一种特定的标签是不公平的。正如很多技术人员他们喜欢下班后健身，他们在其他非技术领域社交圈也得到认可，人总不是单一的产物。我们还需要知道，技术人员有各种性别，而非单纯“他者”的特权。</p><p>为什么多数人会有这个误解？因为技术人员的工作通常需要长时间的沉浸在复杂的问题中，这可能导致他们在社交场合显得有些“不合群”。但这并不意味着他们不懂得如何与人沟通或缺乏情商。实际上，许多技术人员在解决与人相关的问题时，往往会用到他们解决技术问题的逻辑和策略，这便是我们本文必须强调的。</p><p>为什么要谈“技术人的恋爱脑”？在如今这个充斥着技术的时代，每个人都或多或少受到技术的影响。从我们工作的方式、消遣的方式，到我们社交的方式，技术都已经成为了我们生活中不可或缺的一部分。但是，当我们提及恋爱，很少有人会想到它与技术有什么联系。而实际上，对于很多深陷技术领域的人来说，他们的恋爱方式、恋爱思考逻辑、以及恋爱中的行为，都或多或少受到他们职业背景的影响。</p><p>例如，李明是一位数据分析师，他每天都在处理和分析大量数据，帮助公司做出决策。在工作之外，他的恋爱生活充满了挑战，因为他经常觉得自己过于逻辑，难以理解异性的情感。但事实上，他的技术背景给了他独特的恋爱视角和方法。李明在与女友小芸的互动中，常常能够准确捕捉到她的需求和困惑（逻辑性和细节敏感性）。比如，小芸在谈论她的日常问题时，李明能够通过逻辑分析为她提供解决方案，而不是简单地表达同情。这使得小芸觉得和他在一起非常踏实，诚然女性朋友分享日常问题时候，多数情况下是为了寻求你的安慰，不仅仅是解决问题，对上述情况，我建议男性同胞应该拥抱并且亲吻她，抱着她说：「没关系，我一直都在」。紧接着你觉得对方脾气降下来了，不再抱怨工作和日常了，你就可以趁机杀入你的解决方案，此为上计。还有可能会发生的事：李明在小芸的生日前，使用了简单的网络搜索，找到了她最喜欢的音乐、电影和食物，并据此策划了一场私人的生日惊喜。尽管这只是一个简单的搜索，但它显示了他如何利用自己的技术背景为恋爱增添乐趣。通过这两个简单的例子，我们可以看到，技术并不是与恋爱格格不入的，只要我们能够恰当地运用它，它就可以成为恋爱的有力助手，纯粹依赖安慰的“高情商男性”虽然暂时缓解了状况，但未能从根本上解决问题；而这正是技术人的专长。</p><p>关于“程序员找不到对象”的说法，也是过于笼统的一个判断。与其说是因为他们是程序员，不如说是他们可能在恋爱与社交方面没有投入太多的时间和精力。而这是很多忙碌职业人士都可能会面临的问题，与是否为技术人员无关。诚然，我们的目的并不是为技术人员辩解，而是希望大家能有一个更加公正、客观的看待技术人员在恋爱方面的观念。在接下来的内容中，我们将深入探讨技术人员在恋爱中的优势，以及如何充分利用这些优势。</p><p>我们再来看一个案例。</p><p>李浩和张静是某985大学的学生。李浩就读于计算机科学与技术专业，而张静则是文学与新闻学院的学生。</p><p>李浩的恋爱难题：李浩一直是学校里的技术高手，经常为班级或社团解决技术难题。然而，即使他的专业技能得到了广泛的认可，他在恋爱方面似乎始终无法如愿。</p><p>1）沉迷于技术世界：大部分时间，李浩都沉浸在编程和项目中，无暇关心校园生活中的其他方面。他的社交圈主要是与他有相同兴趣爱好的朋友，很少有与其他专业的学生互动。</p><p>2）沟通的难题：尽管他可以轻松地解释复杂的算法，但在与异性交往时，他经常发现自己难以表达自己的情感。这不是因为他没有情感，而是因为他习惯于逻辑性和直接性的沟通，而缺乏细腻的情感描述。</p><p>3）恋爱的认知：很多人可能都没尝试过这一点，但李浩曾尝试过与其他专业的女生约会，但由于他们对生活的认知差异，两人经常出现观点不合，最终导致感情的破裂。他可能误认为这是因为他是“程序员”而遭遇的问题，而忽视了双方在价值观和兴趣爱好上的差异。</p><p>张静的观察：张静常常看到李浩在图书馆为一个难题而努力，而这使她对李浩产生了兴趣。但她也注意到，李浩很少参与班级或学校的活动，使他缺乏与大多数学生交往的机会。</p><p>张静认为，李浩之所以找不到对象，不仅是因为他是技术人员，更多的是因为他过于专注于自己的兴趣领域，忽视了广泛的社交互动。而这种问题并不仅仅存在于技术人员中，任何过分专注于某一领域的人都可能遭遇相似的困境。</p><p>正所谓旁观者清，我们只是简单举个例子而已。有人说：“这他妈太真实，这不就是我？”肯定也会有人说：“我还不如他。”</p><p>所以我为你们总结了以下教训，请注意，这并不限制性别：</p><ul><li>专业要求高强度投入：技术专业，特别是计算机科学、工程学、物理学等，通常需要学生投入大量时间在实验、项目和学术研究上。因此，这部分学生往往比其他专业的学生更加忙碌，缺乏社交活动的时间。</li><li>同行社交圈子：技术专业学生的社交圈子常常局限于同一个学院或专业，这意味着他们大部分的时间都与同行打交道。这不仅限制了他们接触异性的机会，还可能使他们在与其他专业的学生交往时感到陌生或不适应。</li><li>沟通方式和思维模式：技术专业培养学生的逻辑思维和问题解决能力。这样的培训有时可能导致他们在日常交往中过于直接或逻辑化，忽略了情感交流和直觉，从而造成沟通障碍。</li><li>自我认知偏差：由于社会对“宅男”或“技术宅”的刻板印象，技术专业的学生可能会误认为自己因为专业背景而在恋爱中处于劣势，从而缺乏自信。</li><li>缺乏恋爱技巧：对于许多深陷于技术学习的学生来说，他们可能没有足够的时间和机会学习恋爱中的互动技巧，如何给与关心、如何解读对方的情感等。</li><li>生活习惯和兴趣偏好：技术学生可能更喜欢宅在家里玩游戏、看技术博客或编程，而不是参与校园活动或社交活动。这种生活方式可能使他们错过了很多认识异性的机会。</li></ul><p>……</p><p>不要说这些你都已经中招了。</p>]]></content>
      
      
      <categories>
          
          <category> Love </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2023/08/11/hello-world/"/>
      <url>/blog/2023/08/11/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Welcome-to-Wxrkz"><a href="#Welcome-to-Wxrkz" class="headerlink" title="Welcome to Wxrkz!"></a>Welcome to Wxrkz!</h2><p>作为一个刚入门的小白，拥有一个属于自己的博客，我感觉已经非常激动了。</p><p>让我有写博客的念头的原因有以下三点：</p><h4 id="1-作为一个软件开发爱好者，写博客的过程也是一个学习，自我成长的一个过程。方便自己将平常所学所见记录下来，也可以满足我的分享欲哈哈哈哈。技术就是要开源才好玩，自己一个人闷着头，像井底之蛙一样，永远不得长进。三人行，必有我师。"><a href="#1-作为一个软件开发爱好者，写博客的过程也是一个学习，自我成长的一个过程。方便自己将平常所学所见记录下来，也可以满足我的分享欲哈哈哈哈。技术就是要开源才好玩，自己一个人闷着头，像井底之蛙一样，永远不得长进。三人行，必有我师。" class="headerlink" title="1.作为一个软件开发爱好者，写博客的过程也是一个学习，自我成长的一个过程。方便自己将平常所学所见记录下来，也可以满足我的分享欲哈哈哈哈。技术就是要开源才好玩，自己一个人闷着头，像井底之蛙一样，永远不得长进。三人行，必有我师。"></a>1.作为一个软件开发爱好者，写博客的过程也是一个学习，自我成长的一个过程。方便自己将平常所学所见记录下来，也可以满足我的分享欲哈哈哈哈。技术就是要开源才好玩，自己一个人闷着头，像井底之蛙一样，永远不得长进。三人行，必有我师。</h4><h4 id="2-自己想记录一点东西，作为自己成长的一个记录。大多也就是我自己随笔写写，分享一些文章或者分享自己学习编程的一些知识。"><a href="#2-自己想记录一点东西，作为自己成长的一个记录。大多也就是我自己随笔写写，分享一些文章或者分享自己学习编程的一些知识。" class="headerlink" title="2.自己想记录一点东西，作为自己成长的一个记录。大多也就是我自己随笔写写，分享一些文章或者分享自己学习编程的一些知识。"></a>2.自己想记录一点东西，作为自己成长的一个记录。大多也就是我自己随笔写写，分享一些文章或者分享自己学习编程的一些知识。</h4><h4 id="3-最重要的是，我热爱编程，编程可谓是一种艺术。我想用博客来时刻告诫自己。最后希望自己能够坚持下来。"><a href="#3-最重要的是，我热爱编程，编程可谓是一种艺术。我想用博客来时刻告诫自己。最后希望自己能够坚持下来。" class="headerlink" title="3.最重要的是，我热爱编程，编程可谓是一种艺术。我想用博客来时刻告诫自己。最后希望自己能够坚持下来。"></a>3.最重要的是，我热爱编程，编程可谓是一种艺术。我想用博客来时刻告诫自己。最后希望自己能够坚持下来。</h4><p>More info WX:wxrkz123 </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
