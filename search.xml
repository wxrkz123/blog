<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>量化投资代码分析</title>
      <link href="/blog/2024/03/14/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/blog/2024/03/14/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="量化投资完整代码及分析"><a href="#量化投资完整代码及分析" class="headerlink" title="量化投资完整代码及分析"></a>量化投资完整代码及分析</h1><h2 id="MACD-indicator-trading-strategy-py"><a href="#MACD-indicator-trading-strategy-py" class="headerlink" title="MACD indicator trading strategy.py"></a>MACD indicator trading strategy.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas_ta <span class="token keyword">as</span> ta<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">import</span> MultipleLocator<span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span class="token keyword">def</span> <span class="token function">calculate_max_drawdown</span><span class="token punctuation">(</span>cumulative_returns<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 通过累计回报计算资金曲线，取1加上回报序列即可</span>    portfolio_values <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> cumulative_returns    <span class="token comment"># 计算累计最高值</span>    running_max <span class="token operator">=</span> portfolio_values<span class="token punctuation">.</span>cummax<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 计算回撤</span>    drawdowns <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> portfolio_values <span class="token operator">/</span> running_max    <span class="token comment"># 计算最大回撤</span>    max_drawdown <span class="token operator">=</span> drawdowns<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max_drawdown<span class="token comment"># 从excel中加载数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'E:\\MZL.DCE豆粕主连.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 对时间进行格式化</span>data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 计算MACD指标</span>data<span class="token punctuation">[</span><span class="token string">'MACD'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MACD_Signal'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MACD_Hist'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ta<span class="token punctuation">.</span>macd<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 计算MA5、MA10、MA15和MA20</span>data<span class="token punctuation">[</span><span class="token string">'MA5'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'MA20'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ax2<span class="token punctuation">,</span> ax3<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> sharex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 第一个子图：MA5和MA10</span>ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MA5'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'MA5'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'MA10'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA5'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> where<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'MA5'</span><span class="token punctuation">]</span><span class="token operator">></span>data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA5'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> where<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'MA5'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper left'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'MA5 and MA10 Crossover'</span><span class="token punctuation">)</span><span class="token comment"># 第二个子图：MA10和MA15</span>ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'MA10'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'MA15'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> where<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token operator">></span>data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> where<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'MA10'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper left'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'MA10 and MA15 Crossover'</span><span class="token punctuation">)</span><span class="token comment"># 第三个子图：MA15和MA20</span>ax3<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'MA15'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'purple'</span><span class="token punctuation">)</span>ax3<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MA20'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'MA20'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'brown'</span><span class="token punctuation">)</span>ax3<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA20'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> where<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token operator">></span>data<span class="token punctuation">[</span><span class="token string">'MA20'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'purple'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>ax3<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MA20'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> where<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'MA15'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>data<span class="token punctuation">[</span><span class="token string">'MA20'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'brown'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>ax3<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper left'</span><span class="token punctuation">)</span>ax3<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'MA15 and MA20 Crossover'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 计算EMA12、EMA26、DIF、DEA、以及MACD</span>short_period <span class="token operator">=</span> <span class="token number">12</span>long_period <span class="token operator">=</span> <span class="token number">26</span>dea_period <span class="token operator">=</span> <span class="token number">9</span>data<span class="token punctuation">[</span><span class="token string">'EMA12'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ewm<span class="token punctuation">(</span>span<span class="token operator">=</span>short_period<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'EMA26'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ewm<span class="token punctuation">(</span>span<span class="token operator">=</span>long_period<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'DIF'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'EMA12'</span><span class="token punctuation">]</span> <span class="token operator">-</span> data<span class="token punctuation">[</span><span class="token string">'EMA26'</span><span class="token punctuation">]</span>data<span class="token punctuation">[</span><span class="token string">'DEA'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'DIF'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ewm<span class="token punctuation">(</span>span<span class="token operator">=</span>dea_period<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'MACD'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'DIF'</span><span class="token punctuation">]</span> <span class="token operator">-</span> data<span class="token punctuation">[</span><span class="token string">'DEA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 找出计算MACD时的买卖信号点</span>data<span class="token punctuation">[</span><span class="token string">'Buy_Signal'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MACD'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'DIF'</span><span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span><span class="token string">'DEA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'Sell_Signal'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MACD'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'DIF'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span><span class="token string">'DEA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span><span class="token comment"># 根据MACD的正负来计算置信区间</span>data<span class="token punctuation">[</span><span class="token string">'Confidence_Interval'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MACD'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span>    data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1.96</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1.96</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 绘图</span>fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> sharex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Close Price'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Confidence_Interval'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Buy_Signal'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'^'</span><span class="token punctuation">,</span> markersize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'buy'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Sell_Signal'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'v'</span><span class="token punctuation">,</span> markersize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'sell'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper left'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Close Price and Confidence Interval'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'DIF'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'DIF'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'DEA'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'DEA'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'purple'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'MACD'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'MACD'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ax2<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper left'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'MACD Indicator'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 生成交易信号，买卖信号置1和-1.</span>data<span class="token punctuation">[</span><span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MACD'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'DIF'</span><span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span><span class="token string">'DEA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'MACD'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'DIF'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span><span class="token string">'DEA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 计算回报率</span>data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 找到买入点的索引</span>buy_indices <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token comment"># 找到卖出点的索引</span>sell_indices <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token comment"># 每次买入后的下一个卖出点</span>next_sell_indices <span class="token operator">=</span> sell_indices<span class="token punctuation">[</span>sell_indices <span class="token operator">></span> buy_indices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 每次卖出前的上一个买入点</span>previous_buy_indices <span class="token operator">=</span> buy_indices<span class="token punctuation">[</span>buy_indices <span class="token operator">&lt;</span> next_sell_indices<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 交易次数（每次买入信号到紧邻的卖出信号算一次交易）</span>trade_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>next_sell_indices<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>previous_buy_indices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 计算盈利次数</span>profit_flags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> buy_index <span class="token keyword">in</span> previous_buy_indices<span class="token punctuation">:</span>    <span class="token comment"># 找到当前买入点之后的第一个卖出点</span>    next_sell_index <span class="token operator">=</span> sell_indices<span class="token punctuation">[</span>sell_indices <span class="token operator">></span> buy_index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># 计算买入后到卖出点的收益率</span>    return_after_buy <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>next_sell_index<span class="token punctuation">,</span> <span class="token string">'Close'</span><span class="token punctuation">]</span> <span class="token operator">-</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>buy_index<span class="token punctuation">,</span> <span class="token string">'Close'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> return_after_buy <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        profit_flags<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        profit_flags<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>profit_times <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>profit_flags<span class="token punctuation">)</span><span class="token comment"># 计算胜率</span>win_rate <span class="token operator">=</span> profit_times <span class="token operator">/</span> trade_count<span class="token comment"># 过滤掉收益率是inf、-inf和NaN的行</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>inf<span class="token punctuation">,</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>inf<span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">)</span><span class="token comment"># 根据清理后的数据计算累计收益率</span>data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumprod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token comment"># 确保数据都是有效的</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 使用上述函数计算最大回撤</span>max_drawdown <span class="token operator">=</span> calculate_max_drawdown<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 生成累计收益率图</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#计算夏普比率</span>risk_free_rate <span class="token operator">=</span> <span class="token number">0.03</span><span class="token operator">/</span><span class="token number">360</span> <span class="token comment"># 假设年度无风险利率为3%</span>daily_return <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span> <span class="token comment"># 每日收益率</span>daily_std <span class="token operator">=</span> daily_return<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 每日收益率的标准差</span>average_daily_return <span class="token operator">=</span> daily_return<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 每日收益率的平均值</span><span class="token comment">#计算夏普比率</span>sharpe_ratio <span class="token operator">=</span> <span class="token punctuation">(</span>average_daily_return <span class="token operator">-</span> risk_free_rate<span class="token punctuation">)</span> <span class="token operator">/</span> daily_std <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">252</span><span class="token punctuation">)</span> <span class="token comment"># 假设一年有252个交易日</span><span class="token comment"># 创建一个文档对象</span>doc <span class="token operator">=</span> Document<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将业绩归因的指标添加到文档中</span>doc<span class="token punctuation">.</span>add_heading<span class="token punctuation">(</span><span class="token string">'MACD indicator trading strategy'</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Total number of trades: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>trade_count<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Total number of profitable trades: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>profit_times<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Win rate: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>win_rate<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">&#125;</span></span><span class="token string">%"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string">"The maximum drawdown : &#123;:.2%&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>max_drawdown<span class="token punctuation">)</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Sharpe Ratio: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sharpe_ratio<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 保存文档</span>doc<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"MACD_indicator_trading_strategy.docx"</span><span class="token punctuation">)</span><span class="token comment"># 将数据写入Excel</span>data<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'MACD_indicator_trading_strategy_output_data.xlsx'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Dual-Thrust-strategy-py"><a href="#Dual-Thrust-strategy-py" class="headerlink" title="Dual Thrust strategy.py"></a>Dual Thrust strategy.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span class="token keyword">def</span> <span class="token function">calculate_max_drawdown</span><span class="token punctuation">(</span>cumulative_returns<span class="token punctuation">)</span><span class="token punctuation">:</span>    portfolio_values <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> cumulative_returns    running_max <span class="token operator">=</span> portfolio_values<span class="token punctuation">.</span>cummax<span class="token punctuation">(</span><span class="token punctuation">)</span>    drawdowns <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> portfolio_values <span class="token operator">/</span> running_max    max_drawdown <span class="token operator">=</span> drawdowns<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max_drawdown<span class="token comment"># 从excel中加载数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'E:\\MZL.DCE豆粕主连.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 对时间进行格式化</span>data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Dual Thrust策略</span>N <span class="token operator">=</span> <span class="token number">7</span> K1 <span class="token operator">=</span> <span class="token number">0.5</span> K2 <span class="token operator">=</span> <span class="token number">0.5</span>data<span class="token punctuation">[</span><span class="token string">'HH'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span>N<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'LC'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span>N<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'HC'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span>N<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'LL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span>N<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 计算Range</span>data<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'HH'</span><span class="token punctuation">,</span> <span class="token string">'LC'</span><span class="token punctuation">,</span> <span class="token string">'HC'</span><span class="token punctuation">,</span> <span class="token string">'LL'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">'HH'</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token string">'LC'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token string">'HC'</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token string">'LL'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'BuyLine'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Open'</span><span class="token punctuation">]</span> <span class="token operator">+</span> K1 <span class="token operator">*</span> data<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span>data<span class="token punctuation">[</span><span class="token string">'SellLine'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Open'</span><span class="token punctuation">]</span> <span class="token operator">-</span> K2 <span class="token operator">*</span> data<span class="token punctuation">[</span><span class="token string">'Range'</span><span class="token punctuation">]</span><span class="token comment"># 初始化仓位</span>position <span class="token operator">=</span> <span class="token number">0</span>buy_signals<span class="token punctuation">,</span> sell_signals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>trades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 更新买入和卖出信号, 执行交易逻辑</span>data<span class="token punctuation">[</span><span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>data<span class="token punctuation">[</span><span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    row_today <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    row_yesterday <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> row_today<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span> <span class="token operator">></span> row_yesterday<span class="token punctuation">[</span><span class="token string">'BuyLine'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> position <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            buy_signals<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row_today<span class="token punctuation">[</span><span class="token string">'BuyLine'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            position <span class="token operator">+=</span> <span class="token number">1</span>             trades<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Trade_Type'</span><span class="token punctuation">:</span><span class="token string">'Buy'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">[</span><span class="token string">'BuyLine'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> row_today<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> row_yesterday<span class="token punctuation">[</span><span class="token string">'SellLine'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> position <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            sell_signals<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row_today<span class="token punctuation">[</span><span class="token string">'SellLine'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            position <span class="token operator">-=</span> <span class="token number">1</span>            trades<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Trade_Type'</span><span class="token punctuation">:</span><span class="token string">'Sell'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">[</span><span class="token string">'SellLine'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>trades_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>trades<span class="token punctuation">)</span><span class="token comment"># 画出价格和突破点</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Close Price'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span>trade<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> trade <span class="token keyword">in</span> trades <span class="token keyword">if</span> trade<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Buy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trades_df<span class="token punctuation">[</span>trades_df<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Buy'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Price'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Buy Signal'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'^'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span>trade<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> trade <span class="token keyword">in</span> trades <span class="token keyword">if</span> trade<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Sell'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trades_df<span class="token punctuation">[</span>trades_df<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Sell'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Price'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Sell Signal'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'v'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Prices and Buy and Sell Signals of Dual Thrust Strategy'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Price'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 确认买入卖出时机</span>buy_signals <span class="token operator">=</span> <span class="token punctuation">[</span>index <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span>sell_signals <span class="token operator">=</span> <span class="token punctuation">[</span>index <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>buy_signals<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sell_signals<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No enough buy and sell signals generated. Please check your data and strategy."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 确保卖出在买入之后，买入在卖出之前</span>    buy_signals_filtered <span class="token operator">=</span> <span class="token punctuation">[</span>idx <span class="token keyword">for</span> idx <span class="token keyword">in</span> buy_signals <span class="token keyword">if</span> idx <span class="token operator">&lt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span>sell_signals<span class="token punctuation">)</span><span class="token punctuation">]</span>    sell_signals_filtered <span class="token operator">=</span> <span class="token punctuation">[</span>idx <span class="token keyword">for</span> idx <span class="token keyword">in</span> sell_signals <span class="token keyword">if</span> idx <span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span>buy_signals_filtered<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 计算交易次数（每次买入信号到紧邻的卖出信号算一次交易）</span>    trade_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>buy_signals_filtered<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sell_signals_filtered<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 计算盈利次数</span>    profit_times <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>trade_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 找到当前买入点之后的第一个卖出点</span>        buy_price <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>buy_signals_filtered<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        sell_price <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sell_signals_filtered<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> sell_price <span class="token operator">></span> buy_price<span class="token punctuation">:</span>            <span class="token comment"># 如果卖出价高于买入价，说明这次交易盈利，投资成功</span>            profit_times <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 计算胜率</span>    win_rate <span class="token operator">=</span> profit_times <span class="token operator">/</span> trade_count<span class="token comment"># 根据清理后的数据计算累计收益率</span>data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumprod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token comment"># 确保数据都是有效的</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token operator">~</span>data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 计算最大回撤</span>max_drawdown <span class="token operator">=</span> calculate_max_drawdown<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 生成累计收益率图</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 计算夏普比率</span>risk_free_rate <span class="token operator">=</span> <span class="token number">0.03</span><span class="token operator">/</span><span class="token number">360</span> <span class="token comment"># 无风险利率假设为0.03</span>daily_return <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span>daily_std <span class="token operator">=</span> daily_return<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span>average_daily_return <span class="token operator">=</span> daily_return<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>sharpe_ratio <span class="token operator">=</span> <span class="token punctuation">(</span>average_daily_return <span class="token operator">-</span> risk_free_rate<span class="token punctuation">)</span> <span class="token operator">/</span> daily_std <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">252</span><span class="token punctuation">)</span> <span class="token comment"># 创建Document对象</span>doc <span class="token operator">=</span> Document<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加业绩归因指标到文档中</span>doc<span class="token punctuation">.</span>add_heading<span class="token punctuation">(</span><span class="token string">'Dual Thrust strategy'</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Total number of trades: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>trade_count<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Total number of profitable trades: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>profit_times<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Win rate: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>win_rate<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">&#125;</span></span><span class="token string">%"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string">"The maximum drawdown : &#123;:.2%&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>max_drawdown<span class="token punctuation">)</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Sharpe Ratio: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sharpe_ratio<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 保存文档</span>doc<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"Dual_Thrust_strategy.docx"</span><span class="token punctuation">)</span><span class="token comment"># 将数据写入Excel</span>data<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'Dual_Thrust_strategy_output_data.xlsx'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Fiari-four-price-strategy-py"><a href="#Fiari-four-price-strategy-py" class="headerlink" title="Fiari four-price strategy.py"></a>Fiari four-price strategy.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">calculate_max_drawdown</span><span class="token punctuation">(</span>cumulative_returns<span class="token punctuation">)</span><span class="token punctuation">:</span>    portfolio_values <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> cumulative_returns    running_max <span class="token operator">=</span> portfolio_values<span class="token punctuation">.</span>cummax<span class="token punctuation">(</span><span class="token punctuation">)</span>    drawdowns <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> portfolio_values <span class="token operator">/</span> running_max    max_drawdown <span class="token operator">=</span> drawdowns<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max_drawdown<span class="token comment"># 从excel中加载数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'E:\\MZL.DCE豆粕主连.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 对时间进行格式化</span>data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加前一交易日的最高价和最低价作为上下轨</span>data<span class="token punctuation">[</span><span class="token string">'Upper_Track'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'Lower_Track'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 初始化仓位</span>position <span class="token operator">=</span> <span class="token number">0</span>buy_signals<span class="token punctuation">,</span> sell_signals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>trades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 更新买入和卖出信号, 执行交易逻辑</span>data<span class="token punctuation">[</span><span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>data<span class="token punctuation">[</span><span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    row_today <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    row_yesterday <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># 当价格突破上轨，买入开仓</span>    <span class="token keyword">if</span> row_today<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span> <span class="token operator">></span> row_yesterday<span class="token punctuation">[</span><span class="token string">'Upper_Track'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> position <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            buy_signals<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row_today<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            trades<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Trade_Type'</span><span class="token punctuation">:</span><span class="token string">'Buy'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            position <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment"># 当价格跌穿下轨，卖出开仓</span>    <span class="token keyword">if</span> row_today<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> row_yesterday<span class="token punctuation">[</span><span class="token string">'Lower_Track'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> position <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            sell_signals<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row_today<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            trades<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Trade_Type'</span><span class="token punctuation">:</span><span class="token string">'Sell'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>trades_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>trades<span class="token punctuation">)</span><span class="token comment"># 画出价格和突破点</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Close Price'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Upper_Track'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Upper Track'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Lower_Track'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Lower Track'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span>trade<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> trade <span class="token keyword">in</span> trades <span class="token keyword">if</span> trade<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Buy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trades_df<span class="token punctuation">[</span>trades_df<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Buy'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Price'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Buy Signal'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'^'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span>trade<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> trade <span class="token keyword">in</span> trades <span class="token keyword">if</span> trade<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Sell'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trades_df<span class="token punctuation">[</span>trades_df<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Sell'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Price'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Sell Signal'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'v'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Prices and Buy and Sell Signals for Fractal Principle Strategy'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Price'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 确认买入卖出时机</span>buy_signals <span class="token operator">=</span> <span class="token punctuation">[</span>index <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span>sell_signals <span class="token operator">=</span> <span class="token punctuation">[</span>index <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>buy_signals<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sell_signals<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No enough buy and sell signals generated. Please check your data and strategy."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 确保卖出在买入之后，买入在卖出之前</span>    buy_signals_filtered <span class="token operator">=</span> <span class="token punctuation">[</span>idx <span class="token keyword">for</span> idx <span class="token keyword">in</span> buy_signals <span class="token keyword">if</span> idx <span class="token operator">&lt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span>sell_signals<span class="token punctuation">)</span><span class="token punctuation">]</span>    sell_signals_filtered <span class="token operator">=</span> <span class="token punctuation">[</span>idx <span class="token keyword">for</span> idx <span class="token keyword">in</span> sell_signals <span class="token keyword">if</span> idx <span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span>buy_signals_filtered<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 计算交易次数（每次买入信号到紧邻的卖出信号算一次交易）</span>    trade_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>buy_signals_filtered<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sell_signals_filtered<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 计算盈利次数</span>    profit_times <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>trade_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 找到当前买入点之后的第一个卖出点</span>        buy_price <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>buy_signals_filtered<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        sell_price <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sell_signals_filtered<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> sell_price <span class="token operator">></span> buy_price<span class="token punctuation">:</span>            <span class="token comment"># 如果卖出价高于买入价，说明这次交易盈利，投资成功</span>            profit_times <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 计算胜率</span>    win_rate <span class="token operator">=</span> profit_times <span class="token operator">/</span> trade_count<span class="token comment"># 根据清理后的数据计算累计收益率</span>data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumprod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token comment"># 确保数据都是有效的</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token operator">~</span>data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 计算最大回撤</span>max_drawdown <span class="token operator">=</span> calculate_max_drawdown<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 生成累计收益率图</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 计算夏普比率</span>risk_free_rate <span class="token operator">=</span> <span class="token number">0.03</span><span class="token operator">/</span><span class="token number">360</span> <span class="token comment"># 无风险利率假设为0.03</span>daily_return <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span>daily_std <span class="token operator">=</span> daily_return<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span>average_daily_return <span class="token operator">=</span> daily_return<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>sharpe_ratio <span class="token operator">=</span> <span class="token punctuation">(</span>average_daily_return <span class="token operator">-</span> risk_free_rate<span class="token punctuation">)</span> <span class="token operator">/</span> daily_std <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">252</span><span class="token punctuation">)</span> <span class="token comment"># 创建Document对象</span>doc <span class="token operator">=</span> Document<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加业绩归因指标到文档中</span>doc<span class="token punctuation">.</span>add_heading<span class="token punctuation">(</span><span class="token string">'Fiari four-price strategy'</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Total number of trades: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>trade_count<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Total number of profitable trades: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>profit_times<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Win rate: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>win_rate<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">&#125;</span></span><span class="token string">%"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string">"The maximum drawdown : &#123;:.2%&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>max_drawdown<span class="token punctuation">)</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Sharpe Ratio: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sharpe_ratio<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 保存文档</span>doc<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"Fiari_four-price_strategy.docx"</span><span class="token punctuation">)</span><span class="token comment"># 将数据写入Excel</span>data<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'Fiari_four-price_strategy_output_data.xlsx'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ATR-strategy-py"><a href="#ATR-strategy-py" class="headerlink" title="ATR strategy.py"></a>ATR strategy.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span class="token comment"># ATR计算函数</span><span class="token keyword">def</span> <span class="token function">calculate_atr</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">,</span> period<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">:</span>    high <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span>    low <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span>    close <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span>        high_low <span class="token operator">=</span> high <span class="token operator">-</span> low    high_close <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>high <span class="token operator">-</span> close<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    low_close <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>low <span class="token operator">-</span> close<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ranges <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>high_low<span class="token punctuation">,</span> high_close<span class="token punctuation">,</span> low_close<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    true_range <span class="token operator">=</span> ranges<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    atr <span class="token operator">=</span> true_range<span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> atr<span class="token keyword">def</span> <span class="token function">calculate_max_drawdown</span><span class="token punctuation">(</span>cumulative_returns<span class="token punctuation">)</span><span class="token punctuation">:</span>    portfolio_values <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> cumulative_returns    running_max <span class="token operator">=</span> portfolio_values<span class="token punctuation">.</span>cummax<span class="token punctuation">(</span><span class="token punctuation">)</span>    drawdowns <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> portfolio_values <span class="token operator">/</span> running_max    max_drawdown <span class="token operator">=</span> drawdowns<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max_drawdown<span class="token comment"># 从excel中加载数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'E:\\MZL.DCE豆粕主连.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 对时间进行格式化</span>data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ATP策略</span>N <span class="token operator">=</span> <span class="token number">14</span>    <span class="token comment"># ATR周期</span>M <span class="token operator">=</span> <span class="token number">1</span>     <span class="token comment"># ATR乘数</span><span class="token comment"># 计算ATR</span>data<span class="token punctuation">[</span><span class="token string">'ATR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> calculate_atr<span class="token punctuation">(</span>data<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token comment"># 计算上下轨</span>data<span class="token punctuation">[</span><span class="token string">'Upper_Track'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Open'</span><span class="token punctuation">]</span> <span class="token operator">+</span> M <span class="token operator">*</span> data<span class="token punctuation">[</span><span class="token string">'ATR'</span><span class="token punctuation">]</span>data<span class="token punctuation">[</span><span class="token string">'Lower_Track'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Open'</span><span class="token punctuation">]</span> <span class="token operator">-</span> M <span class="token operator">*</span> data<span class="token punctuation">[</span><span class="token string">'ATR'</span><span class="token punctuation">]</span><span class="token comment"># 初始化仓位</span>position <span class="token operator">=</span> <span class="token number">0</span>buy_signals<span class="token punctuation">,</span> sell_signals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>trades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 更新买入和卖出信号, 执行交易逻辑</span>data<span class="token punctuation">[</span><span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>data<span class="token punctuation">[</span><span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    row_today <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    row_yesterday <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># 回到市场收盘</span>    <span class="token keyword">if</span> row_today<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span> <span class="token operator">></span> row_yesterday<span class="token punctuation">[</span><span class="token string">'Upper_Track'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> position <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            buy_signals<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row_today<span class="token punctuation">[</span><span class="token string">'Upper_Track'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            position <span class="token operator">=</span> <span class="token number">1</span>             trades<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Trade_Type'</span><span class="token punctuation">:</span><span class="token string">'Buy'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">[</span><span class="token string">'Upper_Track'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 进入市场开盘</span>    <span class="token keyword">if</span> row_today<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> row_yesterday<span class="token punctuation">[</span><span class="token string">'Lower_Track'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> position <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            sell_signals<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row_today<span class="token punctuation">[</span><span class="token string">'Lower_Track'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            trades<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Trade_Type'</span><span class="token punctuation">:</span><span class="token string">'Sell'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">[</span><span class="token string">'Lower_Track'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 市场收盘，清空仓位</span>    <span class="token keyword">if</span> position <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> position <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            sell_signals<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row_today<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            trades<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Trade_Type'</span><span class="token punctuation">:</span><span class="token string">'Sell'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> position <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            buy_signals<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> row_today<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            trades<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Trade_Type'</span><span class="token punctuation">:</span><span class="token string">'Buy'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span>row_today<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        position <span class="token operator">=</span> <span class="token number">0</span>trades_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>trades<span class="token punctuation">)</span><span class="token comment"># 画出价格和突破点</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Close Price'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Upper_Track'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Upper Track'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Lower_Track'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Lower Track'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span>trade<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> trade <span class="token keyword">in</span> trades <span class="token keyword">if</span> trade<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Buy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trades_df<span class="token punctuation">[</span>trades_df<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Buy'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Price'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Buy Signal'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'^'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span>trade<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> trade <span class="token keyword">in</span> trades <span class="token keyword">if</span> trade<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Sell'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trades_df<span class="token punctuation">[</span>trades_df<span class="token punctuation">[</span><span class="token string">'Trade_Type'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Sell'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Price'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Sell Signal'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'v'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Prices and Buy and Sell Signals of ATR Strategy'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Price'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 确认买入卖出时机</span>buy_signals <span class="token operator">=</span> <span class="token punctuation">[</span>index <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Buy_Signal_Flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span>sell_signals <span class="token operator">=</span> <span class="token punctuation">[</span>index <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Sell_Signal_Flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>buy_signals<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sell_signals<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No enough buy and sell signals generated. Please check your data and strategy."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 确保卖出在买入之后，买入在卖出之前</span>    buy_signals_filtered <span class="token operator">=</span> <span class="token punctuation">[</span>idx <span class="token keyword">for</span> idx <span class="token keyword">in</span> buy_signals <span class="token keyword">if</span> idx <span class="token operator">&lt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span>sell_signals<span class="token punctuation">)</span><span class="token punctuation">]</span>    sell_signals_filtered <span class="token operator">=</span> <span class="token punctuation">[</span>idx <span class="token keyword">for</span> idx <span class="token keyword">in</span> sell_signals <span class="token keyword">if</span> idx <span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span>buy_signals_filtered<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 计算交易次数（每次买入信号到紧邻的卖出信号算一次交易）</span>    trade_count <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>buy_signals_filtered<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sell_signals_filtered<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 计算盈利次数</span>    profit_times <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>trade_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 找到当前买入点之后的第一个卖出点</span>        buy_price <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>buy_signals_filtered<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        sell_price <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sell_signals_filtered<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> sell_price <span class="token operator">></span> buy_price<span class="token punctuation">:</span>            <span class="token comment"># 如果卖出价高于买入价，说明这次交易盈利，投资成功</span>            profit_times <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 计算胜率</span>    win_rate <span class="token operator">=</span> profit_times <span class="token operator">/</span> trade_count<span class="token comment"># 根据清理后的数据计算累计收益率</span>data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumprod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token comment"># 确保数据都是有效的</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token operator">~</span>data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 计算最大回撤</span>max_drawdown <span class="token operator">=</span> calculate_max_drawdown<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 生成累计收益率图</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'Cumulative_Return'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Cumulative Return'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 计算夏普比率</span>risk_free_rate <span class="token operator">=</span> <span class="token number">0.03</span><span class="token operator">/</span><span class="token number">360</span> <span class="token comment"># 无风险利率假设为0.03</span>daily_return <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Return'</span><span class="token punctuation">]</span>daily_std <span class="token operator">=</span> daily_return<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span>average_daily_return <span class="token operator">=</span> daily_return<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>sharpe_ratio <span class="token operator">=</span> <span class="token punctuation">(</span>average_daily_return <span class="token operator">-</span> risk_free_rate<span class="token punctuation">)</span> <span class="token operator">/</span> daily_std <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">252</span><span class="token punctuation">)</span> <span class="token comment"># 创建Document对象</span>doc <span class="token operator">=</span> Document<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加业绩归因指标到文档中</span>doc<span class="token punctuation">.</span>add_heading<span class="token punctuation">(</span><span class="token string">'ATR strategy'</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Total number of trades: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>trade_count<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Total number of profitable trades: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>profit_times<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Win rate: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>win_rate<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">&#125;</span></span><span class="token string">%"</span></span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string">"The maximum drawdown : &#123;:.2%&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>max_drawdown<span class="token punctuation">)</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Sharpe Ratio: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sharpe_ratio<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 保存文档</span>doc<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"ATR_strategy.docx"</span><span class="token punctuation">)</span><span class="token comment"># 将数据写入Excel</span>data<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'ATR_strategy_output_data.xlsx'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Finance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Quantitative Investment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C implements data structures</title>
      <link href="/blog/2023/09/12/C-implements-data-structures/"/>
      <url>/blog/2023/09/12/C-implements-data-structures/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-c语言实现linked-list"><a href="#1-1-c语言实现linked-list" class="headerlink" title="1-1.c语言实现linked_list"></a>1-1.c语言实现linked_list</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// Definition of the linked_list structure.</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">linked_list</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token comment">// The data stored in the node.</span>    <span class="token keyword">struct</span> <span class="token class-name">linked_list</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">// Pointer to the next node.</span><span class="token punctuation">&#125;</span>linked_list<span class="token punctuation">;</span><span class="token comment">// Function to create a new linked_list node.</span>linked_list <span class="token operator">*</span><span class="token function">create_linked_list</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    linked_list <span class="token operator">*</span>new_linked_list <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>linked_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Allocate memory for the new node.</span>    new_linked_list<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">// Set the data.</span>    new_linked_list<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// Set the next pointer to NULL.</span>    <span class="token keyword">return</span> new_linked_list<span class="token punctuation">;</span> <span class="token comment">// Return the new node.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to insert a new node at the beginning of the list.</span><span class="token keyword">void</span> <span class="token function">insert_at_begin</span><span class="token punctuation">(</span>linked_list <span class="token operator">*</span><span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    linked_list <span class="token operator">*</span>new_linked_list <span class="token operator">=</span> <span class="token function">create_linked_list</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new node.</span>    new_linked_list<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token operator">*</span>head<span class="token punctuation">;</span> <span class="token comment">// Set the next pointer of the new node to the current head.</span>    <span class="token operator">*</span>head <span class="token operator">=</span> new_linked_list<span class="token punctuation">;</span> <span class="token comment">// Set the new node as the head of the list.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to insert a new node at the end of the list.</span><span class="token keyword">void</span> <span class="token function">insert_at_end</span><span class="token punctuation">(</span>linked_list <span class="token operator">*</span><span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    linked_list <span class="token operator">*</span>new_linked_list <span class="token operator">=</span> <span class="token function">create_linked_list</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new node.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">*</span>head <span class="token operator">=</span> new_linked_list<span class="token punctuation">;</span> <span class="token comment">// If the list is empty, set the new node as the head.</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    linked_list <span class="token operator">*</span>current <span class="token operator">=</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// Traverse to the end of the list.</span>    <span class="token punctuation">&#125;</span>    current<span class="token operator">-></span>next <span class="token operator">=</span> new_linked_list<span class="token punctuation">;</span> <span class="token comment">// Insert the new node at the end of the list.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to delete a node from the list.</span><span class="token keyword">void</span> <span class="token function">delete_linked_list</span><span class="token punctuation">(</span>linked_list <span class="token operator">*</span><span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    linked_list <span class="token operator">*</span>current <span class="token operator">=</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>    linked_list <span class="token operator">*</span>previous <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>data <span class="token operator">==</span> data<span class="token punctuation">)</span> <span class="token comment">// If the node to be deleted is found.</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">*</span>head <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// If the node to be deleted is the head, update the head.</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                previous<span class="token operator">-></span>next <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// Otherwise, bypass the node to be deleted.</span>            <span class="token punctuation">&#125;</span>            <span class="token function">free</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Free the memory of the deleted node.</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        previous <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// Move to the next node.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to print the list.</span><span class="token keyword">void</span> <span class="token function">print_list</span><span class="token punctuation">(</span>linked_list <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    linked_list <span class="token operator">*</span>current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// While there are nodes left.</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>current<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the data of the current node.</span>        current <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// Move to the next node.</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print a newline at the end.</span><span class="token punctuation">&#125;</span><span class="token comment">// Main function.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    linked_list <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// Initialize the head of the list to NULL.</span>    <span class="token function">insert_at_begin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Insert 1 at the beginning of the list.</span>    <span class="token function">insert_at_begin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Insert 2 at the beginning of the list.</span>    <span class="token function">insert_at_begin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Insert 3 at the beginning of the list.</span>    <span class="token function">insert_at_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Insert 4 at the end of the list.</span>    <span class="token function">insert_at_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Insert 5 at the end of the list.</span>    <span class="token function">print_list</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the list.</span>    <span class="token function">delete_linked_list</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Delete the node with data 4.</span>    <span class="token function">print_list</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the list after the deletion.</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Exit the program.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-c语言实现dynamic-array"><a href="#1-2-c语言实现dynamic-array" class="headerlink" title="1-2.c语言实现dynamic_array"></a>1-2.c语言实现dynamic_array</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// Define a dynamic array structure that stores an array and its size.</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">;</span><span class="token comment">// Pointer to an integer array.</span>    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span> <span class="token comment">// Size of the array</span><span class="token punctuation">&#125;</span> dynamic_array<span class="token punctuation">;</span><span class="token comment">// Fuction to create a new dynamic array.</span>dynamic_array<span class="token operator">*</span> <span class="token function">create_array</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dynamic_array<span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dynamic_array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Allocate memory for the dynamic array structure.</span>    arr<span class="token operator">-></span>array <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Allocate memory for the integer array inside the structure.</span>    arr<span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token comment">// Set the size of the array.</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span> <span class="token comment">// Return the pointer to the created dynamic array.</span><span class="token punctuation">&#125;</span><span class="token comment">// Fuction to read an element from dynamic array.</span><span class="token keyword">int</span> <span class="token function">read_array</span><span class="token punctuation">(</span>dynamic_array<span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token class-name">size_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>arr<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// If the index is within the bounds.</span>        <span class="token keyword">return</span> arr<span class="token operator">-></span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// Return the value at the specified index.</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error : index out of bounds: %d\n"</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Print error message.</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// Return -1 to indicate an error.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Fuction to update an element from a dynamic array.</span><span class="token keyword">void</span> <span class="token function">update_array</span><span class="token punctuation">(</span>dynamic_array<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>arr<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// If the index is within the bounds.</span>        arr<span class="token operator">-></span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token comment">// Update the value at the specified index.</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error : index out of bounds: %d\n"</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Print error message.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Fuction to delete a dynamic array.</span><span class="token keyword">void</span> <span class="token function">delete_array</span><span class="token punctuation">(</span>dynamic_array<span class="token operator">*</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token operator">-></span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Free the memory allocated for the integer array.</span>    <span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Free the memory allocated for the dynamic array structure.</span><span class="token punctuation">&#125;</span><span class="token comment">// main </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Create a new dynamic array</span>    dynamic_array<span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token function">create_array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Update the 5th element in the array with the value 100000.</span>    <span class="token function">update_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Read the 5th element from the array.</span>    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">read_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Print the value.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The value is : %d\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Delete the dynamic array.</span>    <span class="token function">delete_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// The program executed successfully.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-c语言实现hash"><a href="#1-3-c语言实现hash" class="headerlink" title="1-3 c语言实现hash"></a>1-3 c语言实现hash</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TABLE_SIZE</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token comment">// Define the structure for the hash table.</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">hash_table</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">// Size of the hash table.</span>    <span class="token keyword">int</span> num_elements<span class="token punctuation">;</span> <span class="token comment">// Number of elements in the hash table.</span>    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> keys<span class="token punctuation">;</span> <span class="token comment">// Array of keys.</span>    <span class="token keyword">int</span><span class="token operator">*</span> values<span class="token punctuation">;</span> <span class="token comment">// Array of values.</span><span class="token punctuation">&#125;</span> HashTable<span class="token punctuation">;</span><span class="token comment">// Function to initialize the hash table.</span>HashTable<span class="token operator">*</span> <span class="token function">init_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    HashTable<span class="token operator">*</span> table <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Allocate memory for the hash table.</span>    table<span class="token operator">-></span>size <span class="token operator">=</span> TABLE_SIZE<span class="token punctuation">;</span> <span class="token comment">// Set the size of the hash table.</span>    table<span class="token operator">-></span>num_elements <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Initialize the number of elements to 0.</span>    table<span class="token operator">-></span>keys <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>table<span class="token operator">-></span>size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Allocate memory for the keys.</span>    table<span class="token operator">-></span>values <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>table<span class="token operator">-></span>size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Allocate memory for the values.</span>    <span class="token comment">// Initialize all keys to NULL and all values to 0.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> table<span class="token operator">-></span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        table<span class="token operator">-></span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        table<span class="token operator">-></span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> table<span class="token punctuation">;</span> <span class="token comment">// Return the initialized hash table.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to compute the hash code for the given key.</span><span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">+</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> TABLE_SIZE<span class="token punctuation">;</span> <span class="token comment">// Compute the hash code.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> hash<span class="token punctuation">;</span> <span class="token comment">// Return the hash code.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to insert a key-value pair into the hash table.</span><span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>HashTable<span class="token operator">*</span> table<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Compute the hash code.</span>    <span class="token comment">// Find an empty slot or a slot containing the same key.</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> table<span class="token operator">-></span>size<span class="token punctuation">;</span> <span class="token comment">// Linear probing.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token operator">-></span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        table<span class="token operator">-></span>num_elements<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// Increase the number of elements.</span>    <span class="token punctuation">&#125;</span>    table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span> <span class="token comment">// Store the key.</span>    table<span class="token operator">-></span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// Store the value.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to retrieve the value for a given key.</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>HashTable<span class="token operator">*</span> table<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Compute the hash code.</span>    <span class="token comment">// Find the slot containing the key.</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> table<span class="token operator">-></span>size<span class="token punctuation">;</span> <span class="token comment">// Linear probing.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// If the key is not found, return -1.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> table<span class="token operator">-></span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Return the corresponding value.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to remove a key-value pair from the hash table.</span><span class="token keyword">void</span> <span class="token function">remove_key</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Compute the hash code.</span>    <span class="token comment">// Find the slot containing the key.</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> table<span class="token operator">-></span>size<span class="token punctuation">;</span> <span class="token comment">// Linear probing.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token comment">// If the key is not found, do nothing.</span>    <span class="token punctuation">&#125;</span>    table<span class="token operator">-></span>keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// Remove the key.</span>    table<span class="token operator">-></span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Remove the value.</span>    table<span class="token operator">-></span>num_elements<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// Decrease the number of elements.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to compute the load factor of the hash table.</span><span class="token keyword">float</span> <span class="token function">load_factor</span><span class="token punctuation">(</span>HashTable<span class="token operator">*</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>table<span class="token operator">-></span>num_elements <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>table<span class="token operator">-></span>size<span class="token punctuation">;</span> <span class="token comment">// Load factor is the ratio of the number of elements to the size of the hash table.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to get the number of elements in the hash table.</span><span class="token keyword">int</span> <span class="token function">num_elements</span><span class="token punctuation">(</span>HashTable<span class="token operator">*</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> table<span class="token operator">-></span>num_elements<span class="token punctuation">;</span> <span class="token comment">// Return the number of elements.</span><span class="token punctuation">&#125;</span><span class="token comment">// Main function.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    HashTable<span class="token operator">*</span> table <span class="token operator">=</span> <span class="token function">init_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Initialize a new hash table.</span>    <span class="token comment">// Insert three key-value pairs into the hash table.</span>    <span class="token function">put</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">put</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">put</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Print the number of elements and the load factor.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number of elements: %d\n"</span><span class="token punctuation">,</span> <span class="token function">num_elements</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Load factor: %.2f\n"</span><span class="token punctuation">,</span> <span class="token function">load_factor</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Print the value of each key.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of key1: %d\n"</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of key2: %d\n"</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of key3: %d\n"</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Remove a key from the hash table.</span>    <span class="token function">remove_key</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Print the number of elements and the load factor after removing a key.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number of elements after removing a key: %d\n"</span><span class="token punctuation">,</span> <span class="token function">num_elements</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Load factor after removing a key: %.2f\n"</span><span class="token punctuation">,</span> <span class="token function">load_factor</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Print the value of the removed key.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of key2 after removing it: %d\n"</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Exit the program.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-c语言实现stack"><a href="#1-4-c语言实现stack" class="headerlink" title="1-4 c语言实现stack"></a>1-4 c语言实现stack</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STACK_SIZE</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">// Define the maximum size of the stack.</span></span><span class="token comment">// Definition of the Stack structure.</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>STACK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Array to hold the stack elements.</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span> <span class="token comment">// Index of the top element in the stack.</span><span class="token punctuation">&#125;</span> Stack<span class="token punctuation">;</span><span class="token comment">// Function to initialize a stack.</span><span class="token keyword">void</span> <span class="token function">init_stack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">-></span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Set the index of the top element to -1 indicating an empty stack.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to check if the stack is empty.</span><span class="token keyword">int</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> stack<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Returns 1 if stack is empty, 0 otherwise.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to check if the stack is full.</span><span class="token keyword">int</span> <span class="token function">is_full</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> stack<span class="token operator">-></span>top <span class="token operator">==</span> STACK_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Returns 1 if stack is full, 0 otherwise.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to push a new element onto the stack.</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_full</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Stack is full\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If the stack is full, print an error message and return.</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    stack<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// Increment the top index.</span>    stack<span class="token operator">-></span>data<span class="token punctuation">[</span>stack<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// Insert the new element at the new top index.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to pop an element from the stack.</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_empty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Stack is empty\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If the stack is empty, print an error message and return -1.</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> stack<span class="token operator">-></span>data<span class="token punctuation">[</span>stack<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Store the top element.</span>    stack<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// Decrement the top index.</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token comment">// Return the popped element.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to return the top element of the stack without removing it.</span><span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_empty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Stack is empty\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If the stack is empty, print an error message and return -1.</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stack<span class="token operator">-></span>data<span class="token punctuation">[</span>stack<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Return the top element.</span><span class="token punctuation">&#125;</span><span class="token comment">// main function.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Stack s<span class="token punctuation">;</span> <span class="token comment">// Declare a stack.</span>    <span class="token function">init_stack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Initialize the stack.</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Push 1 onto the stack.</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Push 2 onto the stack.</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Push 3 onto the stack.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pop the top element from the stack and print it.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the top element of the stack.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print 1 if the stack is empty, 0 otherwise.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">is_full</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print 1 if the stack is full, 0 otherwise.</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Exit the program.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5-c语言实现graph"><a href="#1-5-c语言实现graph" class="headerlink" title="1-5 c语言实现graph"></a>1-5 c语言实现graph</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_NODES</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">// Define the maximum number of nodes in the graph.</span></span><span class="token comment">// Define the Node structure.</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token comment">// Value of the node.</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">// Pointer to the next node in the adjacency list.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Define the Graph structure.</span><span class="token keyword">struct</span> <span class="token class-name">Graph</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">;</span> <span class="token comment">// Number of nodes in the graph.</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>adjLists<span class="token punctuation">[</span>MAX_NODES<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Array of pointers to the adjacency lists of the nodes.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Function to create a new Graph.</span><span class="token keyword">struct</span> <span class="token class-name">Graph</span> <span class="token operator">*</span><span class="token function">createGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Graph</span> <span class="token operator">*</span>graph <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Graph</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Graph</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Allocate memory for a new graph.</span>    graph<span class="token operator">-></span>numNodes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Initialize the number of nodes to 0.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> MAX_NODES<span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        graph<span class="token operator">-></span>adjLists<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// Initialize all adjacency lists to NULL.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> graph<span class="token punctuation">;</span> <span class="token comment">// Return the new graph.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to add a Node to a Graph.</span><span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Graph</span> <span class="token operator">*</span>graph<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Allocate memory for a new node.</span>    node<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">// Set the node's data.</span>    node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// Initialize the next pointer to NULL.</span>    graph<span class="token operator">-></span>adjLists<span class="token punctuation">[</span>graph<span class="token operator">-></span>numNodes<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span> <span class="token comment">// Add the node to the graph and increment the number of nodes.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to add an Edge to a Graph.</span><span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Graph</span> <span class="token operator">*</span>graph<span class="token punctuation">,</span><span class="token keyword">int</span> src<span class="token punctuation">,</span><span class="token keyword">int</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>srcNode <span class="token operator">=</span> graph<span class="token operator">-></span>adjLists<span class="token punctuation">[</span>src<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Find the source node.</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>destNode <span class="token operator">=</span> graph<span class="token operator">-></span>adjLists<span class="token punctuation">[</span>dest<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Find the destination node.</span>    srcNode<span class="token operator">-></span>next <span class="token operator">=</span> destNode<span class="token punctuation">;</span> <span class="token comment">// Add the destination node to the source node's adjacency list.</span><span class="token punctuation">&#125;</span><span class="token comment">// main function to test the graph functions.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Graph</span> <span class="token operator">*</span>graph <span class="token operator">=</span> <span class="token function">createGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new graph.</span>    <span class="token function">addNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add node 0 to the graph.</span>    <span class="token function">addNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add node 1 to the graph.</span>    <span class="token function">addNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add node 2 to the graph.</span>    <span class="token function">addNode</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add node 3 to the graph.</span>    <span class="token function">addEdge</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add an edge from node 0 to node 1.</span>    <span class="token function">addEdge</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add an edge from node 0 to node 2.</span>    <span class="token function">addEdge</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add an edge from node 1 to node 2.</span>    <span class="token function">addEdge</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add an edge from node 2 to node 3.</span>    <span class="token comment">// Print the adjacency lists of the nodes.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>index <span class="token operator">&lt;</span> graph<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>curr_node <span class="token operator">=</span> graph<span class="token operator">-></span>adjLists<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Adjacency list for node %d:"</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr_node<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d -> "</span><span class="token punctuation">,</span>curr_node<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the node's data.</span>            curr_node <span class="token operator">=</span> curr_node<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// Move to the next node in the adjacency list.</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NULL\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// End of the adjacency list.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6-c语言实现prefect-brinay-tree"><a href="#1-6-c语言实现prefect-brinay-tree" class="headerlink" title="1-6 c语言实现prefect_brinay_tree"></a>1-6 c语言实现prefect_brinay_tree</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// Define the TreeNode structure.</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token comment">// Value of the node.</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>left<span class="token punctuation">;</span> <span class="token comment">// Pointer to the left child.</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>right<span class="token punctuation">;</span> <span class="token comment">// Pointer to the right child.</span><span class="token punctuation">&#125;</span> TreeNode<span class="token punctuation">;</span><span class="token comment">// Function to create a new TreeNode.</span>TreeNode<span class="token operator">*</span> <span class="token function">createnode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Allocate memory for a new node.</span>    node<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">// Set the node's data.</span>    node<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// Initialize the left child pointer to NULL.</span>    node<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// Initialize the right child pointer to NULL.</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span> <span class="token comment">// Return the new node.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to create a perfect binary tree from a sorted array.</span>TreeNode<span class="token operator">*</span> <span class="token function">createPrefectBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// If the array is empty, return NULL.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Find the middle element of the array.</span>    TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">createnode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new node with the middle element.</span>    node<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">createPrefectBinaryTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>start<span class="token punctuation">,</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Recursively create the left subtree.</span>    node<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">createPrefectBinaryTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Recursively create the right subtree.</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span> <span class="token comment">// Return the root node of the tree.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to traverse a binary tree in pre-order (root, left, right).</span><span class="token keyword">void</span> <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// If the tree is empty, return.</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>root<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the root node's data.</span>    <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Recursively traverse the left subtree.</span>    <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Recursively traverse the right subtree.</span><span class="token punctuation">&#125;</span><span class="token comment">// main function to test the binary tree functions.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// Sorted array to be converted to a binary tree.</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Size of the array.</span>    TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token function">createPrefectBinaryTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a perfect binary tree from the array.</span>    <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Traverse the binary tree in pre-order and print the nodes.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-7-c语言实现queue"><a href="#1-7-c语言实现queue" class="headerlink" title="1-7 c语言实现queue"></a>1-7 c语言实现queue</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUEUE_SIZE</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">// Define the maximum size of the queue.</span></span><span class="token comment">// Definition of the Queue structure.</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>QUEUE_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Array to hold the queue elements.</span>    <span class="token keyword">int</span> head<span class="token punctuation">;</span> <span class="token comment">// Index of the front element in the queue.</span>    <span class="token keyword">int</span> tail<span class="token punctuation">;</span> <span class="token comment">// Index of the rear element in the queue.</span><span class="token punctuation">&#125;</span>Queue<span class="token punctuation">;</span><span class="token comment">// Function to initialize a queue.</span><span class="token keyword">void</span> <span class="token function">init_queue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Set the index of the front element to 0.</span>    queue<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Set the index of the rear element to 0.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to check if the queue is empty.</span><span class="token keyword">int</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> queue<span class="token operator">-></span>head <span class="token operator">==</span> queue<span class="token operator">-></span>tail<span class="token punctuation">;</span> <span class="token comment">// Returns 1 if queue is empty, 0 otherwise.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to check if the queue is full.</span><span class="token keyword">int</span> <span class="token function">is_full</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> queue<span class="token operator">-></span>head <span class="token operator">==</span> QUEUE_SIZE<span class="token punctuation">;</span> <span class="token comment">// Returns 1 if queue is full, 0 otherwise.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to add an element to the end of the queue.</span><span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_full</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: queue is full.\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If the queue is full, print an error message and return.</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    queue<span class="token operator">-></span>data<span class="token punctuation">[</span>queue<span class="token operator">-></span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// Insert the new element at the end of the queue.</span>    queue<span class="token operator">-></span>tail<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// Increment the tail index.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to remove an element from the front of the queue.</span><span class="token keyword">int</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_empty</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: queue is empty.\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If the queue is empty, print an error message and return -1.</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> queue<span class="token operator">-></span>data<span class="token punctuation">[</span>queue<span class="token operator">-></span>head<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Store the front element.</span>    queue<span class="token operator">-></span>head<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// Increment the head index.</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token comment">// Return the removed element.</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to return the front element of the queue without removing it.</span><span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_empty</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: queue is empty.\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If the queue is empty, print an error message and return -1.</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> queue<span class="token operator">-></span>data<span class="token punctuation">[</span>queue<span class="token operator">-></span>head<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Return the front element.</span><span class="token punctuation">&#125;</span><span class="token comment">// main function to test the queue.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Queue q<span class="token punctuation">;</span> <span class="token comment">// Declare a queue.</span>    <span class="token function">init_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Initialize the queue.</span>    <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add 5 to the queue.</span>    <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add 10 to the queue.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Remove the front element from the queue and print it.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> program </tag>
            
            <tag> data Structure and alagorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Base</title>
      <link href="/blog/2023/09/06/Java-Base/"/>
      <url>/blog/2023/09/06/Java-Base/</url>
      
        <content type="html"><![CDATA[<h1 id="认识Java"><a href="#认识Java" class="headerlink" title="认识Java"></a>认识Java</h1><h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>学Java前需要学C，至少学到结构体，C语言课程是基础。</p><p>指针、算法、数据结构不好也没关系，这篇文章主要是介绍基础，对c语言的要求不算很高。</p><p>另外，本文章用的java编译器是Intellij IDEA，版本是2021.1.1。<img src="../Java-Base/Intellij-IDEA.png" alt="Intellij IDEA"></p><h1 id="0-0-java-idea安装"><a href="#0-0-java-idea安装" class="headerlink" title="0.0 java idea安装"></a>0.0 java idea安装</h1><p>Java SE 9 安装下载路径：<a href="http://www.oracle.com/java/technologies/javase/javase9-archive-downloads.html">http://www.oracle.com/java/technologies/javase/javase9-archive-downloads.html</a></p><p>JDK安装方法：</p><blockquote><p><code>新建系统变量：</code><br>JAVA_HOME（路径取jdk绝对路径）<br><code>在系统变量Path后面追加：</code><br>%JAVA_HOME%\bin<br>%JAVA_HOME%\jre\bin<br><code>添加classpath：</code><br>CLASSPATH<br>.<br>%JAVA_HOME%\lib\dt.jar<br>%JAVA_HOME%\lib\tools.jar<br><code>验证：</code><br>cmd控制台代码：javac -version<br>IDE:Interllij IDEA;JetBrains<br>(注意：mac苹果电脑下载dmg文件。Windows下载exe文件)</p></blockquote><h1 id="0-1-Java的执行过程"><a href="#0-1-Java的执行过程" class="headerlink" title="0-1 Java的执行过程"></a>0-1 Java的执行过程</h1><p>对比Java与C构建模式</p><table><thead><tr><th>JAVA</th><th>C</th></tr></thead><tbody><tr><td>java执行时会生成<code>.class</code>文件</td><td>C执行的时候会生成<code>.exe</code>文件（win）</td></tr><tr><td>java要运行必须有jdk、jre和jvm</td><td>C执行的时候不需要这些文件</td></tr><tr><td>java<code>.class</code>跨平台效果好</td><td>C<code>.exe</code>跨平台效果不好（win）</td></tr></tbody></table><ul><li><strong>jdk(Java Development Kit)：</strong> java程序开发工具包</li><li><strong>jre(Java runtime environment)：</strong> java运行环境</li><li><strong>jvm(Java Virtual Machine)：</strong> java虚拟机</li></ul><p>console代码</p><table><thead><tr><th align="center">代码</th><th align="center">注释</th></tr></thead><tbody><tr><td align="center">javac 文件名.java</td><td align="center">将java文件编译成class文件</td></tr><tr><td align="center">java 文件名</td><td align="center">运行java文件（必须是class文件）</td></tr><tr><td align="center">java 文件名.java</td><td align="center">运行java文件</td></tr></tbody></table><p>注意：class文件又称字节码文件</p><h1 id="0-2-package"><a href="#0-2-package" class="headerlink" title="0-2 package"></a>0-2 package</h1><p><code>Java package</code> 如同文件夹一样，工程文件主要分为<code>idea</code>、<code>out</code>、<code>src</code>、<code>web</code>四个大包</p><p><strong>1.idea文件夹</strong></p><ul><li><code>.idea</code>存放项目的配置信息，包括历史记录，版本控制信息等</li></ul><p><strong>2.iml文件夹</strong></p><ul><li><code>iml</code>(infomation of module)是IntelliJ IDEA 自动创建的模块文件</li><li>用于Java应用开发，存储一些模块开发相关的信息，还可能会存储一 些模块路径信息， 依赖信息以及别的一些设置</li></ul><p><strong>3.src文件夹</strong></p><ul><li>即<code>source</code>，存放的是项目的源文件(.java后缀与配置文件)</li><li>分成几个包的目的：对代码的优化、实现高聚合、低耦合特点、便于以后的扩展和更改</li></ul><p><strong>4.External Libraries</strong></p><ul><li>Java外部库</li></ul><p><strong>5.Scratches and Consoles</strong></p><ul><li>Intellij IDEA 提供了两种临时的文件编辑环境，两种 Scratches 分别是<code>Scratch files</code> 和 <code>Scratch buffers</code></li></ul><blockquote><p>Scratch files ：Scratch files 有着完整的运行和 debug 功能等等，这些文件需要指定编程语言类型并且指定后缀。<br>Scratch buffers : Scratch buffers仅仅是为了简单的编辑记录，所以不需要指定编程语言并且指定后缀，默认文件类型是 .txt。需要注意的是，Scratch buffers最多只能创建 5 个，超过 5 个将开始重用以前的，并且以前文件的内容会被重置。</p></blockquote><p><strong>6.项目视图</strong><br>默认是将<code>package</code>层级以简洁显示的,非精简模式</p><p><img src="../Java-Base/%E7%AE%80%E6%B4%81%E6%A8%A1%E5%BC%8F.png" alt="简洁模式"><br>对<code>packages</code>单击右键，点击<code>Compact Middle Packages</code>即可切换成精简模式</p><p><img src="../Java-Base/%E7%B2%BE%E7%AE%80%E6%A8%A1%E5%BC%8F.png" alt="精简模式"><br><img src="../Java-Base/%E7%B2%BE%E7%AE%80%E6%A8%A1%E5%BC%8F%E7%A4%BA%E4%BE%8B.png" alt="精简模式示例"></p><h1 id="0-3-第一个程序的讲解"><a href="#0-3-第一个程序的讲解" class="headerlink" title="0-3 第一个程序的讲解"></a>0-3 第一个程序的讲解</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>microsoft<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span> <span class="token comment">//定位你的Java代码放在src文件夹下的位置</span><span class="token comment">//公共的  类   类名（开头字母必须大写和文件名相同）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span>         <span class="token comment">//mian函数的固定格式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//语句</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//java函数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> number_a<span class="token punctuation">,</span><span class="token keyword">int</span> number_b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> number_a<span class="token operator">+</span>number_    <span class="token punctuation">&#125;</span>    <span class="token comment">//函数的调用和C是一样的</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ctrl+alt+v</code> 在调用函数的时候自动生成变量</p><p><code>.soutv</code> 打印最靠近的变量，也可以是你自己选定的变量</p><h1 id="0-4-注释和文档"><a href="#0-4-注释和文档" class="headerlink" title="0-4 注释和文档"></a>0-4 注释和文档</h1><p><strong>1.基本注释</strong></p><ul><li>和C语言一样有单行注释和段落注释</li><li>单行注释 <code>// ……</code></li><li>多行注释 <code>/* ...... */</code> 注释内容不会出现在javadoc 生成的文档中</li></ul><p><strong>2.方法注释和类注释</strong></p><ul><li>即文档注释 : <code>/** ...... */</code> 注释内容写入javadoc生成的文档</li><li>注释格式<code>/** ...... */</code>里面的内容有介绍函数，还有方法中用到的参数和返回值</li><li>这个可以快速生成一个方法文档（想要生成文档可以在快捷键里查doc）</li><li>IntelliJ IDEA 里查看一个函数注释的方法是 <code>ctrl+q</code></li></ul><h1 id="0-5-字符串演示"><a href="#0-5-字符串演示" class="headerlink" title="0-5 字符串演示"></a>0-5 字符串演示</h1><p><strong>C语言如何定义字符串?</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Java如何定义字符串?</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>                 <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>String</code>是java中定义字符串的类，方便快捷，使用面向对象的方式还有很多骚操作</li><li>获取字符串长度：<code>字符串名.length()</code></li><li>使用<code>.concat()</code>连接字符串</li><li>使用<code>+</code>连接字符串</li></ul><h1 id="0-6-字符串结束符"><a href="#0-6-字符串结束符" class="headerlink" title="0-6 字符串结束符"></a>0-6 字符串结束符</h1><p><strong>C语言种的字符串是怎样的？</strong></p><ul><li>C语言中没有专门的字符串变量，通常用一个字符数组来存放一个字符串</li><li>字符串本质上就是以<code>&#39;\0&#39;</code>作为结尾的特殊字符数组</li><li>因此当把一个字符串存入一个数组时，也把结束符 <code>&#39;\0&#39;</code>存入数组，并以此作为该字符串是否结束的标志</li></ul><p><strong>为什么Java里没有&#x2F;0？</strong></p><ul><li>严格控制字符串，防止内存泄漏</li><li>这是Java为了保护程序以及开发者友好，强制并自动为我们加了<code>&#39;\0&#39;</code></li></ul><h1 id="0-7-自动类型"><a href="#0-7-自动类型" class="headerlink" title="0-7 自动类型"></a>0-7 自动类型</h1><p><strong>自动类型转换</strong></p><ul><li>整型、实型（常量）、字符型数据可以混合运算</li><li>运算中，不同类型的数据先转化为同一类型，然后进行运算</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">低  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>  高<span class="token keyword">byte</span><span class="token punctuation">,</span><span class="token keyword">short</span><span class="token punctuation">,</span><span class="token keyword">char</span>—<span class="token operator">></span> <span class="token keyword">int</span> —<span class="token operator">></span> <span class="token keyword">long</span>—<span class="token operator">></span> <span class="token keyword">float</span> —<span class="token operator">></span> <span class="token keyword">double</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="0-8-import导包和API文档"><a href="#0-8-import导包和API文档" class="headerlink" title="0-8 import导包和API文档"></a>0-8 import导包和API文档</h1><blockquote><ul><li><code>import</code>和C中的<code>#include</code>一样，导入一些自带的方法</li><li>有一些包中的函数是不需要导入的，使用同一个<code>package</code>下的包不需要<code>import</code></li><li><code>java.lang.*</code>是java默认自带的</li></ul></blockquote><p>java文档中常用的包</p><table><thead><tr><th align="center">包名</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">java.io</td><td align="center">通过数据流，序列化和文件系统提供输入和输出</td></tr><tr><td align="center">java.lang</td><td align="center">提供利用Java语言设计的基础类</td></tr><tr><td align="center">java.math</td><td align="center">提供进行算法的类</td></tr><tr><td align="center">java.text</td><td align="center">处理文本、日期、数字和消息类和接口</td></tr><tr><td align="center">java.util</td><td align="center">各种实用的工具类</td></tr></tbody></table><p>java 9 document文档网址：<a href="http://docs.oralce.com/javase/9/docs/api/index.html?overview-summerary.html">http://docs.oralce.com/javase/9/docs/api/index.html?overview-summerary.html</a></p><h1 id="0-9-Java中的数组"><a href="#0-9-Java中的数组" class="headerlink" title="0-9 Java中的数组"></a>0-9 Java中的数组</h1><p>对比C和Java静态数组定义方式</p><table><thead><tr><th>定义方式</th><th>Java</th><th>C</th></tr></thead><tbody><tr><td>初始化法</td><td><code>int[ ] arr =&#123;1,2,3&#125;</code></td><td><code>int arr [] = &#123;1,2,3&#125;</code></td></tr><tr><td>分配空间法</td><td><code>Type[] arr=new Type[size]</code></td><td><code>int arr[size]</code></td></tr></tbody></table><p>普通的静态数组有缺陷：长度是固定的，不能扩容，没有灵活性</p><p>注意： <strong><code>String</code>的length带括号，数组里的length不带括号</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>增强for循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span> arr_2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> element<span class="token operator">:</span>myList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0-10-Arrays"><a href="#0-10-Arrays" class="headerlink" title="0-10 Arrays"></a>0-10 Arrays</h1><p>提供方法对数组进行操作</p><p>例如：排序<code>sort()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr_1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">1111</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">1235</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token operator">:</span>arr_1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>element <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：二分查找 <code>Arrays.binarySearch(arr_1,6)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> result_index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr_1<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result_index = "</span> <span class="token operator">+</span> result_index<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相同顺序下，数组是否相等<code>Arrays.equals(arr_1, arr_2)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr_1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr_1<span class="token punctuation">,</span> arr_2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0-11-函数和方法"><a href="#0-11-函数和方法" class="headerlink" title="0-11 函数和方法"></a>0-11 函数和方法</h1><p><strong>什么是方法?</strong></p><ul><li>Java方法是语句的集合，它们在一起执行一个功能</li><li>方法和C里的函数是一模一样的</li></ul><blockquote><p><strong>参考：</strong></p><ul><li><strong><a href="https://www.runoob.com/java/java-methods.html?_t_t_t=0.9364758810464391">Java 方法-菜鸟教程</a></strong></li></ul></blockquote><h1 id="0-12-方法的重载"><a href="#0-12-方法的重载" class="headerlink" title="0-12 方法的重载"></a>0-12 方法的重载</h1><p>方法名相同，参数个数或者参数类型不同</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>microsoft<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> main <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> value <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1.2</span> <span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum = "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> sum <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> sum <span class="token punctuation">(</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，引导部分到此结束，下面就是java语言面向对象的部分，这些内容也算是基于我学习java过程中的总结与整合而来的笔记，希望对大家有帮助。</p><h1 id="OOP上半部分"><a href="#OOP上半部分" class="headerlink" title="OOP上半部分"></a>OOP上半部分</h1><h1 id="1-1-1-问题产生和引导"><a href="#1-1-1-问题产生和引导" class="headerlink" title="1-1-1 问题产生和引导"></a>1-1-1 问题产生和引导</h1><p>假设有一个养狗系统</p><table><thead><tr><th>面向过程</th><th>面向对象</th></tr></thead><tbody><tr><td>流水线</td><td>模块化</td></tr><tr><td>一件事”该怎么做”</td><td>一件事”该让谁来做”</td></tr><tr><td>狗饿了，狗吃了食物</td><td>属性:狗、食物、饿；动作:狗吃食物</td></tr><tr><td>强调的是“吃”，“狗”只是一个参数</td><td>强调的是“狗”，“吃”只是一个动作</td></tr></tbody></table><p>一件事“该让谁来做”，那个“谁”就是对象，他要怎么做是他自己的事，最后一群对象合力能把事做好了</p><h1 id="1-1-2-对象"><a href="#1-1-2-对象" class="headerlink" title="1-1-2 对象"></a>1-1-2 对象</h1><p><strong>首先我们要明白什么是对象？</strong></p><ul><li>根据词典指行动或思考时作为目标的事物</li><li>简单来说就是你现在所干的事情的目标是为了啥</li></ul><h1 id="1-1-3-变换思维"><a href="#1-1-3-变换思维" class="headerlink" title="1-1-3 变换思维"></a>1-1-3 变换思维</h1><p><strong>思考什么是过程？</strong></p><ul><li>第一步怎么做，第二步怎么做，接着怎么做……最后怎么做(return 0)</li><li>走一步看一步，目标不明确，我们不可能把所有过程写一遍，不适用于大众</li></ul><p><strong>面向过程编程：（POP：Procedure Oriented Programming）</strong></p><ul><li>分析解决问题所需要的步骤，然后用函数把这些一步步实现，使用的时候按顺序依次调用</li><li>代码线性，严格按着顺序，侧重解决步骤，着眼局部或者具体</li></ul><p><strong>面向对象编程：（OOP：Object Oriented Programming）</strong></p><ul><li>该程序，要大众化</li><li>明确目标吗，对象就是目标，目标就是对象</li><li>不强调过程</li></ul><h1 id="1-1-4-规划明确目标站在更高层次思考问题"><a href="#1-1-4-规划明确目标站在更高层次思考问题" class="headerlink" title="1-1-4 规划明确目标站在更高层次思考问题"></a>1-1-4 规划明确目标站在更高层次思考问题</h1><p><strong>明确目标</strong></p><ul><li>计划、规划 设计它</li><li>当你执行完计划时候，达到目标</li><li>OOP:站在更高的层次看待事物</li></ul><h1 id="1-1-5-上代码，设计体验面向对象编程，实例和对象"><a href="#1-1-5-上代码，设计体验面向对象编程，实例和对象" class="headerlink" title="1-1-5 上代码，设计体验面向对象编程，实例和对象"></a>1-1-5 上代码，设计体验面向对象编程，实例和对象</h1><p><strong>首先我们要明白什么是对象(实例)？</strong></p><ul><li>根据词典指行动或思考时作为目标的事物，简单来说就是你现在所干的事情的目标</li><li>显示生活的一个东西，对抽象的东西进行表示出来的产物，是一个活生生存在的事物，它是唯一的</li></ul><p>现在要制作一个What‘s Animal 的软件，那这里面所有的对象就是大家会养的宠物，比如猫猫狗狗等</p><p>这个时候就比如设置一个狗<code>Dogs</code>的类(class)，这个class就是一个狗的基础模型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dogs</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> variety<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> food<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat food"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>myDog</code> 就是一个对象(实例)了，当我们看到 <code>myDog</code> 的时候只会觉得这是一只狗，但是我们不能知道它具体的样子，我们就要继续对这个狗进行描述操作，然后它就会浮现出一个具体的样子，然后在另外一个<code>main()</code>方法里面<code>new</code>一个<code>Dogs</code>对象(实例)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> main <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Dogs</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myDog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>        myDog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        myDog<span class="token punctuation">.</span>variety <span class="token operator">=</span> <span class="token string">"哈士奇"</span><span class="token punctuation">;</span>        myDog<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../Java-Base/DOG.png" alt="DOG"></p><h1 id="1-1-6-成员变量行为类和this"><a href="#1-1-6-成员变量行为类和this" class="headerlink" title="1-1-6 成员变量行为类和this"></a>1-1-6 成员变量行为类和this</h1><p><strong>在了解什么是属性的时候，我们先思考什么是类(class)？</strong></p><ul><li>我比较倾向把它理解成<strong>分类</strong>的类，回到What‘s Animal 这个软件当中</li><li>软件中有很多的宠物，很多类型的宠物，有猫、狗、猪等等，那我们最好的分类方式就是对不同的动物分类</li></ul><p>这样我们就去创建一个<code>Dogs</code>类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dogs</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>什么是属性(共性、特性)？</strong></p><ul><li>属性是事物的性质与事物之间关系的统称。</li><li>事物的性质——事物的形状、颜色、气味、善恶、优劣、用途等</li><li>事物的关系——大于、小于、压迫、反抗、朋友、热爱、同盟、矛盾等</li><li>任何属性都是属于某种对象的</li></ul><p>类当中的变量和方法都称为属性(共性、特性)或者成员变量，它们组成和构成了类，所以我们这么命令，它们是类的重要组成部分</p><p>例如同一类动物的特征有身高、体重、毛皮颜色等，会作出吃饭、睡觉等行为，这些特征和行为就是属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dogs</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> variety<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> food<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些方法(函数)在类中叫行为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat food"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>this 是啥？</strong></p><ul><li>当我们在做英语阅读理解的时候，会看到一种题目叫做文中的xx段xx行的this代表指代的是前文的啥？</li><li>那这个问题就和这个阅读理解一样，计算机在做英语的阅读理解啦，计算机一般比我们聪明些总是能正确的回答</li><li>this的中文意思是“这个”，当我创建好一个对象，并且将它实例化以后，我使用这个对象进行一个操作<code>myDog.sleep()</code>：</li></ul><p><img src="../Java-Base/myDog.sleep%EF%BC%88%EF%BC%89.png" alt="myDog.sleep（）"><br>这个时候回到类里 <code>sleep()</code> 这个方法里，里面有一个<code>this</code>，那很显然这个 <code>this</code> 调用的就是 <code>myDog</code> ，那 <code>myDog.name</code> 不就是Tom嘛</p><p>要是我的英语阅读理解题有这么简单就好了</p><h1 id="1-1-7-注销账户和null空指针异常"><a href="#1-1-7-注销账户和null空指针异常" class="headerlink" title="1-1-7 注销账户和null空指针异常"></a>1-1-7 注销账户和null空指针异常</h1><p>使用软件要进行账户的注册，我们姑且把账户注册等同于制造一个新的对象</p><p>填写完注册信息之后，我们就变成了一个实例，假如我们想注销，这个过程就会把我们的信息从软件上抹去</p><p>这个时候我们对代码进行这样的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> main <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Dogs</span> zhangDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangDog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>        zhangDog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        zhangDog<span class="token punctuation">.</span>variety <span class="token operator">=</span> <span class="token string">"哈士奇"</span><span class="token punctuation">;</span>        <span class="token comment">//张大爷想注销账户</span>        zhangDog <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zhangDog.name = "</span> <span class="token operator">+</span> zhangDog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注销之后如果你就找不到张大爷了！空指针异常啦<br><img src="../Java-Base/%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8.png" alt="空指针异常"><br><code>zhangDog</code>相当于一个指针，在内存里指向对象，注销后，指针就指向了一块空的区域，接下来讲说明如果解决这个问题</p><h1 id="1-2-1-OOP封装"><a href="#1-2-1-OOP封装" class="headerlink" title="1-2-1 OOP封装"></a>1-2-1 OOP封装</h1><p><strong>为什么要进行封装？</strong></p><ul><li>如果狗的年龄被改成-30怎么办？这不是出错了吗，或者如果没封装起来，我岂不是可以修改支付宝余额为9999999</li><li>OOP的封装也是如此，我们在一些类里已经写好了很多功能，用户在使用的过程中，不需要理会在类里面写了什么，只要根据自己想实现的功能使用就可以了</li></ul><p><strong>那OOP是如何封装的呢？</strong></p><ul><li>首先我们要明白一个道理就是，数据库的原理对设计它的公司来说是私密的，那我们在封装的过程中也要将变量变成私密的</li></ul><p>但这个时候<code>main()</code>就会出现错误提示<br><img src="../Java-Base/%E5%B0%81%E8%A3%85.png" alt="封装"><br>那我们就无法操作这个类的属性了，这个时候我们就要请上 <code>getter</code> <code>setter</code> 函数了</p><p><img src="../Java-Base/%60getter%60%60setter%60.png" alt="`getter` `setter`"></p><p>把成员变量做的安全，使用<code>private</code>代替<code>public</code>(公共的，用户可以修改此属性)成员变量的特性，另外提供<code>getter and setter</code> ，这种方式叫做oop封装</p><p><code>getter</code> <code>setter</code> 可以看作是一个按钮，这就是封装，而在按钮设置的过程中，你可以对按钮编程，让它符合条件以后才可以被启动</p><h1 id="1-2-2-jar导入和lombok"><a href="#1-2-2-jar导入和lombok" class="headerlink" title="1-2-2 jar导入和lombok"></a>1-2-2 jar导入和lombok</h1><p>下载<code>lombok</code>插件<br><img src="../Java-Base/%E4%B8%8B%E8%BD%BDLombok%E6%8F%92%E4%BB%B6.png" alt="下载Lombok插件"><br><img src="../Java-Base/Lombok.png" alt="Lombok"></p><blockquote><p><strong>lombok的Java包下载详见：<a href="https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.12">maven repository-Project Lombok</a></strong></p></blockquote><p><img src="../Java-Base/Lombok%E4%BE%9D%E8%B5%96.png" alt="Lombok依赖"><br><img src="../Java-Base/jar%E5%AF%BC%E5%8C%851.png" alt="jar导包1"><br>将下载好的<code>jar</code>文件拖入<code>jar</code>文件夹下<br><img src="../Java-Base/jar%E5%AF%BC%E5%8C%852.png" alt="jar导包2"><br>右击选择<code>Add as Library</code><br><img src="../Java-Base/jar%E5%AF%BC%E5%8C%853.png" alt="jar导包3"><br>选择<code>Projcet Library</code><br><img src="../Java-Base/jar%E5%AF%BC%E5%8C%854.png" alt="jar导包4"><br>此时在类中输入注释，并导入包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="../Java-Base/Getter-Setter.png" alt="Getter Setter"></p><p>还需要在设置<code>Annotation Processors</code>中将<code>Enable annotation processing</code>勾选上<br><img src="../Java-Base/%E8%AE%BE%E7%BD%AE.png" alt="设置"><br>重建项目<br><img src="../Java-Base/%E9%87%8D%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="重建项目"><br>完成<br><img src="../Java-Base/%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="示意图"><br>这样就不用写<code>getter</code> <code>setter</code>了，但如果有特殊的方法则需要单独写，即方法的重写</p><h1 id="1-2-3-toString"><a href="#1-2-3-toString" class="headerlink" title="1-2-3 toString()"></a>1-2-3 toString()</h1><p><code>toString()</code> 这个方法可以输出相应的对象的函数，<code>alt + insert</code>一键创建<code>getter</code> <code>setter</code>函数<br><img src="../Java-Base/toString1.png" alt="toString1"><br><img src="../Java-Base/toString2.png" alt="toString2"></p><p><img src="../Java-Base/toString3.png" alt="toString3"><br><img src="../Java-Base/toString4.png" alt="toString4"><br>当然也可以利用jar包，在类前加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@Date</code>相当于包含以下三种：</p><ul><li><code>toString()</code></li><li><code>Override Methods()</code></li><li><code>Delegate Methods()</code></li></ul><h1 id="1-2-4-构造方法"><a href="#1-2-4-构造方法" class="headerlink" title="1-2-4 构造方法"></a>1-2-4 构造方法</h1><p><strong>回忆一下数组是怎么写的?</strong></p><ul><li>两种不一样的定义和给数组赋值的方式，创建对象的方式和第二种先定义再赋值的方式是一样的</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//1.初始化 定义+赋值</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrDogs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//2.先定义 后赋值</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们如何让对象也可以初始化呢？</strong></p><p>这就需要构造方法 <code>alt+insert</code></p><ul><li>构造方法不要有类型，方法名和类名一样</li><li>在一般情况下要加一个空参构造方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Dogs</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> variety<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> food<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>variety <span class="token operator">=</span> variety<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>food <span class="token operator">=</span> food<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Dogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以实现对象的初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Dogs</span> zhangDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dogs</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"哈士奇"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="1-2-5-构造方法的重载与再探this"><a href="#1-2-5-构造方法的重载与再探this" class="headerlink" title="1-2-5 构造方法的重载与再探this"></a>1-2-5 构造方法的重载与再探this</h1><p>构造方法也是可以重载的<br><img src="../Java-Base/%E9%87%8D%E8%BD%BD.png" alt="重载"></p><h1 id="1-2-6-垃圾回收"><a href="#1-2-6-垃圾回收" class="headerlink" title="1-2-6 垃圾回收"></a>1-2-6 垃圾回收</h1><p><strong>回到1-1-7，找不到张大爷了，空指针异常怎么办？</strong></p><ul><li>java一般是不需要你手动回收的，如果一定要自己手动来垃圾回收，可以使用<code>System.gc()</code> 这个方法</li></ul><p><img src="../Java-Base/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.png" alt="垃圾回收"><br>这样就不会出现空指针异常了</p><h1 id="1-2-7-静态变量和静态方法"><a href="#1-2-7-静态变量和静态方法" class="headerlink" title="1-2-7 静态变量和静态方法"></a>1-2-7 静态变量和静态方法</h1><p>静态变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> plot <span class="token operator">=</span><span class="token string">"NanG"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>静态方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">goplot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有狗都进了小区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="../Java-Base/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95.png" alt="静态变量与静态方法"></p><h1 id="1-2-8-private-static"><a href="#1-2-8-private-static" class="headerlink" title="1-2-8 private static"></a>1-2-8 private static</h1><p><strong>万一静态变量被改了怎么办？</strong></p><p>咱们小区名被黑了<br><img src="../Java-Base/%E5%85%AC%E5%85%B1%E5%8F%98%E9%87%8F.png" alt="公共变量"><br>这就需要用到<code>private static</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> plot <span class="token operator">=</span><span class="token string">"NanG"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPlotInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> plot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dogs.getPlotInstance() = "</span> <span class="token operator">+</span> <span class="token class-name">Dogs</span><span class="token punctuation">.</span><span class="token function">getPlotInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样定义变量和方法只能在有类名来使用，可以看作是所有类都必须做的事情，而对象无法使用，对象无权选择或者不选择。</p><h1 id="1-2-9-static单例模式"><a href="#1-2-9-static单例模式" class="headerlink" title="1-2-9 static单例模式"></a>1-2-9 static单例模式</h1><p><strong>单例模式怎么来的？</strong></p><ul><li><code>private static</code>定义变量和方法只能在有类名来使用，可以看作是所有类都必须做的事情，而对象无法使用，对象无权选择或者不选择，这里就衍生出了一种设计模式：单例模式</li></ul><p><strong>单例模式怎么用？</strong></p><ul><li>单例模式的存在是为了保证一个类仅有一个实例，无法克隆，并提供一个访问它的全局访问点</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Earth</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//new 一个新的地球，只有Earth类内可以调用</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Earth</span> earthInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Earth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//外部无法new新的Earth</span>    <span class="token keyword">private</span> <span class="token class-name">Earth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//Earth在外部得到Earth</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Earth</span> <span class="token function">getEarthInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> earthInstance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Earth!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> main <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//不合法的构造函数</span>      <span class="token comment">//编译时错误：构造函数 Earth() 是不可见的</span>      <span class="token comment">//Earth object = new Earth();</span>       <span class="token comment">//获取唯一可用的对象</span>      <span class="token class-name">Earth</span> object <span class="token operator">=</span> <span class="token class-name">Earth</span><span class="token punctuation">.</span><span class="token function">getEarthInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//显示消息</span>      object<span class="token punctuation">.</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token string">"Hello Earth!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ul><li><strong><a href="https://www.runoob.com/design-pattern/singleton-pattern.html">单例模式-菜鸟教程</a></strong></li></ul></blockquote><h1 id="1-2-10-内部类"><a href="#1-2-10-内部类" class="headerlink" title="1-2-10 内部类"></a>1-2-10 内部类</h1><p><strong>内部类是啥？</strong></p><ul><li>类里面再来一个类</li><li>静态内部类只能用静态变量</li><li>方法内部类，只能在方法里面用</li><li>用的比较少，十分难维护，可以自己去了解</li></ul><h1 id="OOP下半部分"><a href="#OOP下半部分" class="headerlink" title="OOP下半部分"></a>OOP下半部分</h1><h1 id="面向对象三大特性：封装-继承-多态"><a href="#面向对象三大特性：封装-继承-多态" class="headerlink" title="面向对象三大特性：封装 继承 多态"></a>面向对象三大特性：封装 继承 多态</h1><h1 id="2-1-1-需求重定义"><a href="#2-1-1-需求重定义" class="headerlink" title="2-1-1 需求重定义"></a>2-1-1 需求重定义</h1><p><strong>我们的宠物系统要如何维护呢？</strong></p><p>人们养宠物会有很多的选择，除开狗以外还会有猫、老鼠、熊、猪等等等</p><h1 id="2-1-2-继承"><a href="#2-1-2-继承" class="headerlink" title="2-1-2 继承"></a>2-1-2 继承</h1><p><strong>如何将这些重复的代码进行一个归类和总结呢？</strong></p><ul><li>我们会有许多方法去维护这个软件，如果要把所有动物的类都写上去，你会发现写上的都是重复的代码，我们需要将重复代码进行总结，由此提出概念：继承</li></ul><p><strong>什么是继承？</strong></p><ul><li>泛指把前人的作风、文化、知识等接受过来</li><li>把重复的代码放在一块，让其他的动物接受过来，这也是一种继承</li></ul><p>我可以创造一个类叫”动物”，这样其他的动物都可以在”动物”类中继承相同的地方，继承的关键词是 <code>extends</code><br><img src="../Java-Base/%E7%BB%A7%E6%89%BF.png" alt="继承"><br>我们把原来属于Dogs的内容转移到了<code>Animal</code>中，使用 <code>extends</code> ，最后在主函数中像之前一样<code>Dogs</code>类</p><p>并且 <code>Cat</code>在继承<code>Pet</code>以后也可以像狗一样实践，这样就使得我们的代码的复用性很强，也符合了大众化</p><h1 id="2-2-2-多层继承"><a href="#2-2-2-多层继承" class="headerlink" title="2-2-2 多层继承"></a>2-2-2 多层继承</h1><p><strong>什么是多层继承 ？</strong></p><ul><li>像灰太狼家族，一层一层的继承，爷爷传承到爸爸、爸爸传承到孙子</li><li>一个类不能直接继承多个类，java是单继承语言，不支持多继承</li><li>不能写成 <code>class A extends B,C</code></li><li>但可以实现继承多个类 <code>class A extends B，class C extends A</code> 这样C就同时继承了B和A两个类了</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dogs</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Labrador</span> <span class="token keyword">extends</span> <span class="token class-name">Dogs</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../Java-Base/%E5%A4%9A%E5%B1%82%E7%BB%A7%E6%89%BF.png" alt="多层继承"></p><h1 id="2-2-3-方法的重写"><a href="#2-2-3-方法的重写" class="headerlink" title="2-2-3 方法的重写"></a>2-2-3 方法的重写</h1><p><strong>如果要对继承中某个方法进行修改怎么办？</strong></p><ul><li>在类继承了另外一类，但是对一些方法需要进行修改的时候就需要用到方法的重写，比如动物的叫声不同</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breaking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        super.breaking();</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breaking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        super.breaking();</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动物叫，这是它自己拥有的特性，是他自己写的，不是来自他爸的，他从爸爸那革新了</p><p>子类自己认为，应该打破它父亲的传统，进行革新，革新的内容就是方法体</p><p><code>super</code> 这个函数是继承父类的所有方法，如果要改写就需要将这个注释掉<br><img src="../Java-Base/%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99.png" alt="方法的重写"><br><strong>重写(Override)与重载(Overload)的区别是啥？</strong></p><ul><li>重写(Override)是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变</li><li>重载(Overload)是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同</li></ul><blockquote><p><strong>参考：</strong></p><ul><li><strong><a href="https://www.runoob.com/java/java-override-overload.html">Java 重写(Override)与重载(Overload)-菜鸟教程</a></strong></li></ul></blockquote><h1 id="2-2-4-super啃老"><a href="#2-2-4-super啃老" class="headerlink" title="2-2-4 super啃老"></a>2-2-4 super啃老</h1><p>super啃老就是引用父类的方法，如图所示。<br><img src="../Java-Base/%E5%95%83%E8%80%81.png" alt="啃老"></p><h1 id="2-2-5-啃老啃到彻底"><a href="#2-2-5-啃老啃到彻底" class="headerlink" title="2-2-5 啃老啃到彻底"></a>2-2-5 啃老啃到彻底</h1><p><strong>构造方法的重写</strong></p><p>继承无法继承父类的构造函数，所以还需要重写构造方法，这样才可以进行对象的初始化</p><p><img src="../Java-Base/%E9%87%8D%E5%86%991.png" alt="重写1"><br><img src="../Java-Base/%E9%87%8D%E5%86%992.png" alt="重写2"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> variety<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> food<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>variety <span class="token operator">=</span> variety<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>food <span class="token operator">=</span> food<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> variety<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> food<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> variety<span class="token punctuation">,</span> age<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dogs</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> variety<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> food<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> variety<span class="token punctuation">,</span> age<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-2-6-final"><a href="#2-2-6-final" class="headerlink" title="2-2-6 final"></a>2-2-6 final</h1><p><strong>遗产没人继承了，也不可能继承–final</strong></p><p>例如我们创建一个拉布拉多类继承<code>Dogs</code>类，并用<code>final</code>定义</p><ul><li>用<code>final</code>定义的类不能再被继承</li><li>用<code>fianl</code>定义的方法不能再被重写</li><li>用<code>final</code>定义的变量是常量且不能再被修改</li></ul><p>方法也有重写，拿狗是否能导航来举例，<code>Dogs</code>类不加<code>final</code>结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGudieBlindness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Dogs</code>类加<code>final</code>结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isGudieBlindness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Labrador</code>类不能重写<code>fianl</code>的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">'<span class="token function">isGudieBlindness</span><span class="token punctuation">(</span><span class="token punctuation">)</span>' cannot override '<span class="token function">isGudieBlindness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token char">' in '</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>microsoft<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>Dogs</span>'<span class="token punctuation">;</span> overridden method is <span class="token keyword">final</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再例如，用<code>final</code>定义的变量是常理，而在命令规范中，常理必须大写，单词用下划线隔开</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">COMMUNITY_NAME</span> <span class="token operator">=</span><span class="token string">"NanG"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCommunityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token constant">COMMUNITY_NAME</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>快捷键：<br><code>ctrl +shift+u</code>一键大写<br><code>shift+f6</code>一键更改变量</p><h1 id="2-2-7-提出新的问题"><a href="#2-2-7-提出新的问题" class="headerlink" title="2-2-7 提出新的问题"></a>2-2-7 提出新的问题</h1><p><strong>那new Animal()是不是没用了？——抽象概念的引出</strong></p><ul><li>在这个系统中<code>Animal</code>类是一个没有抽象的类，就像你养一只动物肯定是具体猫或狗等，因此，<code>Animal</code>这个类是不会能被 <code>new</code>的，这样就涉及了抽象类的概念</li><li><code>Animal</code>类是用来继承的，没人会用<code>Animal</code>，我们创建对象的时候只会用到猫猫狗狗类</li><li>如果子类继承了父类，但是并未给子类写行为的具体内容，这样子类调用行为的时候出现的是父亲的行为，也就是说，如果我们定义仓鼠叫，输出的是”动物叫”，而不是仓鼠的具体叫声</li></ul><p>万一我们创建的仓鼠类，没有定义叫声怎么办？抽象类来解决这个问题</p><h1 id="2-3-1-抽象与具体——抽象类的衍生"><a href="#2-3-1-抽象与具体——抽象类的衍生" class="headerlink" title="2-3-1 抽象与具体——抽象类的衍生"></a>2-3-1 抽象与具体——抽象类的衍生</h1><p><strong>你不能养一个抽象”动物”，而是具体养了”什么”</strong></p><ul><li><code>Animal</code>本质来说是没有人用的，它是一个抽象的，它抽取了这些猫狗的共性，作为使用</li><li>抽象的反义词是具体，抽象的目的是为了概括(解释)这些具体事物</li><li>加入抽象类的关键词是 <code>abstract</code> ，抽象类是不能再被 <code>new</code> 的类，但是它可以被其他的类继承</li></ul><h1 id="2-3-2-抽象方法和抽象类的使用"><a href="#2-3-2-抽象方法和抽象类的使用" class="headerlink" title="2-3-2 抽象方法和抽象类的使用"></a>2-3-2 抽象方法和抽象类的使用</h1><p><strong>如何理解抽象方法的作用呢？</strong></p><ul><li>你会发现，想像一下，动物的叫声太多了，我们可以统一叫这个行为，但是我们不能统一他们的叫的方式一样（叫声一样），所以我们要在具体类中具体他们的叫声</li><li>同时使用抽象方法可以起到提示作用，因为抽象方法必须重写，如果忘记重写就会有报错</li><li><code>Animal</code>类中抽象方法是不能有实际意义的</li></ul><p>应该这么写（举例）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">breaking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继承抽象类(<code>Animal</code>类)的子类(<code>Cat</code>类)必须重写父类的抽象方法，且抽象方法必须在抽象类中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pubilc <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时子类也无法<code>super</code>父类了，因为父类没有这个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breaking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">breaking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-3-3-接口"><a href="#2-3-3-接口" class="headerlink" title="2-3-3 接口"></a>2-3-3 接口</h1><p><strong>如果方法全是抽象的怎么办？</strong></p><ul><li>在抽象类中有抽象方法，如果把抽象类里的方法全部变成抽象方法，可以用接口来替代这个抽象类</li></ul><p><code>New Java Class</code> 选择<code>Interface</code><br><img src="../Java-Base/interface.png" alt="interface"><br>接口里面所有方法都是抽象的，实现接口的类，会把接口中定义的方法全部重写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chinese</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃中餐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Westerner</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃西餐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大步跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chinese</span> chinese <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chinese<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chinese<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Westerner</span> westerner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Westerner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        westerner<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        westerner<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-3-4-class和interface的区别"><a href="#2-3-4-class和interface的区别" class="headerlink" title="2-3-4 class和interface的区别"></a>2-3-4 class和interface的区别</h1><p><strong>接口和抽象类本质上有什么区别？</strong></p><ul><li>抽象类是针对具体的事物进行抽象</li><li>接口是针对动作、行为进行抽象，且接口中避免出现名词</li></ul><h1 id="2-4-1-多态"><a href="#2-4-1-多态" class="headerlink" title="2-4.1 多态"></a>2-4.1 多态</h1><p><strong>多态是什么？</strong></p><ul><li>多态是同一个行为具有多个不同表现形式或形态的能力</li><li>多态就是同一个接口，使用不同的实例而执行不同操作</li></ul><p><strong>多态存在的三个必要条件</strong></p><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象：<code>Parent p = new Child();</code></li></ul><p><strong>向上转型</strong></p><ul><li>子类引用的对象转换为父类</li><li>此处父类对象可以是接口</li><li>花木兰替父从军就是向上转型，隐藏子类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>向下转型</strong></p><ul><li>把父类对象转为子类对象</li><li>前提是父类对象指向的是子类对象，即在向下转型之前，它得先向上转型</li><li>向下转型只能转型为本类对象（猫是不能变成狗的）</li><li>做回自己就是向下转型，开始变换</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ul><li><strong><a href="https://www.runoob.com/w3cnote/java-polymorphism.html">Java 中的多态-菜鸟教程</a></strong></li></ul></blockquote><h1 id="2-4-2-匿名内部类"><a href="#2-4-2-匿名内部类" class="headerlink" title="2-4-2 匿名内部类"></a>2-4-2 匿名内部类</h1><p><strong>为什么叫匿名内部类？</strong></p><p><img src="../Java-Base/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB.png" alt="匿名内部类"></p><ul><li>匿名内部类也就是没有名字的内部类</li><li>如果某个局部类你只需要用一次，那么你就可以使用匿名内部类</li><li>使用匿名内部类必须继承一个父类或实现一个接口</li></ul><p>抽象类是不能被<code>new</code>的，但是接口可以，<code>new</code>接口时会自动创建重写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Human</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃中国菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     xiaoming<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-1-1-权限修饰符"><a href="#3-1-1-权限修饰符" class="headerlink" title="3-1-1 权限修饰符"></a>3-1-1 权限修饰符</h1><p>话不多说，直接上教程，都是概念性的东西。</p><blockquote><p><strong>参考：</strong></p><ul><li><strong><a href="https://www.runoob.com/java/java-modifier-types.html">Java 修饰符-菜鸟教程</a></strong></li></ul></blockquote><h1 id="3-1-2-Object"><a href="#3-1-2-Object" class="headerlink" title="3-1-2 Object"></a>3-1-2 Object</h1><p><code>Java Object</code> 类是所有类的父类， Java 的所有类都继承了 <code>Object</code>，子类可以使用 <code>Object</code> 的所有方法</p><p>我们创建一个类时，如果没有明确继承一个父类，那么它就会自动继承 <code>Object</code>，成为 <code>Object</code> 的子类</p><blockquote><p><strong>参考：</strong></p><ul><li><strong><a href="https://www.runoob.com/java/java-object-class.html">Java Object 类-菜鸟教程</a></strong></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> program </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure and algorithm</title>
      <link href="/blog/2023/09/04/Data-Structure-and-algorithm/"/>
      <url>/blog/2023/09/04/Data-Structure-and-algorithm/</url>
      
        <content type="html"><![CDATA[<h3 id="0-0-剖析数据结构的含义，数据结构的用途，区分数据结构与算法"><a href="#0-0-剖析数据结构的含义，数据结构的用途，区分数据结构与算法" class="headerlink" title="0-0.剖析数据结构的含义，数据结构的用途，区分数据结构与算法"></a>0-0.剖析数据结构的含义，数据结构的用途，区分数据结构与算法</h3><blockquote><ol><li>什么是数据结构？</li></ol></blockquote><p>数据结构（英语：data structure）是计算机中存储，组织数据的方式。</p><p>总的来说就是（1）数据的（2）存储与（3）组织。</p><blockquote><ol><li>分别解释其含义？</li></ol></blockquote><p>1）数据：比如我们的QQ号，微信ID，支付密码了；这些都叫数据；</p><p>2）存储：以何种方式存放数据，链表，数组，树，图。。。</p><p>3）组织：CRUD增删改查；</p><p>线性表就是数组，国际上没有线性表这个词，是我们直译过来的；线性表直接用Array数组表达就好。</p><blockquote><ol><li>数据结构与算法的关系？</li></ol></blockquote><p>他们是独立的关系，不是学数据结构我就要一定会算法，这是我国的教育方式罢了；算法只是研究组织数据结构最优的CRUD解。它是更好的，更有效地对数据存储。</p><h3 id="1-0-内存，内存是如何保存不同数据类型的"><a href="#1-0-内存，内存是如何保存不同数据类型的" class="headerlink" title="1-0.内存，内存是如何保存不同数据类型的"></a>1-0.内存，内存是如何保存不同数据类型的</h3><blockquote><p>1)数据在内存中存储应该是什么样的？</p></blockquote><p>内存条中像图中的每一个单元格都是有自己的地址，一个格子可以是一个字节，那么如果要存取一个大型数据(比如一个4字节的数据)，就必须存储在连续的单元格。</p><p><img src="../Data-Structure-and-algorithm/%E5%8D%95%E5%85%83%E6%A0%BC.png" alt="单元格"></p><blockquote><p>拿int（占用4个字节）举例，有数组 int arr[1,2];</p></blockquote><p>假如1号单元格已被占用，那么，如果我们存储数组中的1，就必须重新分配一个连续的空间，比如2，3，4，5；</p><blockquote><p>生活中的例子：</p></blockquote><p>住院部，几个病人要求住在连续序号的房间中；</p><h3 id="1-1-int类型的范围是如何计算的？为什么会占用四个字节？四个字节为什么可以表示该范围？内存中是怎样的"><a href="#1-1-int类型的范围是如何计算的？为什么会占用四个字节？四个字节为什么可以表示该范围？内存中是怎样的" class="headerlink" title="1-1.int类型的范围是如何计算的？为什么会占用四个字节？四个字节为什么可以表示该范围？内存中是怎样的"></a>1-1.int类型的范围是如何计算的？为什么会占用四个字节？四个字节为什么可以表示该范围？内存中是怎样的</h3><p>语言不重要。</p><blockquote><p>1)在c&#x2F;c++中：</p></blockquote><p>不同的编程语言中取值范围是不同的。在c&#x2F;c++语言中int范围取决于字长。 字长是计算机处理的最大位数，与cpu有关。所以了，在32位机器上，字长就是32位，此时表示范围：2^32。<br>考虑正负号(有符号位):表示范围为-(231)<del>(231)-1<br>不考虑正负号( 无符号位):表示范围为 0</del>(2^32)-1</p><blockquote><p>2）python：</p></blockquote><p>python中int范围表示是无限的。</p><h3 id="2-0-Computational-Analysis-of-algorithms计算机算法复杂度分析的基本含义"><a href="#2-0-Computational-Analysis-of-algorithms计算机算法复杂度分析的基本含义" class="headerlink" title="2-0.Computational Analysis of algorithms计算机算法复杂度分析的基本含义"></a>2-0.Computational Analysis of algorithms计算机算法复杂度分析的基本含义</h3><blockquote><p>引出时间复杂度与空间复杂度。</p></blockquote><p>以从不同的目的地去往市中心为例子,如下图：</p><p><img src="../Data-Structure-and-algorithm/go-downtown.png" alt="go-downtown"></p><p>去往市中心（downtown）有三个地点（a,b,c），从图中看出三地路程不尽相同。</p><p>而去往downtown的快慢取决于路的远近和所使用的交通工具。现在呢，从a,b,c地都有人出发去往市中心，a地乘客使用飞机，b地乘客使用拖拉机，c地乘客使用汽车。最终，a先到达，b最后到达。从这个例子中我们发现，不是路程近就能先到达，它与两个因素都有关。计算机同理。<br>在计算机中我们可以把路程比作空间复杂度，所使用的交通工具比作时间复杂度。我们通常所说的时间复杂度是使用相同计算能力的机器，考虑如何在更短的时间能够完成任务。</p><blockquote><p>在计算机中，空间复杂度难以度量。</p></blockquote><h3 id="3-0-Big-O-notation复杂度标记符以及举例"><a href="#3-0-Big-O-notation复杂度标记符以及举例" class="headerlink" title="3-0.Big O notation复杂度标记符以及举例"></a>3-0.Big O notation复杂度标记符以及举例</h3><p>1）该如何理解这些复杂度的数值？</p><p>以数组为例</p><p>O(1) 查找某个病房的住的是谁</p><p>O(n)医生早上查病房，每个病人都要去看一遍</p><p>O(n^2)每个对象与所有对象依次配对 ；</p><h3 id="3-1-复杂度对比函数图"><a href="#3-1-复杂度对比函数图" class="headerlink" title="3-1.复杂度对比函数图"></a>3-1.复杂度对比函数图</h3><p><img src="../Data-Structure-and-algorithm/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%AF%B9%E6%AF%94.png" alt="复杂度对比"></p><h3 id="3-2-最基础的对数复习。"><a href="#3-2-最基础的对数复习。" class="headerlink" title="3-2.最基础的对数复习。"></a>3-2.最基础的对数复习。</h3><blockquote><p>1）什么是对数?</p></blockquote><p>对于指数：2^3&#x3D;8 ,对数就是问 2的几次方&#x3D;8 。答案是3。</p><blockquote><p>2)介绍log2n的含义，为什么它的值越来越平滑？</p></blockquote><p> 从上节图中可以发现问题，为什么log(n)越的值来越平滑？<br>举个数组扩容例子。</p><blockquote><p>如下数组：<br>int arr[1];<br>int arr[1，2];<br>int arr[1，2，3，4];<br>int arr[1，2，3，4，5，6，7，8];<br>int arr[1，2，3，4，5，6，7，8，9，10，11，12，13，14，15，16];</p></blockquote><p>我们现在需要做的事情是：如果我该数组已经使用完，而我还需要在该数组存放元素，那么我就需要先把该数组扩容为原来的1倍。然后接着在数组中存放元素，如果我又用完了，我就接着扩容。一直如此。<br>对于上述数组：<br>要变做int arr[1，2];则是在int arr[1]基础上扩容一倍；<br>要变做int arr[1，2，3，4];则是在int arr[1，2]基础上扩容一倍；<br>…</p><blockquote><p>上述数组长度变化：1-&gt;2-&gt;4-&gt;8-&gt;16-&gt;32-&gt;64…-&gt;2^N。</p></blockquote><p>长度为1的数组，经过n次不断的扩容，数组会变得会变得非常大。而随后的每次扩容出来的值会更大，你一下子也很难用完，想再去扩容也会变得很慢，所以这个值会很平缓。</p><h3 id="4-0-Array"><a href="#4-0-Array" class="headerlink" title="4-0.Array"></a>4-0.Array</h3><blockquote><p>提及国内翻译错误？</p></blockquote><p>国际上没有线性表( Linear list )这个概念；</p><p>Linear list 就是Array 和Linked list，而不是线性表，直接说成数组和链表</p><blockquote><p>如何理解数组在内存中的<strong>存储</strong>以及如何<strong>找到</strong>想要的<strong>指定元素</strong>位置？</p></blockquote><p><img src="../Data-Structure-and-algorithm/%E5%8D%95%E5%85%83%E6%A0%BC.png" alt="单元格"></p><p>我们要存储数组 int arr[1,2,3,4]；</p><blockquote><p>前提：首先呢 ，在内存中1号位置已经被占用，那么现在我们要存储该数组中的四个元素，需要怎么存储呢。</p></blockquote><p>首先我们每一个格子是一个字节，而数组中的每一个整形数据都为4个字节，那么数组中4个元素 则需要 4*4&#x3D;16个字节，而一号位置已经被占用，则从2号位置开始放 这些元素，存放完这些元素要到17号停止。</p><p>那么我们要访问指定元素（下标为n所在位置的元素值），只需要套用如下公式，首地址+sizeof（数据长度）*n。</p><p>比如3号元素 ： 2+4*3 &#x3D; 14，那么3号位置的元素就是从14号开始的。</p><h3 id="4-1-Static-Array-复杂度分析"><a href="#4-1-Static-Array-复杂度分析" class="headerlink" title="4-1.Static Array 复杂度分析"></a>4-1.Static Array 复杂度分析</h3><p>1）<strong>查早与修改时间复杂度？</strong></p><p>通过四则运算就能够找到对应下标，然后修改对应的值即可。</p><p>时间复杂度：O (1) T</p><p>2）<strong>插入考虑 RAM的随机性？在首中尾位插入？时间复杂度？</strong></p><p> 你想在首部，中部，和尾部直接插入元素有没有考虑到该数组周围已经被占用了。所以你只能重新找一片新的空间，复制原来的元素再加上新元素。copy的复杂度为O(n),而插入新元素时间复杂度为O（1），总的时间复杂度为O(n+1)，化简得O(n);</p><p>为什么1可以忽略掉？ 那假如O(n^2+2n)，2n可以忽略掉吗？</p><p>当数据量特别大得时候，比如100万，它的平方和乘2倍，哪个大？</p><p>相对于n^2而言，2n小的可怜，所以我们可以把它化简掉。就像你都已经欠债100万元，还在乎再欠上100块？</p><p>3）<strong>删除得时间复杂度？在数组首，尾，中 ，删除有区别吗？</strong></p><p>首先先给出结论。删除数组首，中间的元素时间复杂度是O(n)T，删除末尾是O(1)T。</p><p>为什么？</p><p>首地址不能变，且数组的元素必须连续。所以要删除第一个元素，或者中间的某个元素只能把后面的元素在复盖到前一位来。</p><p>在末尾直接删除，首地址没有变，且删除后剩余数组元素是连续的。</p><p>假如要多次删除首元素，时间复杂度有多高？我们使用它是不是有点蠢？</p><p>假如n个元素，要删除n次，第一个元素，则时间复杂度为O(n*n)。</p><p>解决办法：</p><p><strong>面试题</strong>：jvm中的mark and —sweep（标记and清除） 。 就是先把要删除的都先标记，再后统一把后面的往前移。时间复杂度为O(n)</p><h3 id="4-2-Dynamic-Array扩容复杂度分析，剖析高级语言中的ArrayList原理，提及复杂度震荡的情况"><a href="#4-2-Dynamic-Array扩容复杂度分析，剖析高级语言中的ArrayList原理，提及复杂度震荡的情况" class="headerlink" title="4-2.Dynamic Array扩容复杂度分析，剖析高级语言中的ArrayList原理，提及复杂度震荡的情况"></a>4-2.Dynamic Array扩容复杂度分析，剖析高级语言中的ArrayList原理，提及复杂度震荡的情况</h3><blockquote><p>1)动态数组就是抢先分配，提前分配出1倍的空间。</p></blockquote><blockquote><p>2)扩容复杂度为什么是O(n),谈谈高数中的级数收敛？</p></blockquote><p>比如数组int arr[1];</p><p>现在数组要变成 ：</p><p>int arr[1，2];</p><p>int arr[1，2，3，4];</p><p>int arr[1，2，3，4，5，6，7，8];</p><p>int arr[1，2，3，4，5，6，7，8，9，10，11，12，13，14，15，16];</p><p>要变做int arr[1，2];则是在int arr[1]基础上扩容一倍；</p><p>要变做int arr[1，2，3，4];则是在int arr[1，2]基础上扩容一倍；</p><p> 对于元素3，插入1，2元素的时间复杂度都为O(1),而3，是在原来元素基础上扩容出来一倍，然后再插入3这个元素，在这时它的时间复杂度为O(n+1)为O(n),而4这个元素再插入时时间复杂度为O(1)，因为4这个元素的空间已经是扩容出来的。</p><p>所以上述不断地扩容时间复杂度为</p><p>O(1)+O(2)+O(4)+ O(8)+O(16)+O(32)+…+O(n)&#x3D;O(2n)化简为O(n)</p><p>计算用到高数中的级数收敛：N+N&#x2F;2+N&#x2F;4+N&#x2F;8+N&#x2F;16+N&#x2F;32+…1 约等于2N</p><blockquote><p>上述方法有个装逼的词语？</p></blockquote><p>平摊分析。维基百科搜索平摊分析，里面有对数组平摊分析的介绍。<br>缩容分析？</p><h3 id="5-0-Linked-list与Singly-linked-list含义以及复杂度分析举例"><a href="#5-0-Linked-list与Singly-linked-list含义以及复杂度分析举例" class="headerlink" title="5-0.Linked list与Singly linked list含义以及复杂度分析举例"></a>5-0.Linked list与Singly linked list含义以及复杂度分析举例</h3><p>用解密游戏理解单链表。拿到每个地方的道具，同时哪里还存储着下个存储宝藏所在地的信息。</p><blockquote><p>什么是头节点，节点？</p></blockquote><p>单链表的时间复杂度</p><p>查：从第一个开始遍历，直到找到你要的值O(n)</p><p>插入：从头开始遍历，找到要插入的元素位置；</p><p>先查找，再插入 O(n)+O(1) &#x3D;O(n)</p><p>修改：从头开始遍历，找到要修改的元素位置</p><p>先查找，再插入 O(n)+O(1) &#x3D;O(n)</p><p>删除：从头开始遍历，找到要删除的元素位置</p><p>先查找，再插入 O(n)+O(1) &#x3D;O(n)</p><p>再尾节点留空，备胎。有的节点也是指向最后一个元素的，这样插入时时间复杂度为O(1)。</p><p><strong>数据结构离不开内存的</strong></p><h3 id="5-1-Doubly-linked-list与Circular-linked-list含义以及复杂度分析举例"><a href="#5-1-Doubly-linked-list与Circular-linked-list含义以及复杂度分析举例" class="headerlink" title="5-1.Doubly linked list与Circular linked list含义以及复杂度分析举例"></a>5-1.Doubly linked list与Circular linked list含义以及复杂度分析举例</h3><blockquote><p>1 双链表</p></blockquote><p>双链表，杂交 ，每个节点有3个块：pre val next；</p><p>双链表时间复杂度，头尾O(1),中间O(n)</p><blockquote><p>2循环列表</p></blockquote><p>循环列表 ，对于单链表，尾部指针指向头节点。</p><p> 对于双链表，头pre指向尾，尾next指向头节点。</p><p>其时间复杂度和双链表一样。</p><h3 id="5-2-举例以及题外话"><a href="#5-2-举例以及题外话" class="headerlink" title="5-2.举例以及题外话"></a>5-2.举例以及题外话</h3><p>单链表：学生报名，派对人来的顺序。</p><p>双向链表：浏览器上面标签栏快进，后退。</p><h3 id="6-0-Hash"><a href="#6-0-Hash" class="headerlink" title="6-0.Hash"></a>6-0.Hash</h3><blockquote><p>1）散列算法，哈希函数？</p></blockquote><p>这两个词语是一个意思。这是把一样东西通过函数计算得到另一样东西过程。把明文加密的过程叫做hash function哈希函数，比如八路军过城门检查。</p><blockquote><p>2）什么哈希碰撞？有什么例子？</p></blockquote><p>通过某种验证方式是得到你的哈希值和已有的哈希值一样。</p><p>例子：就像人在囧途 两人票一样，身份证一样，特工伪装完一样的这种感觉。</p><blockquote><p>3）单向散列函数？应用？</p></blockquote><p>明文加密得到密文，但是把你不能通过计算用密文得到我的明文。</p><p>应用1：网盘秒上传功能。你的文件要上传，网盘会拿你的该文件的哈希值，通过某种函数与服务器上存储的哈希值匹配，如果碰撞上，证明你的文件我的服务器上也存在，这时候我只需要复制一份文件的地址给你就欧克了。</p><p>应用2：苹果验证sha验证下载的文件是不是正版；</p><h3 id="6-1-Hash-Table或Hash-Map的原理与复杂度分析"><a href="#6-1-Hash-Table或Hash-Map的原理与复杂度分析" class="headerlink" title="6-1.Hash Table或Hash Map的原理与复杂度分析"></a>6-1.Hash Table或Hash Map的原理与复杂度分析</h3><blockquote><p>1）什么是哈希表？&lt;key,value&gt;？发生哈希碰撞咋办？</p></blockquote><p>hash table and hash map是一个东西。把key通过哈希函数计算得到一个内存地址，再把value放到该地址中。这种设计就是哈希表。如果两个key计算得到的内存地址一样，那么可以用拉链法，再哪个地址中存一个链表的首地址。而链表的每一个节点有两部分。一个放value，一个放key的地址。</p><blockquote><p>2）哈希表时间复杂度？</p></blockquote><p>平均O(1)</p><p>最差O(n) ，因为发生哈希碰撞，可能要以链表的形式存储。</p><blockquote><p>3）扩展？</p></blockquote><p>理解编程语言中hash table的实现，java，python，js。。。。</p><h3 id="7-0-Stack堆栈原理的实际用途与时间复杂度分析"><a href="#7-0-Stack堆栈原理的实际用途与时间复杂度分析" class="headerlink" title="7-0.Stack堆栈原理的实际用途与时间复杂度分析"></a>7-0.Stack堆栈原理的实际用途与时间复杂度分析</h3><blockquote><p>1）栈？堆栈？</p></blockquote><p>一个东西，push与pop不就是堆叠的过程。</p><p>什么是栈？打工刷盘子就能理解？</p><p>你去打工，你是洗盘子的，服务员是取盘子用的。</p><p>用途？</p><p>剪贴板，撤销，浏览器的历史记录；</p><p>栈的时间复杂度？</p><p>push O(1)</p><p>pop O(1)</p><p>查看（peek）某个元素 栈顶O( 1) ,剩余的元素O(n)</p><h3 id="8-0-Queue原理实际应用与时间复杂度分析"><a href="#8-0-Queue原理实际应用与时间复杂度分析" class="headerlink" title="8-0.Queue原理实际应用与时间复杂度分析"></a>8-0.Queue原理实际应用与时间复杂度分析</h3><blockquote><p>1）队列？取票？（FIFO）<br>队列，就是元素先来先操作，后来后操作。</p></blockquote><p>比如你去排队取你的火车票，你排在最前面，工作人员肯定先给你办理，你来的最晚，那你就排在最后面慢慢等着。</p><blockquote><p>2）用什么实现？空间复杂度？时间复杂度？</p></blockquote><p>空间复杂度为O(n);</p><p>链表：删除，插入时间复杂度为 o(1)</p><p>查找：O(n)</p><p>数组：查找O(1)，增加O(1),删除O(n)</p><blockquote><p>3)应用</p></blockquote><p>在系统中应用广泛。</p><p>比如计算机网络中的缓存网络数据包，我们电脑中后台进程管理。</p><blockquote><p>4)思考最差和平均的出现？！！！！！</p></blockquote><p>我觉得是所操作元素的位置决定，而不是所用的是链表还是数组的原因。</p><h3 id="9-0-Tree树的含义以及术语"><a href="#9-0-Tree树的含义以及术语" class="headerlink" title="9-0.Tree树的含义以及术语"></a>9-0.Tree树的含义以及术语</h3><blockquote><p>1)什么是树？</p></blockquote><p>树就是我们的家谱。</p><blockquote><p>2)理解什么是节点，根节点，子节点，叶子节点，兄弟节点，子树，边，高度，深度？等级？</p></blockquote><p>节点：家谱中的所展现的每个人；</p><p>根节点：最上面的人，你的太上老爷这种感觉；</p><p>子节点：根下面的都是子节点，或者是相对于你爸爸，你就是子节点；</p><p>兄弟节点：一个爹生下来的孩子，是兄弟；</p><p>子树：族谱中你爸爸和及它的孩子们就相当于一个子树；</p><p>高度：假如你是你们家族最新的一代人，相对于你（叶子节点）而言，上面还有几代人；</p><p>深度：上帝视角，别人看你家族谱，嗯~你家有n代人（包括你这代）；</p><p>等级：家谱中的每代人；</p><h3 id="9-1-Tree的应用"><a href="#9-1-Tree的应用" class="headerlink" title="9-1.Tree的应用"></a>9-1.Tree的应用</h3><blockquote><p>树就是用来表示层级关系的；</p></blockquote><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">公司职位表；windows的文件管理器中的层级结构；linux中的命令；html语言的代码；搜索引擎存储网页结构；制作IDE 的语法分析 表述语法树；决策树；软件的导航栏（菜单栏）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-常见树种类"><a href="#9-2-常见树种类" class="headerlink" title="9-2.常见树种类"></a>9-2.常见树种类</h3><blockquote><p>0）二叉树：每个节点最多有2个节点；</p></blockquote><blockquote><p>1） prefect binary tree</p></blockquote><p>完美二叉树：同深度的叶子节点都为2</p><p><img src="../Data-Structure-and-algorithm/%E5%AE%8C%E7%BE%8E%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="完美二叉树"></p><blockquote><p>2）amost prefect binary tree</p></blockquote><p>完全二叉树：所有的叶子节点不在同一深度上，且最深的一层所在的叶子节点必须连接在最左边的分支上。</p><p><img src="../Data-Structure-and-algorithm/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="完全二叉树"></p><blockquote><p>3）balance binary tree（AVL）</p></blockquote><p>平衡二叉树：每个节点所在子树中的左右分支中最大高度差为1。</p><p><img src="../Data-Structure-and-algorithm/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="平衡二叉树"></p><p>计算方法： 比如</p><p>节点1： 左右子树差为 3-3 &#x3D;0；</p><p>节点2： 左右子树差为 2-1 &#x3D;1；</p><p>节点4： 左右子树差为1-0&#x3D;1；</p><blockquote><p>4）full binary tree</p></blockquote><p>满二叉树：每层的叶子节点不是满的(2的倍数)。</p><p><img src="../Data-Structure-and-algorithm/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="满二叉树"></p><h3 id="9-3-树的进一步研究"><a href="#9-3-树的进一步研究" class="headerlink" title="9-3.树的进一步研究"></a>9-3.树的进一步研究</h3><blockquote><p>1）平衡二叉树，满二叉树的时间复杂度？怎么理解？</p></blockquote><p>空间：O(N)</p><p>搜索：O(log n)<br>插入：O(log n)<br>删除：O(log n)</p><blockquote><p>2）为什么插入是O(log n)?其他的也是同理。</p></blockquote><p>首先最重要的是树的结构，要满足是平衡二叉树或者呢满二叉树。 比如在4的左子树插入8。那么先经过1，然后砍一半，只看节点2，把3所在的子树删除了。然后再2处再砍一半，只看节点4,然后再4的左边插入8。这样的，每次砍一半，看了左半边，就不看右半边。<code>（这里注重的是每次只砍一半的感觉，不要在意为什么要在4处插入，为什么只看左子树。）</code></p><blockquote><p>3）提及其它树？自己分析。</p></blockquote><p>普通二叉树 。时间复杂度O(n)</p><p>堆：O(log n)</p><p>线段树，区间查询 ，修改 O(log n)</p><p>字典树：O(m)m是键的长度。</p><p>图：邻接表，邻接矩阵。</p><h3 id="9-4-Graph图的含义以及举例"><a href="#9-4-Graph图的含义以及举例" class="headerlink" title="9-4.Graph图的含义以及举例"></a>9-4.Graph图的含义以及举例</h3><blockquote><p>1）图？顶点？边？</p></blockquote><p>表示关系</p><p>顶点：就是图中的节点</p><p>边：有方向的线。边必须有方向。</p><blockquote><p>2）有向图，无向图，循环图，无环图？例子？</p></blockquote><p>有向图：有箭头指向的图</p><pre class="line-numbers language-none"><code class="language-none">例如：  飞机从某地到某地有没有航班。B站用户相互关注情况。铁路某地到某地有没有铁路段。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>无向图：无箭头指向的图，但也是表示这是连接关系。虽然没有箭头。</p><p>循环图：有至少三个节点连接成环，形成了一个循环的周期</p><p>无环图：没有形成环的图</p><p><strong>注意：树就是特殊的图</strong></p><p>3）邻接表，邻接矩阵？</p><p>邻接表：链表。</p><p>邻接矩阵：数组。</p><h3 id="9-5-其他的图以及时间复杂度"><a href="#9-5-其他的图以及时间复杂度" class="headerlink" title="9-5.其他的图以及时间复杂度"></a>9-5.其他的图以及时间复杂度</h3><p>连通图：节点（V）边（E）遍历时间复杂度：O(v+e)</p><p>其他的树时间复杂度可能与之不同。因为树的种类太多了。难以一一分析。</p><p>扩展知识： 最小生成树，最短路径算法。。。领域不同，所需要了解的深度不同。</p><p>图最坏的时间复杂度为O(v+e)。</p><p>人工智能，计算机图形学 研究图的。</p><h3 id="9-6-总结"><a href="#9-6-总结" class="headerlink" title="9-6.总结"></a>9-6.总结</h3><p>维基百科看看，数据结构有多么的多，讲不完的。</p><blockquote><p>程序员不是全知全能的。</p></blockquote><blockquote><p>要学会这个东西的含义，在那个领域，特性。如何分析？实际应用，有什么例子。</p></blockquote><blockquote><p>想要成功，必须合作。</p></blockquote><blockquote><p>数据结构记得在leecode上定时刷题</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> program </tag>
            
            <tag> data Structure and alagorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Numpy</title>
      <link href="/blog/2023/08/20/Python-Numpy/"/>
      <url>/blog/2023/08/20/Python-Numpy/</url>
      
        <content type="html"><![CDATA[<h2 id="Numpy介绍"><a href="#Numpy介绍" class="headerlink" title="Numpy介绍"></a>Numpy介绍</h2><p>NumPy是Python语言的一个扩展程序库。支持高阶大规模的多维数组与矩阵运算，此外也针对数组运算提供大量的数学函数函式库。</p><p>针对金融领域的大量矩阵运算，Numpy模块中存储多维数据、处理大型矩阵、开展随机抽样等复杂计算的功能可以完美解决金融领域许多复杂的问题。正如Numpy的random模块可以解决金融量化分析与风险管理过程中涉及基于某种分布的随机抽样，Numpy的financial模块可以测算现金流终值、现值、内含报酬率等金融问题。因此本章主要结合金融场景有的放矢地对Numpy的操作进行介绍和演示。</p><p><img src="../Python-Numpy/Numpy%E4%BB%8B%E7%BB%8D.png" alt="Numpy介绍"></p><h2 id="Numpy操作"><a href="#Numpy操作" class="headerlink" title="Numpy操作"></a>Numpy操作</h2><h3 id="1-导入numpy与检查版本"><a href="#1-导入numpy与检查版本" class="headerlink" title="1.导入numpy与检查版本"></a>1.导入numpy与检查版本</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np    <span class="token comment">#导入NumPy模块</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>    <span class="token comment">#查看NumPy版本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我导入Numpy模块后将其命名为np，后续使用就基于这个命名进行。另外，我这里使用的Numpy版本是1.24.3，不同版本可能会有细微差异，不过应该不会影响使用。</p><h3 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2.创建数组"></a>2.创建数组</h3><p>创建数组的方式有很多，这里简单介绍几种</p><h5 id="1-直接输入法"><a href="#1-直接输入法" class="headerlink" title="1.直接输入法"></a>1.直接输入法</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>一个列表<span class="token punctuation">)</span>    <span class="token comment">#一维数组</span>b_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>列表<span class="token number">1</span>，列表<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>，列表n<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#二维数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两种方式都可以建立数组，不过常用的数组基本都不超过二维，因此直接输入法在很多场景用途都非常广泛。</p><h5 id="2-方法生成数组"><a href="#2-方法生成数组" class="headerlink" title="2.方法生成数组"></a>2.方法生成数组</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>start<span class="token punctuation">,</span>stop<span class="token punctuation">,</span>step<span class="token punctuation">)</span>    <span class="token comment">#返回一个有终点和起点的固定步长的排列</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span>stop<span class="token punctuation">,</span>num<span class="token punctuation">)</span>    <span class="token comment">#生成一个指定大小，指定数据区间的均匀分布序列</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#返回一个给定形状和类型的用0填充的数组</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#返回一个给定形状和类型的用1填充的数组</span>np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>N<span class="token punctuation">)</span>    <span class="token comment">#创建一个指定形状参数的单位矩阵数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，通过不同方法创建的数组应用场景也会不同。在金融领域，这几个方法是比较常用的，可以迅速生成自己需要的数组。（亲测非常的好用hh）</p><h5 id="3-将列表转化为数组"><a href="#3-将列表转化为数组" class="headerlink" title="3.将列表转化为数组"></a>3.将列表转化为数组</h5><p>有些时候，数据都用列表进行存储，这时候我们就需要通过列表转化为数组，从而使用Numpy模块进行金融分析。</p><p>我们常用的方法主要有三个：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>listname<span class="token punctuation">)</span>    <span class="token comment">#将列表转化为数组</span>arrayname<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token comment">#改变数组形状</span>arrayname<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#数组降维</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数组中的数据在内存里是固定的，但计算时的排列方式却可以随时更改，这也是数组的强大之处。</p><p>值得说的一点，<code>reshape</code>函数和<code>resize</code>函数功能相同，都可以修改数组的形状，区别是前者返回新数组，后者则直接修改原始数组。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arraynew <span class="token operator">=</span> arrayord<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token comment">#修改数组形状</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-数组属性"><a href="#3-数组属性" class="headerlink" title="3.数组属性"></a>3.数组属性</h3><p>好了，说了这么多，那我们应该怎么查看数组的信息呢？下面我列出了一些比较常用的方法，非常的基础。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>arrayname<span class="token punctuation">)</span>    <span class="token comment">#显示NumPy数组类型</span>arrayname<span class="token punctuation">.</span>dtype    <span class="token comment">#显示数组元素的类型</span>arrayname<span class="token punctuation">.</span>size    <span class="token comment">#显示数组元素的个数</span>arrayname<span class="token punctuation">.</span>shape     <span class="token comment">#显示数组的形状（行数，列数）</span>arrayname<span class="token punctuation">.</span>ndim     <span class="token comment">#显示数组的维度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组的类型：<code>&lt;class &#39;numpy.ndarray&#39;&gt;</code>（其实，我也不知道ndarray是啥意思，可能是n维数组（？））</p><p>查看ndarray支持的数据类型可访问：<a href="https://numpy.org/devdocs/user/basics.types.html%EF%BC%88%E8%BF%99%E6%98%AFnumpy%E7%9A%84%E5%AE%98%E7%BD%91%EF%BC%8C%E6%94%BE%E5%BF%83%E8%BF%9B%EF%BC%89">https://numpy.org/devdocs/user/basics.types.html（这是numpy的官网，放心进）</a></p><p>后面那三个方法就没啥好说的，很容易理解。</p><h3 id="4-数组操作"><a href="#4-数组操作" class="headerlink" title="4.数组操作"></a>4.数组操作</h3><h5 id="1-切片-索引-排序"><a href="#1-切片-索引-排序" class="headerlink" title="1.切片,索引,排序"></a>1.切片,索引,排序</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">arrayname<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">:</span>step<span class="token punctuation">,</span>start<span class="token punctuation">:</span>end<span class="token punctuation">:</span>step<span class="token punctuation">]</span>    <span class="token comment">#二维数组的切片</span>arrayname<span class="token punctuation">[</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span>    <span class="token comment">#二维数组的索引</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>arrayname<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#数组的排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这三个操作就非常的基本了，切片、索引、排序三个常用方法。类似于python列表的操作，但有一点点不一样。</p><p>主要的不同是<code>sort</code>函数，<code>axis</code>参数可以通过坐标轴设定来改变排序方法，<code>axis=1</code>表示横向操作，<code>axis=0</code>表示纵向操作。不输入参数时，默认按行进行排序。</p><h5 id="2-合并数组"><a href="#2-合并数组" class="headerlink" title="2.合并数组"></a>2.合并数组</h5><p>在金融分析的时候，我们有时候还需要对不同的数组进行合并，从而达到整合数据的目的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>array_one<span class="token punctuation">,</span>array_two<span class="token punctuation">)</span>    <span class="token comment">#合并两个数组</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>数组<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>数组<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">[</span>数组n<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#合并多个数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两个方法都可以对数组进行合并。不同的是，append函数默认是对行进行合并，concatenate函数默认对列进行合并。（append函数使用之后可能会导致数组退化为一维数组）</p><h5 id="3-数组计算"><a href="#3-数组计算" class="headerlink" title="3.数组计算"></a>3.数组计算</h5><p>不多废话，直接上方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arrayname<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#对每个数组的元素求和</span>arrayname<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#求数组的元素最小值</span>arrayname<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#求数组元素的最大值</span>arrayname<span class="token punctuation">.</span>prod<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#求数组内部元素的乘积</span>arrayname<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#求数组元素的均值</span>arrayname<span class="token punctuation">.</span>var<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#求数组元素的方差</span>arrayname<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#求数组元素的标准差</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这几个是最常用的方法，默认是对所有元素进行操作。当然，我们也可以通过设置<code>axis参数</code>让它只针对行列进行操作。</p><p>下面是数组之间的计算方法，可以类比普通计算方法。这部分内容还是比较通俗易懂的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array_one <span class="token operator">+</span> array_two    <span class="token comment">#数组相加</span>array_one <span class="token operator">-</span> array_two    <span class="token comment">#数组相减</span>array_one <span class="token operator">*</span> array_two    <span class="token comment">#数组相乘</span>array_one <span class="token operator">/</span> array_two    <span class="token comment">#数组相除</span><span class="token builtin">pow</span><span class="token punctuation">(</span>arrayname<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token comment">#数组的幂</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>array_one<span class="token punctuation">,</span>array_two<span class="token punctuation">)</span>    <span class="token comment">#计算两个数组的点积</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-矩阵操作"><a href="#4-矩阵操作" class="headerlink" title="4.矩阵操作"></a>4.矩阵操作</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>corrcoef<span class="token punctuation">(</span>arrayname<span class="token punctuation">)</span>    <span class="token comment">#查看相关系数矩阵</span>np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>arrayname<span class="token punctuation">)</span>    <span class="token comment">#查看矩阵对角线</span>np<span class="token punctuation">.</span>triu<span class="token punctuation">(</span>arrayname<span class="token punctuation">)</span>    <span class="token comment">#查看矩阵上三角</span>np<span class="token punctuation">.</span>tril<span class="token punctuation">(</span>arrayname<span class="token punctuation">)</span>    <span class="token comment">#查看矩阵下三角</span>np<span class="token punctuation">.</span>trace<span class="token punctuation">(</span>arrayname<span class="token punctuation">)</span>    <span class="token comment">#查看矩阵的迹</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>arrayname<span class="token punctuation">)</span>    <span class="token comment">#查看转置矩阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，都是线性代数的知识，简单略过。</p><h3 id="5-linalg模块"><a href="#5-linalg模块" class="headerlink" title="5.linalg模块"></a>5.linalg模块</h3><p>终于到了linalg子模块的部分了，这个模块主要是用来进行线性代数的工具包。对于金融领域来说，常用的不算很多。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy<span class="token punctuation">.</span>linalg <span class="token keyword">as</span> la    <span class="token comment">#导入linalg模块</span>la<span class="token punctuation">.</span>det<span class="token punctuation">(</span>arrayname<span class="token punctuation">)</span>    <span class="token comment">#矩阵行列式</span>la<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>arrayname<span class="token punctuation">)</span>    <span class="token comment">#逆矩阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>没错，就这两个方法，可以说关于矩阵的运算，numpy基础库就已经可以解决大部分，很多时候并不需要再引入linalg模块。</p><h3 id="6-random模块"><a href="#6-random模块" class="headerlink" title="6.random模块"></a>6.random模块</h3><p>哈哈哈，这个子模块可是非常常用的。不仅仅是金融领域，在平常的时候，求一些随机数的时候也经常使用。</p><p>random模块主要是通过生成随机种子来创建随机数，而随机种子原理是通过读取用户操作时的时间戳来生成序列。（不过到2038 年 01 月 19 日 03 时 14 分 07 秒就失效了，ee，不知道之后会咋解决这个问题，可能会有大佬想出新的方法？）</p><p>好了，这些大概就是random模块随机的原理，接下来，让我们看看基于特定统计分布的随机取样。</p><table><thead><tr><th align="center">函数名称</th><th align="center">统计分布类型</th></tr></thead><tbody><tr><td align="center">beta</td><td align="center">贝塔分布</td></tr><tr><td align="center">binomial</td><td align="center">二项分布</td></tr><tr><td align="center">chisquare</td><td align="center">卡方分布</td></tr><tr><td align="center">exponential</td><td align="center">指数分布</td></tr><tr><td align="center">f</td><td align="center">F分布</td></tr><tr><td align="center">gamma</td><td align="center">伽马分布</td></tr><tr><td align="center">geometric</td><td align="center">几何分布</td></tr><tr><td align="center">hypergeometric</td><td align="center">超几何分布</td></tr><tr><td align="center">lognormal</td><td align="center">对数正态分布</td></tr><tr><td align="center">normal</td><td align="center">正态分布</td></tr><tr><td align="center">poisson</td><td align="center">泊松分布</td></tr><tr><td align="center">standard_normal</td><td align="center">标准正态分布</td></tr><tr><td align="center">standard_t</td><td align="center">t分布</td></tr><tr><td align="center">rand</td><td align="center">标准均匀分布</td></tr><tr><td align="center">randint</td><td align="center">给定区间内随机抽取整数</td></tr><tr><td align="center">randn</td><td align="center">标准正态分布</td></tr></tbody></table><p>以上就是整理出来的随机抽样分布表。内容非常的多，这里篇幅有限，就简单介绍几个最常用的随机抽样。</p><h5 id="1-基于正态分布的随机抽样"><a href="#1-基于正态分布的随机抽样" class="headerlink" title="1.基于正态分布的随机抽样"></a>1.基于正态分布的随机抽样</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">x_norm <span class="token operator">=</span> npr<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mean<span class="token punctuation">,</span>std<span class="token punctuation">,</span>I<span class="token punctuation">)</span>y_norm <span class="token operator">=</span> npr<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>I<span class="token punctuation">)</span>z_norm <span class="token operator">=</span> npr<span class="token punctuation">.</span>standard_normal<span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运用normal函数抽样的均值："</span><span class="token punctuation">,</span>x_norm<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运用normal函数抽样的标准差："</span><span class="token punctuation">,</span>x_norm<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运用randn函数抽样的均值："</span><span class="token punctuation">,</span>y_norm<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运用randn函数抽样的标准差："</span><span class="token punctuation">,</span>y_norm<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运用standard_normal函数抽样的均值："</span><span class="token punctuation">,</span>z_norm<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运用standard_normal函数抽样的标准差："</span><span class="token punctuation">,</span>z_norm<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，I代表随机抽样的次数、mean代表均值、std代表标准差。</p><p>经过我的尝试，我觉得运用不同函数从标准正态分布中抽取的随机数，所得到的结果不算很相似。（可能是我运气不好，算出来的结果差别都不小）</p><h5 id="2-基于卡方分布的随机抽样"><a href="#2-基于卡方分布的随机抽样" class="headerlink" title="2.基于卡方分布的随机抽样"></a>2.基于卡方分布的随机抽样</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">chis <span class="token operator">=</span> npr<span class="token punctuation">.</span>chisquare<span class="token punctuation">(</span>freedom<span class="token punctuation">,</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"卡方分布的均值："</span><span class="token punctuation">,</span>chis<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"卡方分布的标准差："</span><span class="token punctuation">,</span>chis<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，I代表随机抽样的次数、freedom代表自由度。</p><h5 id="3-t分布"><a href="#3-t分布" class="headerlink" title="3.t分布"></a>3.t分布</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">stan <span class="token operator">=</span> npr<span class="token punctuation">.</span>standard_t<span class="token punctuation">(</span>freedom<span class="token punctuation">,</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"t分布的均值："</span><span class="token punctuation">,</span>stan<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"t分布的标准差："</span><span class="token punctuation">,</span>stan<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，I代表随机抽样的次数、freedom代表自由度。</p><h3 id="7-现金流模型"><a href="#7-现金流模型" class="headerlink" title="7.现金流模型"></a>7.现金流模型</h3><p>oh，终于到了金融领域的分析模块了。</p><p>先简单介绍一下，针对金融产品的定价方式有3种方法：一是基于现金流贴现的定价方法，二是基于风险与收益的定价方法，三是基于无风险收益的无套利定价方法。其中，现金流贴现方法最为常用。</p><p>接下来，我们需要先安装numpy_financial模块。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy_financial <span class="token keyword">as</span> npf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-现金流终值"><a href="#1-现金流终值" class="headerlink" title="1.现金流终值"></a>1.现金流终值</h5><p><img src="../Python-Numpy/%E7%8E%B0%E9%87%91%E6%B5%81%E7%BB%88%E5%80%BC.png" alt="现金流终值"></p><p>现金流的终值是指一定时期内每期期末等额收付款项的复利终值之和。可用fv函数进行计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">npf<span class="token punctuation">.</span>fv<span class="token punctuation">(</span>rate<span class="token punctuation">,</span>nper<span class="token punctuation">,</span>pmt<span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，rate指投资回报率、nper指投资整体期限、pmt指投资期间发生的固定金额现金流、pv指净现金流现值。</p><h5 id="2-现金流现值"><a href="#2-现金流现值" class="headerlink" title="2.现金流现值"></a>2.现金流现值</h5><p><img src="../Python-Numpy/%E7%8E%B0%E9%87%91%E6%B5%81%E7%8E%B0%E5%80%BC.png" alt="现金流现值"></p><p>现金流现值是指一定时期内每期期末收付款项的复利现值之和。可用pv函数进行计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">npf<span class="token punctuation">.</span>pv<span class="token punctuation">(</span>rate<span class="token punctuation">,</span>nper<span class="token punctuation">,</span>pmt<span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，rate指投资回报率、nper指投资整体期限、pmt指投资期间发生的固定金额现金流、pv指净现金流现值。</p><h5 id="3-净现值"><a href="#3-净现值" class="headerlink" title="3.净现值"></a>3.净现值</h5><p>净现值（NPV）通过计算每个投资期间的成本（负现金流）和收益（正现金流）来确定。期限通常为一年，但可以按季度，半年或数月来衡量。在计算每个时期的现金流量后，每个时期的现值（PV）是通过以定期收益率（市场规定的收益率）贴现其未来价值（见公式）来实现的。</p><p><img src="../Python-Numpy/%E5%87%80%E7%8E%B0%E5%80%BC%E5%85%AC%E5%BC%8F.png" alt="净现值公式"></p><p>净现值 &#x3D; 未来现金净流量现值-原始投资额现值</p><p>运用python计算项目的净现值时，可以运用numpy_financial模块的函数npv</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">npf<span class="token punctuation">.</span>npv<span class="token punctuation">(</span>rate<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，参数rate代表项目的投资回报率或者贴现率、参数values代表以数组形式输入的期初和存储期每年年末的净现金流。</p><p><strong>内含报酬率</strong>是指能够使未来现金净流量现值等于原始投资额现值的折现率。</p><p>当净现值&#x3D;0时，未来现金净流量现值&#x3D;原始投资额现值。</p><p>运用python计算项目的净现值时，可以运用numpy_financial模块的函数irr</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">npf<span class="token punctuation">.</span>irr<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，参数values代表以数组形式输入的期初和存储期每年年末的净现金流。</p><h5 id="4-等额本息还款"><a href="#4-等额本息还款" class="headerlink" title="4.等额本息还款"></a>4.等额本息还款</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">per <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>nper<span class="token punctuation">)</span>npf<span class="token punctuation">.</span>pmt<span class="token punctuation">(</span>rate<span class="token punctuation">,</span> nper<span class="token punctuation">,</span> pv<span class="token punctuation">)</span>    <span class="token comment">#本息还款金额</span>npf<span class="token punctuation">.</span>ppmt<span class="token punctuation">(</span>rate<span class="token punctuation">,</span> per<span class="token punctuation">,</span> nper<span class="token punctuation">,</span> pv<span class="token punctuation">)</span>    <span class="token comment">#本息还款本金</span>npf<span class="token punctuation">.</span>ipmt<span class="token punctuation">(</span>rate<span class="token punctuation">,</span> per<span class="token punctuation">,</span> nper<span class="token punctuation">,</span> pv<span class="token punctuation">)</span>    <span class="token comment">#本息还款利息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，rate指按揭贷款月利率、nper代表贷款的整体期限、pv代表贷款的本金金额、fv代表期末现金流、per代表逐次还款的期限（用数组表示）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上，Numpy模块是Python在金融领域运用的必备第三方模块。在数据分析方面应用还是很广泛的。后期，我也有可能更新pandas、scipy、matplotlib等模块的金融应用。（maybe）这几个第三方库确实很好用，但是老师上课基本不讲，网络上我也没找到内容和质量好的文章，于是便写了本文。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> program </tag>
            
            <tag> finance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM</title>
      <link href="/blog/2023/08/19/VIM/"/>
      <url>/blog/2023/08/19/VIM/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vim介绍"><a href="#1-vim介绍" class="headerlink" title="1.vim介绍"></a>1.vim介绍</h2><h3 id="vim编辑器有三种模式："><a href="#vim编辑器有三种模式：" class="headerlink" title="vim编辑器有三种模式："></a>vim编辑器有三种模式：</h3><p>命令模式、编辑模式、末行模式</p><p><strong>模式间切换方法</strong>：<br>（1）命令模式下，输入<code>:</code>后，进入末行模式<br>（2）末行模式下，按<code>esc</code>慢退、按两次<code>esc</code>快退、或者删除所有命令，可以回到命令模式<br>（3）命令模式下，按下<code>i</code>、<code>a</code>等键，可以计入编辑模式<br>（4）编辑模式下，按下<code>esc</code>，可以回到命令模式</p><h3 id="vim打开文件："><a href="#vim打开文件：" class="headerlink" title="vim打开文件："></a><strong>vim打开文件</strong>：</h3><table><thead><tr><th>Vi 使用的选项</th><th>说 明</th></tr></thead><tbody><tr><td>vim filename</td><td>打开或新建一个文件，并将光标置于第一行的首部</td></tr><tr><td>vim -r filename</td><td>恢复上次 vim 打开时崩溃的文件</td></tr><tr><td>vim -R filename</td><td>把指定的文件以只读方式放入 Vim 编辑器中</td></tr><tr><td>vim + filename</td><td>打开文件，并将光标置于最后一行的首部</td></tr><tr><td>vim +n filename</td><td>打开文件，并将光标置于第 n 行的首部</td></tr><tr><td>vim +&#x2F;pattern filename</td><td>打幵文件，并将光标置于第一个与 pattern 匹配的位置</td></tr><tr><td>vim -c command filename</td><td>在对文件进行编辑前，先执行指定的命令</td></tr></tbody></table><h2 id="2-命令模式"><a href="#2-命令模式" class="headerlink" title="2.命令模式"></a>2.命令模式</h2><h3 id="1-光标移动"><a href="#1-光标移动" class="headerlink" title="1.光标移动"></a>1.光标移动</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>jkhl</td><td>基本移动，上下左右</td></tr><tr><td>gg</td><td>光标移动到文档首行</td></tr><tr><td>G</td><td>光标移动到文档尾行</td></tr><tr><td>^或_</td><td>光标移动到行首第一个非空字符</td></tr><tr><td>home键或0或者g0</td><td>光标移动到行首第一个字符</td></tr><tr><td>g_</td><td>光标移动到行尾最后一个非空字符</td></tr><tr><td>end或或者 g 或者g或者<em>g</em></td><td>光标移动到行尾最后一个字符</td></tr><tr><td>gm</td><td>光标移动到当前行中间处</td></tr><tr><td>b&#x2F;B</td><td>光标向前移动一个单词（大写忽略&#x2F;-等等特殊字符）</td></tr><tr><td>w&#x2F;W</td><td>光标向后移动一个单词（大写忽略&#x2F;-等等特殊字符）</td></tr><tr><td>e&#x2F;E</td><td>移到单词结尾（大写忽略&#x2F;-等等特殊字符）</td></tr><tr><td>ctrl+b或pageUp键</td><td>翻屏操作，向上翻</td></tr><tr><td>ctrl+f或pageDn键</td><td>翻屏操作，向下翻</td></tr><tr><td>数字+G</td><td>快速将光标移动到指定行</td></tr><tr><td>&#96;.</td><td>移动到上次编辑处</td></tr><tr><td>数字+上下方向键</td><td>以当前光标为准，向上&#x2F;下移动n行</td></tr><tr><td>数字+左右方向键</td><td>以当前光标为准，向左&#x2F;右移动n个字符</td></tr><tr><td>H</td><td>移动到屏幕顶部</td></tr><tr><td>M</td><td>移动到屏幕中间</td></tr><tr><td>L</td><td>移动到屏幕尾部</td></tr><tr><td>z+Enter键</td><td>当前行在屏幕顶部</td></tr><tr><td>z+ .</td><td>当前行在屏幕中间</td></tr><tr><td>z+ -</td><td>当前行在屏幕底部</td></tr><tr><td>shift+6</td><td>光标移动到行首</td></tr><tr><td>shift+4</td><td>光标移动到行尾</td></tr><tr><td>-</td><td>移动到上一行第一个非空字符</td></tr><tr><td>+</td><td>移动到下一行第一个非空字符</td></tr><tr><td>)</td><td>向前移动一个句子</td></tr><tr><td>(</td><td>向后移动一个句子</td></tr><tr><td>}</td><td>向前移动一个段落</td></tr><tr><td>{</td><td>向前移动一个段落</td></tr><tr><td>count l</td><td>移动到count 列</td></tr><tr><td>counth</td><td>向左移动count 字符</td></tr><tr><td>countl</td><td>向右移动count字符</td></tr><tr><td>countgo</td><td>移动到count字符</td></tr></tbody></table><h3 id="2-选中内容"><a href="#2-选中内容" class="headerlink" title="2.选中内容"></a>2.选中内容</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>v</td><td>进行字符选中</td></tr><tr><td>V 或shift+v</td><td>进行行选中</td></tr><tr><td>gv</td><td>选中上一次选择的内容</td></tr><tr><td>o</td><td>光标移动到选中内容另一处结尾</td></tr><tr><td>O</td><td>光标移动到选中内容另一处角落</td></tr><tr><td>ctr + V</td><td>进行块选中</td></tr></tbody></table><h3 id="3-复制（配合粘贴命令p使用）"><a href="#3-复制（配合粘贴命令p使用）" class="headerlink" title="3.复制（配合粘贴命令p使用）"></a>3.复制（配合粘贴命令p使用）</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>y</td><td>复制已选中的文本到剪贴板</td></tr><tr><td>n+yy</td><td>复制光标所在行，此命令前可以加数字 n，可复制多行</td></tr><tr><td>yw</td><td>复制光标位置的单词</td></tr><tr><td>ctrl+v + 方向键+yy</td><td>ctrl+v，并按方向键选中区块，按下yy复制</td></tr></tbody></table><h3 id="4-剪切"><a href="#4-剪切" class="headerlink" title="4.剪切"></a>4.剪切</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>dd</td><td>剪切<strong>光标所在行</strong></td></tr><tr><td>数字+dd</td><td>以光标所在行为准（包含当前行），<strong>向下剪切指定行数</strong></td></tr><tr><td>D</td><td>剪切光标所在行</td></tr></tbody></table><h3 id="5-粘贴"><a href="#5-粘贴" class="headerlink" title="5.粘贴"></a>5.粘贴</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>p</td><td>将剪贴板中的内容<strong>粘贴到光标后</strong></td></tr><tr><td>P（大写）</td><td>将剪贴板中的内容<strong>粘贴到光标前</strong></td></tr></tbody></table><h3 id="6-删除"><a href="#6-删除" class="headerlink" title="6.删除"></a>6.删除</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>x</td><td>删除<strong>光标所在位置</strong>的字符</td></tr><tr><td>X(大写)</td><td>删除<strong>光标前</strong>一个字符</td></tr><tr><td>dd</td><td>删除<strong>光标所在行</strong>，删除之后，<strong>下一行上移</strong></td></tr><tr><td>D</td><td>删除<strong>光标位置到行尾</strong>的内容，删除之后，<strong>下一行不上移</strong></td></tr><tr><td>ndd</td><td>删除当前行（包括此行）后 n 行文本</td></tr><tr><td>dw</td><td>移动光标到单词的开头以删除该单词</td></tr><tr><td>dG</td><td>删除光标所在行一直到文件末尾的所有内容</td></tr><tr><td>:a1,a2d</td><td>删除从 a1 行到 a2 行的文本内容</td></tr></tbody></table><h3 id="7-撤销-恢复"><a href="#7-撤销-恢复" class="headerlink" title="7.撤销&#x2F;恢复"></a>7.撤销&#x2F;恢复</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>u</td><td>撤销</td></tr><tr><td>ctrl+r</td><td>恢复</td></tr><tr><td>U(大写)</td><td>撤销所有编辑</td></tr></tbody></table><h3 id="8-字符转换"><a href="#8-字符转换" class="headerlink" title="8.字符转换"></a>8.字符转换</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>~</td><td>转换大小写</td></tr><tr><td>u</td><td>变成小写</td></tr><tr><td>U</td><td>变成大写</td></tr></tbody></table><h3 id="9-编辑命令的快捷键"><a href="#9-编辑命令的快捷键" class="headerlink" title="9.编辑命令的快捷键"></a>9.编辑命令的快捷键</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>↑或ctr + p</td><td>上一条命令</td></tr><tr><td>↓或ctr + n</td><td>下一条命令</td></tr><tr><td>ctr + b</td><td>移动到命令行开头</td></tr><tr><td>ctr + e</td><td>移动到命令行结尾</td></tr><tr><td>ctr + ←</td><td>向左一个单词</td></tr><tr><td>ctr + →</td><td>向右一个单词</td></tr></tbody></table><h2 id="3-末行模式-xxx命令"><a href="#3-末行模式-xxx命令" class="headerlink" title="3.末行模式(: xxx命令)"></a>3.末行模式(: xxx命令)</h2><h3 id="1-保存-退出文件操作"><a href="#1-保存-退出文件操作" class="headerlink" title="1.保存&#x2F;退出文件操作"></a>1.保存&#x2F;退出文件操作</h3><table><thead><tr><th>命令</th><th>功能描述</th></tr></thead><tbody><tr><td>:wq</td><td>保存并退出 Vim 编辑器</td></tr><tr><td>:wq!</td><td>保存并强制退出 Vim 编辑器</td></tr><tr><td>:q</td><td>不保存就退出 Vim 编辑器</td></tr><tr><td>:q!</td><td>不保存，且强制退出 Vim 编辑器</td></tr><tr><td>:w</td><td>保存但是不退出 Vim 编辑器</td></tr><tr><td>:w!</td><td>强制保存文本</td></tr><tr><td>:w filename</td><td>另存到 filename 文件</td></tr><tr><td>x！</td><td>保存文本，并退出 Vim 编辑器</td></tr><tr><td>ZZ</td><td>直接退出 Vim 编辑器</td></tr></tbody></table><h3 id="2-查找：“-关键词”"><a href="#2-查找：“-关键词”" class="headerlink" title="2.查找：“&#x2F;关键词”"></a>2.查找：“&#x2F;关键词”</h3><p>在查找结果中，用<code>N</code>、<code>n</code>可以切换上下结果；输入<code>nohl</code>，可以取消高亮</p><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>&#x2F;abc</td><td>从光标所在位置<strong>向前查找</strong>字符串 abc</td></tr><tr><td>&#x2F;^abc</td><td>查找以 abc 为行首的行</td></tr><tr><td>&#x2F;abc$</td><td>查找以 abc 为行尾的行</td></tr><tr><td>?abc</td><td>从光标所在位置<strong>向后查找</strong>字符串 abc</td></tr><tr><td>n或；</td><td>向同一方向重复上次的查找指令</td></tr><tr><td>N或,</td><td>向相反方向重复上次的查找指定</td></tr></tbody></table><h3 id="3-替换"><a href="#3-替换" class="headerlink" title="3.替换"></a>3.替换</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>r</td><td>替换光标所在位置的字符</td></tr><tr><td>R</td><td>从光标所在位置开始替换字符，其输入内容会覆盖掉后面等长的文本内容，按“Esc”可以结束</td></tr><tr><td><code>:s/a1/a2</code></td><td>替换<strong>当前光标所在行第一处</strong>符合条件的内容</td></tr><tr><td><code>:s/a1/a2/g</code></td><td>替换<strong>当前光标所在行</strong>所有的 a1 都用 a2 替换</td></tr><tr><td><code>:%s/a1/a2</code></td><td>替换<strong>所有行</strong>中，<strong>第一处</strong>符合条件的内容</td></tr><tr><td><code>:%s/a1/a2/g</code></td><td>替换<strong>所有行</strong>中，<strong>所有</strong>符合条件的内容</td></tr><tr><td><code>:n1,n2 s/a1/a2</code></td><td>将文件中 <strong>n1 到 n2 行</strong>中<strong>第一处</strong> a1 都用 a2 替换</td></tr><tr><td><code>:n1,n2 s/a1/a2/g</code></td><td>将文件中 <strong>n1 到 n2 行</strong>中<strong>所有</strong> a1 都用 a2 替换</td></tr></tbody></table><h3 id="4-行号显示：“-set-nu”"><a href="#4-行号显示：“-set-nu”" class="headerlink" title="4.行号显示：“: set nu”;"></a>4.行号显示：“: set nu”;</h3><ol><li>行号显示<code>:set nu</code></li><li>取消行号显示：<code>:set nonu</code></li></ol><h3 id="5-文件切换"><a href="#5-文件切换" class="headerlink" title="5.文件切换"></a>5.文件切换</h3><p>使用vim打开多个文件后，在末行模式下可以进行切换。</p><ol><li>查看当前已经打开的所有文件：<code>:files</code>(%a表示激活状态，#表示上一个打开的文件)</li><li>切换到指定文件：<code>:open 文件名</code></li><li>切换到上一个文(back previous)：<code>:bp</code></li><li>切换到下一个文件(back next)：<code>:bn</code></li></ol><h2 id="4-编辑模式"><a href="#4-编辑模式" class="headerlink" title="4.编辑模式"></a>4.编辑模式</h2><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>i</td><td>在当前<strong>光标所在位置插入</strong>，光标后的文本相应向右移动</td></tr><tr><td>I</td><td>在<strong>光标所在行的行首插入</strong>，行首是该行的第一个非空白字符，相当于光标移动到行首执行 i 命令</td></tr><tr><td>o</td><td>在<strong>光标所在行的下插入</strong>新的一行。光标停在空行首，等待输入文本</td></tr><tr><td>O（大写）</td><td>在<strong>光标所在行的上插入</strong>新的一行。光标停在空行的行首，等待输入文本</td></tr><tr><td>a</td><td>在当前<strong>光标所在位置之后插入</strong></td></tr><tr><td>A</td><td>在<strong>光标所在行的行尾插入</strong>，相当于光标移动到行尾再执行 a 命令</td></tr><tr><td>esc键</td><td>退出编辑模式</td></tr></tbody></table><h2 id="5-扩展"><a href="#5-扩展" class="headerlink" title="5.扩展"></a>5.扩展</h2><p>1.代码颜色显示：“：syntax on&#x2F;off”</p><p>2.<strong>vim内置计算器</strong>：<br>a.进入编辑模式<br>b.按<code>“ctrl+r</code>，光标变成引号，，输入<code>=</code>，光标转到最后一行<br>c.输入需要计算的内容，按下enter后，计算结果回替代上一步中的引号，光标恢复</p><p>3.<strong>vim的配置</strong><br>a.文件打开时，末行模式下输入的配置为临时配置，关闭文件后配置无效<br>b.修改个人配置文件，可以永久保存个人配置（~&#x2F;.vimrc，如果没有可以自行创建）<br>c.修改全局配置文件，对每个用户生效（vim自带，&#x2F;etc&#x2F;vimrc）</p><p>注：个人配置文件优先级更高，当个人配置和全局配置发生冲突时，系统以当前用户的个人配置文件为准</p><p>4.<strong>异常退出</strong></p><p>在编辑文件后，未正常保存退出时，会产生异常退出交换文件（.原文件名.swp）<br>将交换文件删除后，再次打开文件时，无提示：“#rm -f .原文件名.swp”</p><p>5.<strong>别名机制</strong>：自定义指令<br>Linux中，存在一个别名映射文件： ~&#x2F;.bashrc<br>修改文件内容，可以自定义指令，重新登录账号后生效</p><p>6.<strong>文件快捷方式</strong><br>对于深层文件，可以创建文件快捷方式，便于后续操作：#ln -s 源路径 新路径</p><p>7.<strong>退出方式</strong><br>（1）在vim中退出文件编辑模式，可以使用<code>:q</code>或者<code>:wq</code><br>（2）建议使用<code>:x</code>：使用效果等同于<code>wq</code>，如果文件有改动则先保存后退出；但是如果文件没有做修改，会直接退出，不会修改文件更新时间，避免用户混淆文件的修改时间</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> program </tag>
            
            <tag> software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Composition and classification of computers</title>
      <link href="/blog/2023/08/15/Composition-and-classification-of-computers/"/>
      <url>/blog/2023/08/15/Composition-and-classification-of-computers/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机的组成和分类"><a href="#一、计算机的组成和分类" class="headerlink" title="一、计算机的组成和分类"></a>一、计算机的组成和分类</h2><h4 id="计算机的分类-（Wiki百科）"><a href="#计算机的分类-（Wiki百科）" class="headerlink" title="计算机的分类 （Wiki百科）"></a>计算机的分类 （Wiki百科）</h4><p><img src="../Composition-and-classification-of-computers/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%86%E7%B1%BB.png" alt="计算机分类"></p><h4 id="了解一下台式计算机的构成"><a href="#了解一下台式计算机的构成" class="headerlink" title="了解一下台式计算机的构成"></a>了解一下台式计算机的构成</h4><p>机箱、主板、中央处理器（CPU）、主内存、电源供应器（电源）、显卡、显示器、键盘、鼠标、外部存储媒体（硬盘）等</p><p>知道了上述构成，我们接下来就是逐一讲解。</p><h2 id="二、机箱的用途"><a href="#二、机箱的用途" class="headerlink" title="二、机箱的用途"></a>二、机箱的用途</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="../Composition-and-classification-of-computers/%E6%9C%BA%E7%AE%B1%E6%A6%82%E8%BF%B0.png" alt="机箱概述"></p><h4 id="总结（选购机箱需要考虑的点）"><a href="#总结（选购机箱需要考虑的点）" class="headerlink" title="总结（选购机箱需要考虑的点）"></a>总结（选购机箱需要考虑的点）</h4><p>散热性能、外观偏好、体积大小</p><h2 id="三、主板的用途"><a href="#三、主板的用途" class="headerlink" title="三、主板的用途"></a>三、主板的用途</h2><p>关于主板废话不多说，看图。</p><p><img src="../Composition-and-classification-of-computers/%E4%B8%BB%E6%9D%BF.png" alt="主板"></p><p>注：主板的大小决定了机箱的大小</p><p>我们应该如何去挑选主板？</p><p>查看主板的一个规格和包装，<strong>关于主板主要是看提供的接口。</strong></p><p><img src="../Composition-and-classification-of-computers/%E4%B8%BB%E6%9D%BF%E8%A7%84%E6%A0%BC.png" alt="主板规格"></p><p><strong>因为同一个型号的主板产品，会因为接口的不同价格上会差很多</strong></p><h2 id="四、CPU处理器的用途"><a href="#四、CPU处理器的用途" class="headerlink" title="四、CPU处理器的用途"></a>四、CPU处理器的用途</h2><p>如图就是CPU</p><p><img src="../Composition-and-classification-of-computers/CPU.png" alt="CPU"></p><p>如何判断一个CPU的性能</p><p><strong>简单粗暴：贵的一定是好的。</strong></p><p>个人主机当中CPU的两大厂商</p><p>1.AMD ：更新周期快，短时间内会更新性能，更新周期&lt; 12 个月（ <strong>AMD YES</strong> ）<br>2.Intel（英特尔）：挤牙膏，更新周期为 18个月（ <strong>牙膏厂</strong>）</p><h3 id="4-1、Intel代表的处理器型号"><a href="#4-1、Intel代表的处理器型号" class="headerlink" title="4.1、Intel代表的处理器型号"></a>4.1、Intel代表的处理器型号</h3><p>1.奔腾（Pentium）：同样属于比较低端的产品，主要是用于Word文档办公。<br>2.赛扬（Celeron）：比较低端的产品，主要是上网使用。<br>3.酷睿（Core）：相比前两者，性能要求会高一点。</p><p><strong>注：重点学习酷睿Core</strong></p><h4 id="酷睿Core"><a href="#酷睿Core" class="headerlink" title="酷睿Core"></a>酷睿Core</h4><p>关于酷睿，同样的分为四个等级，i3、i5、i7、i9这四个，<strong>在同年代的产品当中性能遵循 i3&lt; i5 &lt; i7 &lt; i9</strong></p><p>​i3 : 文档、客户等处理要求快速，办公不卡（能流畅打CF、LOL等）<br>​i5 ：处理简单的视频，处理简单的程序，主流游戏<br>​i7 ：发烧，大型游戏，大型工程，专业用户，等等<br>​i9 ：强无敌</p><p>我们拿到一个CPU型号，如何判断他的性能呢 ?</p><p>如：<strong>英特尔（Intel）12代 i5-12400F CPU处理器 6核12线程 单核睿频至高4.4Ghz 10400F迭代升级款</strong></p><p>i5-12400F ：表示的是英特尔 酷睿core i5等级，12是代号，表示的是第12代的意思，体现CPU的一个发布时间，接下来的4就是性能代号，这个数字范围在0~9当中，这个数字越大性能越强。末尾的字母代表消费人群也是产品线后缀如：G、Y主打续航，U稍微有点续航，也稍微含点性能、F表示没有核显、H是焊接不可拆卸、K就是支持超频的，更好的性能、X是至尊，强无敌。</p><p>​注：如需比较I5 12600 vs i7 7700 ，这种等级和代号都不一致比较的话，则需要去网上搜索了。</p><h3 id="4-2、AMD代表的处理器型号"><a href="#4-2、AMD代表的处理器型号" class="headerlink" title="4.2、AMD代表的处理器型号"></a>4.2、AMD代表的处理器型号</h3><p>锐龙（ryzen）：其就类似英特尔的酷睿系列</p><p>速龙（athlon）：比较低端的产品，类似奔腾、赛扬</p><p>线程撕裂者（Threadripper）：强无敌</p><h4 id="锐龙Ryzen"><a href="#锐龙Ryzen" class="headerlink" title="锐龙Ryzen"></a>锐龙Ryzen</h4><p>​Ryzen3（r3）: 对标英特尔 i3<br>​Ryzen5（r5）：对标英特尔 i5<br>​Ryzen7（r7）: 对标英特尔 i7<br>​Ryzen7（r9）: 对标英特尔 i9</p><h4 id="关于AMD的型号的相关解释"><a href="#关于AMD的型号的相关解释" class="headerlink" title="关于AMD的型号的相关解释"></a>关于AMD的型号的相关解释</h4><p><img src="../Composition-and-classification-of-computers/AMD.png" alt="AMD"></p><p>如：<strong>AMD 锐龙5 5600G处理器(r5)7nm 搭载Radeon Graphic 6核12线程 3.9GHz 65W AM4接口</strong></p><p>第一部分是锐龙5（r5），就是类似于I5 ，接下来就是3 表示3000系列、还有5000系列等，类似于intle的代数，在接下来的6就表示性能，剩余部分与英特尔几乎一致。</p><h3 id="4-3、CPU核心、线程、缓存"><a href="#4-3、CPU核心、线程、缓存" class="headerlink" title="4.3、CPU核心、线程、缓存"></a>4.3、CPU核心、线程、缓存</h3><h4 id="什么是核心和线程"><a href="#什么是核心和线程" class="headerlink" title="什么是核心和线程 ?"></a>什么是核心和线程 ?</h4><p>我们通过一个例子：八核十六线程来解释说明：</p><p>核：八核是指CPU的核心有八个，核心（Core）又称为内核，是CPU最重要的组成部分。</p><p>线程：CPU调度的最小单位，同一时间执行的最小任务单位，线程的执行需要CPU的调度。</p><h4 id="线程和核心的关系："><a href="#线程和核心的关系：" class="headerlink" title="线程和核心的关系："></a>线程和核心的关系：</h4><p>八核十六线程是指使用了<strong>超线程技术</strong>，把一个物理核心，模拟成两个逻辑核心，理论上要像十六颗物理核心一样在同一时间执行十六个线程，而并非是我们理解的八核只能并发执行8线程，这里的八核指的是物理核心，而线程调度需要的是逻辑核心。</p><h4 id="主频、睿频"><a href="#主频、睿频" class="headerlink" title="主频、睿频"></a>主频、睿频</h4><p>​主频：CPU一个核心的基本运算能力。<br>​睿频：指当启动一个运行程序后，处理器会自动加速到合适的频率，而原来的运行速度会提升 10%~20% 以保证程序流畅运行的一种技术。就是工作起来后能在主频的运算能力上提高一些。</p><h4 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h4><p>缓存嘛，当然是越高越好了呀，可以类比Redis哈哈哈哈 。</p><h3 id="4-4、查看电脑的CPU信息"><a href="#4-4、查看电脑的CPU信息" class="headerlink" title="4.4、查看电脑的CPU信息"></a>4.4、查看电脑的CPU信息</h3><p>这里以Win10操作系统为例</p><p>​方式一：右键开始菜单—设备管理器<br>​方式二：此电脑右键—属性<br>​方式三：下载CPU-Z</p><p><img src="../Composition-and-classification-of-computers/CPU-Z-one.png" alt="CPU-Z-one"></p><p>对上图做一些解释说明：</p><p>​TDP：功耗<br>​规格中 @2.20GHz 是主频<br>Win10通过ctrl + shift + ESC 唤醒任务管理器，可以得到下图</p><p><img src="../Composition-and-classification-of-computers/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8.png" alt="任务管理器"></p><p><strong>我们发现电脑的主频是2.20GHz ，当前处于睿频状态2.28GHz</strong></p><h2 id="五、内存和内存条的用途"><a href="#五、内存和内存条的用途" class="headerlink" title="五、内存和内存条的用途"></a>五、内存和内存条的用途</h2><p>内存就是我们计组中的RAM，内存越大，也就是同时运行应用的数量越多。</p><p>例：<strong>金士顿 (Kingston) FURY 16GB(8G×2)套装 DDR4 3200 台式机内存条</strong></p><p>DDR4：指的就是内存条的代号，其分为DDR2、DDR3、DDR4 、DDR5等</p><p>2000：指的是内存的频率，<strong>首先肯定的是越高越好，但同样对主板的要求越高，选购的时候判断一下主板是否支持</strong></p><p>DDR2、DDR3、DDR4 的区别：</p><p><img src="../Composition-and-classification-of-computers/DDR%E5%8C%BA%E5%88%AB.png" alt="DDR区别"></p><p>放呆槽靠右：DDR4</p><p>放呆槽靠左：DDR3</p><p>放呆槽中间：DDR1，DDR2</p><h3 id="5-1、如何查看自己电脑的内存和主板信息"><a href="#5-1、如何查看自己电脑的内存和主板信息" class="headerlink" title="5.1、如何查看自己电脑的内存和主板信息"></a>5.1、如何查看自己电脑的内存和主板信息</h3><p>关于内存和主板的信息，同样可以使用CPU-Z进行查询</p><h4 id="查看主板信息"><a href="#查看主板信息" class="headerlink" title="查看主板信息"></a>查看主板信息</h4><p><img src="../Composition-and-classification-of-computers/CPU-Z-TWO.png" alt="CPU-Z-TWO"></p><h4 id="查看内存信息"><a href="#查看内存信息" class="headerlink" title="查看内存信息"></a>查看内存信息</h4><p><img src="../Composition-and-classification-of-computers/CPU-Z-three.png" alt="CPU-Z-three"></p><p><strong>内存频率乘以2的结果是就是我们的购买内存条需要购买的频率</strong></p><h2 id="六、电源的用途"><a href="#六、电源的用途" class="headerlink" title="六、电源的用途"></a>六、电源的用途</h2><p>什么是电源？</p><p><img src="../Composition-and-classification-of-computers/%E7%94%B5%E6%BA%90.png" alt="电源"></p><p>​笔记本的电源就可以看作充电器，哈哈哈！</p><h4 id="台式机的电源（重点）"><a href="#台式机的电源（重点）" class="headerlink" title="台式机的电源（重点）"></a>台式机的电源（重点）</h4><p>电源的选择要根据自己的显卡和CPU等其他配置的功率去判断。<strong>用以避免供电不足的问题</strong></p><p><img src="../Composition-and-classification-of-computers/%E6%90%9C%E7%B4%A2.png" alt="搜索"></p><p>实在不行可以直接这么搜索，hhhhh。 <strong>关于电源的选择需要具体的问题具体分析</strong></p><h2 id="七、硬盘的用途"><a href="#七、硬盘的用途" class="headerlink" title="七、硬盘的用途"></a>七、硬盘的用途</h2><p>硬盘也就是我们计组当中的ROM，存储内存</p><p><img src="../Composition-and-classification-of-computers/%E7%A1%AC%E7%9B%98.png" alt="硬盘"></p><p>上面这一大串，就是官话，人话就是：<strong>硬盘分两类：机械硬盘、固态硬盘</strong>，长得就是上图 的样子</p><h3 id="7-1、机械硬盘"><a href="#7-1、机械硬盘" class="headerlink" title="7.1、机械硬盘"></a>7.1、机械硬盘</h3><h4 id="对机械硬盘做一些介绍"><a href="#对机械硬盘做一些介绍" class="headerlink" title="对机械硬盘做一些介绍"></a>对机械硬盘做一些介绍</h4><p>例： <strong>希捷(Seagate)4TB 256MB 5400RPM 台式机机械硬盘 SATA接口 希捷酷鱼BarraCuda系列(ST4000DM004)</strong></p><p>解释：4TB就是容量、256M就是硬盘的缓存（同样是越大越好）、5400RPM就是转速（越大越好），SATA接口如图所示</p><p><img src="../Composition-and-classification-of-computers/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98.png" alt="机械硬盘"></p><h3 id="7-2、固态硬盘（推荐）"><a href="#7-2、固态硬盘（推荐）" class="headerlink" title="7.2、固态硬盘（推荐）"></a>7.2、固态硬盘（推荐）</h3><h4 id="对固态硬盘（SSD）做一些介绍"><a href="#对固态硬盘（SSD）做一些介绍" class="headerlink" title="对固态硬盘（SSD）做一些介绍"></a>对固态硬盘（SSD）做一些介绍</h4><p>固态硬盘会提供如下的接口</p><p>​SATA接口 : 提供SATA接口的目的是为了让只有SATA接口的老电脑也能更换固态的一个普适性。<br>​MiniSATA接口 : 为以前的笔记本提供的接口，基本已经停产。<br>​PCI-E接口：原本是为显卡提供的接口，但是之前为了速度存在这种固态，基本已经停产，速度已达到&lt;&#x3D; 6000MB&#x2F;s。<br>​U.2接口：基本上停产。<br>​M.2接口（主流）：支持NVME协议，速度已达到&lt;&#x3D; 7000MB&#x2F;s，如图所示</p><p><img src="../Composition-and-classification-of-computers/%E6%8F%92%E6%A7%BD.png" alt="插槽"></p><p>解释一下如图：1 x M.2 2242-22110(PCle 4.0 x4 from CPU) 这句话</p><p>​主板上的一个M2接口支持pcie x4通道（通道就是连接CPU 走的路），因此这个M2接口支持满足NVME协议PCle 4.0的固态。<br>​主板上的PCIE插槽支持pcie通道，因此可以链接显卡</p><h3 id="7-3-、区别"><a href="#7-3-、区别" class="headerlink" title="7.3 、区别"></a>7.3 、区别</h3><h4 id="固态硬盘和机械硬盘的区别"><a href="#固态硬盘和机械硬盘的区别" class="headerlink" title="固态硬盘和机械硬盘的区别"></a>固态硬盘和机械硬盘的区别</h4><table><thead><tr><th align="center">机械硬盘</th><th align="center">固态硬盘</th></tr></thead><tbody><tr><td align="center">读写速度 &lt;&#x3D; 100MB&#x2F;s</td><td align="center">需要根据接口判断速度SATA一般是&lt;&#x3D; 550MB&#x2F;s</td></tr><tr><td align="center">寿命低</td><td align="center">寿命长</td></tr><tr><td align="center">价格低</td><td align="center">价格较高</td></tr></tbody></table><h2 id="八、显卡的用途"><a href="#八、显卡的用途" class="headerlink" title="八、显卡的用途"></a>八、显卡的用途</h2><p> 如果说CPU是电脑的大脑，那么显卡就是展示画面的一个画家。CPU首先要把需要显示的内容设计出来，然后再通过显卡一张一张图片显示出来。一张一张的图片就是大家经常所说的帧数。想要让这些图片具有连贯作用，就需要显卡发挥更好的作用。性能一般的显卡在连贯图片的时候可能会比较卡顿，整体感觉不是特别流畅。</p><h4 id="显卡当中的两大厂商"><a href="#显卡当中的两大厂商" class="headerlink" title="显卡当中的两大厂商"></a>显卡当中的两大厂商</h4><p>​NVIDIA（英伟达）：生产的显卡称为N卡（同级别，游戏方面优化稍好一些）<br>​AMD ：生产的显卡称为A卡（同级别，图形渲染和画面效果稍好一些）</p><h3 id="8-1、NVIDIA（英伟达）的显卡"><a href="#8-1、NVIDIA（英伟达）的显卡" class="headerlink" title="8.1、NVIDIA（英伟达）的显卡"></a>8.1、NVIDIA（英伟达）的显卡</h3><h4 id="相关产品代号"><a href="#相关产品代号" class="headerlink" title="相关产品代号"></a>相关产品代号</h4><p>​GeForce 900：例如 GTX960、GTX960TI、GTX980</p><p>​GeForce10：例如 GTX1050、GTX1060、1050TI、1080TI</p><p>​GeForce16：例如GTX1650、GTX1660</p><p>​GeForce RTX 20系列：RTX2060、RTX2070、RTX2070 Super、RTX2080 Super、RTX2080TI</p><p>​GeForce RTX 30系列：RTX3060、RTX3050TI、RTX3090TI</p><p>​…</p><h4 id="GTX-和-RTX-的区别渲染图"><a href="#GTX-和-RTX-的区别渲染图" class="headerlink" title="GTX 和 RTX 的区别渲染图"></a>GTX 和 RTX 的区别渲染图</h4><p><img src="../Composition-and-classification-of-computers/%E5%8C%BA%E5%88%AB%E6%B8%B2%E6%9F%93.png" alt="区别渲染"></p><p>分析显卡的一个参数</p><p><strong>七彩虹（Colorful）火神iGame GeForce RTX 3090 Vulcan OC 24G 1695-1785Mhz 赛博朋克2077游戏光追电脑显卡</strong></p><p>RTX3090 上面已经说过了，24G表示的是显存（同样是越大越好）。</p><h3 id="8-1、AMD的显卡"><a href="#8-1、AMD的显卡" class="headerlink" title="8.1、AMD的显卡"></a>8.1、AMD的显卡</h3><h4 id="A卡的产品系列代号（只介绍当前还可正常使用的）"><a href="#A卡的产品系列代号（只介绍当前还可正常使用的）" class="headerlink" title="A卡的产品系列代号（只介绍当前还可正常使用的）"></a>A卡的产品系列代号（只介绍当前还可正常使用的）</h4><p>​R200系列：例如 R9 295 X2（旗舰）、R9 290X、R9 280、R7 265<br>​R300系列：例如 R9 390、R9 380X、R7 360<br>​RX 400系列：例如 RX 460、RX 470、RX 480<br>​RX 500系列：例如 RX 550、RX 560、RX 570、RX 580、RX 590<br>​RX Vega系列：例如 RX Vega 56、RX Vega 64、RX Vega 64水冷<br>​RX 5000系列：例如 RX 5500 XT、RX 5600、RX 5600 XT、RX 5700、RX 5700 XT<br>​RX 6000系列：例如 RX 6400、RX 6500 XT、RX 6600、RX 6600 XT、RX 6700 XT、RX 6800、RX 6900 XT</p><h4 id="A卡的产品系列代号讲解"><a href="#A卡的产品系列代号讲解" class="headerlink" title="A卡的产品系列代号讲解"></a>A卡的产品系列代号讲解</h4><p>1.先看前缀，这几年AMD的前缀都是RX开头，如RX580、RX5700等，<br>2.前缀后面一第一个数字和英伟达一样表示第几代, RX580就表示第5代，这个数字越大越好。值得一提的是在RX400系与RX500系之后并不是600系，而是RX Vega系列，比如RXVega56和RX Vega64，这是为了阻击英伟达GTX1080临时起的系列。还有一个50周年纪念版RX5700、RX5700XT，其对标的是英伟达的RTX2060&#x2F;2070。再往上还有顶级的Radeon VIl。<br>3.代数后面的数字表示性能等级，RX580性能高于RX570，RX570性能高于RX550，这个数据也是越大越好。<br>4.最后看后缀，<strong>X2表示双芯片</strong>，这个是AMD同代产品里面最好的，比如R9 295 X2,虽然是上一代的旗舰但性能比RX590还要强。<strong>X表示完整核心</strong>，GE BOOST，XT PRO表示加强版，<strong>D表示核心阉割</strong>。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>A卡的优势在于性能比更高，在同价位上性能是强于N卡的，比如同级别的GTX1660和RX590，两者性能旗鼓相当，但是RX590价格要便宜200多。<br>缺点就是功耗略高，用户没有N卡多，对游戏厂商关系没有N卡友好，驱动也没有N卡稳定。我推荐大家在选购中端和入门机型的时候A卡N卡都可以用，区别不大的，但是高端机型的话还是选英伟达吧，没办法，谁让英伟达和游戏厂商关系好还有光追呢，当然了你得不差钱。</p><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><h4 id="一些要说的话"><a href="#一些要说的话" class="headerlink" title="一些要说的话"></a>一些要说的话</h4><p>到这里，对于机箱、主板、CPU、内存、硬盘、电源、显卡的学习就结束了，注意这篇文章并不是教你哪些百度上的哪些一连串的知识，而是让你看完能够切实的知道什么样的硬件是好的，型号怎么看，怎么选，最后自己再去补充一些知识达到能够自己选配件配置电脑的能力。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2023/08/11/hello-world/"/>
      <url>/blog/2023/08/11/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Welcome-to-Wxrkz"><a href="#Welcome-to-Wxrkz" class="headerlink" title="Welcome to Wxrkz!"></a>Welcome to Wxrkz!</h2><p>作为一个刚入门的小白，拥有一个属于自己的博客，我感觉已经非常激动了。</p><p>让我有写博客的念头的原因有以下三点：</p><h4 id="1-作为一个软件开发爱好者，写博客的过程也是一个学习，自我成长的一个过程。方便自己将平常所学所见记录下来，也可以满足我的分享欲哈哈哈哈。技术就是要开源才好玩，自己一个人闷着头，像井底之蛙一样，永远不得长进。三人行，必有我师。"><a href="#1-作为一个软件开发爱好者，写博客的过程也是一个学习，自我成长的一个过程。方便自己将平常所学所见记录下来，也可以满足我的分享欲哈哈哈哈。技术就是要开源才好玩，自己一个人闷着头，像井底之蛙一样，永远不得长进。三人行，必有我师。" class="headerlink" title="1.作为一个软件开发爱好者，写博客的过程也是一个学习，自我成长的一个过程。方便自己将平常所学所见记录下来，也可以满足我的分享欲哈哈哈哈。技术就是要开源才好玩，自己一个人闷着头，像井底之蛙一样，永远不得长进。三人行，必有我师。"></a>1.作为一个软件开发爱好者，写博客的过程也是一个学习，自我成长的一个过程。方便自己将平常所学所见记录下来，也可以满足我的分享欲哈哈哈哈。技术就是要开源才好玩，自己一个人闷着头，像井底之蛙一样，永远不得长进。三人行，必有我师。</h4><h4 id="2-自己想记录一点东西，作为自己成长的一个记录。大多也就是我自己随笔写写，分享一些文章或者分享自己学习编程的一些知识。"><a href="#2-自己想记录一点东西，作为自己成长的一个记录。大多也就是我自己随笔写写，分享一些文章或者分享自己学习编程的一些知识。" class="headerlink" title="2.自己想记录一点东西，作为自己成长的一个记录。大多也就是我自己随笔写写，分享一些文章或者分享自己学习编程的一些知识。"></a>2.自己想记录一点东西，作为自己成长的一个记录。大多也就是我自己随笔写写，分享一些文章或者分享自己学习编程的一些知识。</h4><h4 id="3-最重要的是，我热爱编程，编程可谓是一种艺术。我想用博客来时刻告诫自己。最后希望自己能够坚持下来。"><a href="#3-最重要的是，我热爱编程，编程可谓是一种艺术。我想用博客来时刻告诫自己。最后希望自己能够坚持下来。" class="headerlink" title="3.最重要的是，我热爱编程，编程可谓是一种艺术。我想用博客来时刻告诫自己。最后希望自己能够坚持下来。"></a>3.最重要的是，我热爱编程，编程可谓是一种艺术。我想用博客来时刻告诫自己。最后希望自己能够坚持下来。</h4><p>More info WX:wxrkz123 </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
